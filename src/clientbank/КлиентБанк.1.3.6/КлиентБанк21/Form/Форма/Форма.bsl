// (С) АБИ Украина 2013

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//^<< szewczuk 15.11.2016
	//^ Перенес определение конфигурации в отдельную процедуру
	ОпределитьКонфигурацию();
	//^>> 
	
	
	МетаПуть = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Объект.ДатаВыписки 	= ТекущаяДата();
	Объект.ДатаППС 		= ТекущаяДата();
	Объект.ДатаПППо 	= ТекущаяДата();
	
	//^<< szewczuk 09.11.2016
	//^Объект.ВерсияКБ = "2.0.1";
	Объект.ВерсияКБ = "2.1.1";
	//^>> 
	
	СтатусыСтрокИмпорта = Новый Структура;
	СтатусыСтрокИмпорта.Вставить("СуществующийПлатеж", 1);
	СтатусыСтрокИмпорта.Вставить("ГотовКЗаписи",2);
	СтатусыСтрокИмпорта.Вставить("НеобходимоЗаполнитьРеквизиты", 3);
	СтатусыСтрокИмпорта.Вставить("СуществующийПлатежНеобходимоОплатить", 4);
	
	РежимОтладки = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	//^<< szewczuk 09.11.2016
	УстановитьВидимостьНаСервере();
	//^>> 
	
КонецПроцедуры

//^<< szewczuk 11.11.2016
&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	МассивРеквизитовУТ = Новый Массив;
	МассивРеквизитовУТ.Добавить(Элементы.ТаблицаИмпортТипДокумента);
	МассивРеквизитовУТ.Добавить(Элементы.ТаблицаИмпортСтатьяДоходовИлиРасходов);
	МассивРеквизитовУТ.Добавить(Элементы.ТаблицаИмпортПодразделение);
	
	МассивРеквизитовБУ =  Новый Массив;
	
	МассивРеквизитовБУ.Добавить(Элементы.ТаблицаИмпортДоговор);
	
	Для каждого ТекРеквизит Из МассивРеквизитовУТ Цикл
		ТекРеквизит.Видимость = Объект.Конфигурация = "УТ";
	КонецЦикла;
	
	Для каждого ТекРеквизит Из МассивРеквизитовБУ Цикл
		ТекРеквизит.Видимость = Объект.Конфигурация = "БУ";
	КонецЦикла;
	
КонецПроцедуры
//^>> 

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	#Если ВебКлиент Тогда
	УстановитьРасширениеРаботыСФайлами();
	ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	//^<< szewczuk 31.10.2016
	//^Объект.НастройкаПервыйЗапуск = Ложь;
	//^>> 
	
	// 2. Проверяем на первый запуск
	Если Объект.НастройкаПервыйЗапуск = Ложь Тогда
		// первый запуск - инициализация параметров настройки
		ПервыйЗапускОбработки();
		
		ПараметрыФормы = Новый Структура("Ключ", Объект);
		
		//^<< szewczuk 09.11.2016
		//^Настройки = ОткрытьФормуМодально(МетаПуть + ".Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма);
		Настройки = Неопределено;
		ОткрытьФорму(МетаПуть + ".Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьНастройкиПервыйЗапускЗавершение", ЭтаФорма, Новый Структура("ПараметрыФормы", ПараметрыФормы)));
		//^>> 
				
		Объект.НастройкаПервыйЗапуск = Истина;
	Иначе
    	//не первый запуск, восстановить все значения параметров настройки
		ВосстановитьЗначениеНастроек();
	КонецЕсли;	
	
	// 3. читаем ini файлы
	//^<< szewczuk 09.11.2016
	//^Пока НЕ ПрочитатьИниФайлы(Элементы) Цикл
	//^	Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Укажите правильный каталог в настройках!';uk='Не правильно зазначений каталог продукту. Вкажіть правильний каталог у настроюваннях!'"));
	//^	ПараметрыФормы = Новый Структура("Ключ", Объект);
	//^	
	//^	Настройки = ОткрытьФормуМодально(МетаПуть + ".Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма);
	//^	Если Настройки <> Неопределено Тогда
	//^		ВосстановитьЗначениеНастроек(Настройки);
	//^	Иначе
	//^		// пользователь не захотел сделать настройки, выйдем вообще из обработки
	//^		Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Обработка будет закрыта!';uk='Не правильно зазначений каталог продукту. Обробка буде закрита!'"));
	//^		Отказ = Истина;
	//^		Прервать;
	//^	КонецЕсли; 
	//^КонецЦикла;
	//^ПриИзмененииБанковскогоСчета();
	//^	// При установленных параметрах делаем автоимпорт и/или автозаполнение таблицы экспорта
	//^АвтоИмпортЭкспорт();

	Если НЕ ПрочитатьИниФайлы(Элементы) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Объект);
		Настройки = Неопределено;
		ОткрытьФорму(МетаПуть + ".Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтаФорма, Новый Структура("ПараметрыФормы", ПараметрыФормы)));
		
		ТекстПредупреждения = НСтр("ru='Не правильно указан каталог продукта. Укажите правильный каталог в настройках!';uk='Не правильно зазначений каталог продукту. Вкажіть правильний каталог у настроюваннях!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
	Иначе 
		ПриИзмененииБанковскогоСчета();
		// При установленных параметрах делаем автоимпорт и/или автозаполнение таблицы экспорта
		АвтоИмпортЭкспорт();
	КонецЕсли;
	//^>> 	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВосстановитьЗначениеНастроек(НастройкиИзФормы = Неопределено)
	
	Если НастройкиИзФормы <> Неопределено Тогда 
		Объект.НастройкаИмяКаталогаКБ 						= НастройкиИзФормы.НастройкаИмяКаталогаКБ;
		
		Объект.НастройкаОрганизацияПоУмолчанию 				= НастройкиИзФормы.НастройкаОрганизацияПоУмолчанию;
		//^<< szewczuk 14.11.2016
		//^Объект.НастройкаБанковскийСчетПоУмолчанию 			= НастройкиИзФормы.НастройкаБанковскийСчетПоУмолчанию;
		ВосстановитьЗначениеНастройкиБанковскийСчет(Объект.НастройкаБанковскийСчетПоУмолчанию,НастройкиИзФормы.НастройкаБанковскийСчетПоУмолчанию);
		//^>> 
		
		
		Объект.НастройкаАвтоСозданиеКонтрагента 			= НастройкиИзФормы.НастройкаАвтоСозданиеКонтрагента;
		Объект.НастройкаРодительНовыхКонтрагентовПлатимМы 	= НастройкиИзФормы.НастройкаРодительНовыхКонтрагентовПлатимМы;
		Объект.НастройкаРодительНовыхКонтрагентовПлатятНам 	= НастройкиИзФормы.НастройкаРодительНовыхКонтрагентовПлатятНам;
		
		Объект.НастройкаПытатьсяПроводитьСозданныеДокументы = НастройкиИзФормы.НастройкаПытатьсяПроводитьСозданныеДокументы;
		//^<< szewczuk 11.11.2016
		//^Объект.НастройкаОткрыватьСозданныеДокументы 		= НастройкиИзФормы.НастройкаОткрыватьСозданныеДокументы;
		//^Объект.НастройкаОткрыватьТолькоДокументыСОшибками= НастройкиИзФормы.НастройкаОткрыватьТолькоДокументыСОшибками;
		//^>> 
		
		Объект.НастройкаАвтоИмпортВыписок 					= НастройкиИзФормы.НастройкаАвтоИмпортВыписок;
		Объект.НастройкаИмпортТолькоВходящихПлатежей 		= НастройкиИзФормы.НастройкаИмпортТолькоВходящихПлатежей;
		Объект.НастройкаКоличествоДнейДляОплатыБанка 		= НастройкиИзФормы.НастройкаКоличествоДнейДляОплатыБанка;
		
		Объект.НастройкаАвтоЗаполнениеТаблицыЭкспорта 		= НастройкиИзФормы.НастройкаАвтоЗаполнениеТаблицыЭкспорта;
		Объект.НастройкаПорядокСортировки 					= НастройкиИзФормы.НастройкаПорядокСортировки;
		Объект.НастройкаИспользоватьСортировку 				= НастройкиИзФормы.НастройкаИспользоватьСортировку;
		
		Объект.НастройкаСтатьяДДСВходящие 					= НастройкиИзФормы.НастройкаСтатьяДДСВходящие;
		Объект.НастройкаСтатьяДДСИсходящие 					= НастройкиИзФормы.НастройкаСтатьяДДСИсходящие;
		Объект.НастройкаВидОперацииВходящие 				= НастройкиИзФормы.НастройкаВидОперацииВходящие;
		Объект.НастройкаВидОперацииИсходящие 				= НастройкиИзФормы.НастройкаВидОперацииИсходящие;
		Объект.НастройкаСтатьяДоходов 						= НастройкиИзФормы.НастройкаСтатьяДоходов;
		Объект.НастройкаСтатьяРасходов 						= НастройкиИзФормы.НастройкаСтатьяРасходов;
		Объект.НастройкаПодразделениеВходящие 				= НастройкиИзФормы.НастройкаПодразделениеВходящие;
		Объект.НастройкаПодразделениеИсходящие 				= НастройкиИзФормы.НастройкаПодразделениеИсходящие;
		
		Объект.НастройкаСтавкаНДС 							= НастройкиИзФормы.НастройкаСтавкаНДС;
		
		Объект.НастройкаФормироватьКраткоеНаименованиеКонтрагента 	= НастройкиИзФормы.НастройкаФормироватьКраткоеНаименованиеКонтрагента;
		Объект.НастройкаФормироватьКраткоеНаименованиеОрганизации 	= НастройкиИзФормы.НастройкаФормироватьКраткоеНаименованиеОрганизации;
		//^<< szewczuk 03.11.2016
		Объект.НастройкаСчетУчетаДС		=	НастройкиИзФормы.НастройкаСчетУчетаДС;
		Объект.НастройкаВхСчетРасчетов	=	НастройкиИзФормы.НастройкаВхСчетРасчетов;
		Объект.НастройкаИсхСчетРасчетов	=	НастройкиИзФормы.НастройкаИсхСчетРасчетов;
		Объект.НастройкаВхСчетАвансов	=	НастройкиИзФормы.НастройкаВхСчетАвансов;
		Объект.НастройкаИсхСчетАвансов	=	НастройкиИзФормы.НастройкаИсхСчетАвансов;
		//^>>
		// ...
		
	КонецЕсли;	
	
	Объект.Организация 		= Объект.НастройкаОрганизацияПоУмолчанию;
	//^<< szewczuk 14.11.2016
	//^Объект.БанковскийСчет 	= Объект.НастройкаБанковскийСчетПоУмолчанию;
	ВосстановитьЗначениеНастройкиБанковскийСчет(Объект.БанковскийСчет,Объект.НастройкаБанковскийСчетПоУмолчанию);
	//^>> 

	// ...
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк82/НастройкаФорматыОбмена", "КлиентБанк82Общие");
		
	Если Настройки <> Неопределено Тогда
		ТаблицаНастроекФорматыОбмена = Настройки.Получить("НастройкаФорматыОбмена");
		Объект.НастройкаФорматыОбмена.Загрузить(ТаблицаНастроекФорматыОбмена);
	КонецЕсли;	
	
	//ПриИзмененииБанковскогоСчета();
	
КонецПроцедуры

//^<< szewczuk 15.11.2016
&НаСервере
Процедура ВосстановитьЗначениеНастройкиБанковскийСчет(БанковскийСчет,НастройкаБанковскийСчет)
	
	Если  НастройкаБанковскийСчет <> Неопределено Тогда
		БанковскийСчет 	= НастройкаБанковскийСчет;
	Иначе 
		Если Объект.Конфигурация = "УТ" Тогда
			БанковскийСчет 	= Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
			БанковскийСчет	= Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
//^>> 

&НаКлиенте
Функция ПолучитьКаталогИБ()
	ИмяКаталогаКБ = ПолучитьИспользуемоеИмяФайлаОбработки();
	
	ПроверяемФайл = Новый Файл(ИмяКаталогаКБ);
	Если ПроверяемФайл.Существует() Тогда
		Возврат ПроверяемФайл.Путь;
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция ПолучитьИспользуемоеИмяФайлаОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции	

&НаКлиенте
// Проверяет существование файла, выдает предупреждение, если файла нет
// Предупреждение может не выдаваться, если НеВыдаватьПредупреждения = Истина; 
// 
//
// Параметры:
//
//  ИмяПроверяемогоФайла  				– Строка  – имя файла, который проверяем
//  ТекстДополнительногоПредупреждения  – Строка –  текст, который будет присоединен к
//											предупреждению
//  НеВыдаватьПредупреждения 			– Булево - при Истина предупреждение не выдается
//  
//
// Возвращаемое значение:
//
//   Булево    – Истина - существует, Ложь - нет
// 
Функция СуществуетФайл(ИмяПроверяемогоФайла, ТекстДополнительногоПредупреждения = "", НеВыдаватьПредупреждения = Ложь) Экспорт
	ПроверяемФайл = Новый Файл(ИмяПроверяемогоФайла);
	Если ПроверяемФайл.Существует() Тогда
		Возврат Истина;
	Иначе
		
		Если Не НеВыдаватьПредупреждения Тогда
		
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файла с именем %1 не существует!';uk='Файлу з ім’ям %1 не існує!'"), ИмяПроверяемогоФайла);
			
			Если НЕ ПустаяСтрока(ТекстДополнительногоПредупреждения) Тогда
				ТекстПредупреждения = ТекстПредупреждения + " " + ТекстДополнительногоПредупреждения;
			КонецЕсли; 
			
			//^<< szewczuk 02.11.2016
			//^Предупреждение(ТекстПредупреждения);
			ПоказатьПредупреждение(,ТекстПредупреждения,,);
			//^>> 
			
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // СуществуетФайл()

&НаКлиенте
// Читает тчИспользуемыеФорматыОбмена из файла ClientBank.ini
// также формирует список значений используемых форматов для выбора на основной форме
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   СписокЗначений – список значений используемых форматов для выбора на основной форме
//
//
Функция ПрочитатьИспользуемыеФорматыОбмена() Экспорт

	ФайлКБ = Новый ТекстовыйДокумент();
	Объект.тчИспользуемыеФорматыОбмена.Очистить();
	СписокФорматов = Новый СписокЗначений; // СписокВыбора для ФорматОбмена

	сооФорматИмяФайлаОбработкиФормата = Новый СписокЗначений;
	
	ИмяКаталогаКБ = Объект.НастройкаИмяКаталогаКБ;
	ИмяФайлаКБИни = ИмяКаталогаКБ + "ClientBank.ini";
	
	Если СуществуетФайл(ИмяФайлаКБИни,,Истина) Тогда

		ФайлКБ.Прочитать(ИмяФайлаКБИни);
		
		Для н = 1 По ФайлКБ.КоличествоСтрок() Цикл
			
			СтрокаИзФайла = ФайлКБ.ПолучитьСтроку(н);
			Если СокрЛП(СтрокаИзФайла) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			Поз = Найти(СтрокаИзФайла,";");
			ИмяФормата = Сред(СтрокаИзФайла, 1, Поз - 1);
			
			ИмяФайлаОбработки = Сред(СтрокаИзФайла,Поз + 1);
			ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
			
			сооФорматИмяФайлаОбработкиФормата.Добавить(ИмяФормата, ПолноеИмяФайлаОбработки);
			СписокФорматов.Добавить(ИмяФормата, ИмяФормата);
			
			СтрокаИспользуемыеФорматыОбмена = Объект.тчИспользуемыеФорматыОбмена.Добавить();
			
			СтрокаИспользуемыеФорматыОбмена.ИмяФормата = ИмяФормата;
			СтрокаИспользуемыеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
			СтрокаИспользуемыеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ФорматыОбмена = Объект.НастройкаФорматыОбмена;
	Если ФорматыОбмена <> Неопределено И ТипЗнч(ФорматыОбмена) = Тип("ДанныеФормыКоллекция") Тогда
		Для Каждого ТекФорматОбмена Из ФорматыОбмена Цикл
			ИмяФормата = ТекФорматОбмена.ИмяФормата; 
			ИмяФайлаОбработки = ТекФорматОбмена.ИмяФайлаОбработкиФормата;
			ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
			
			сооФорматИмяФайлаОбработкиФормата.Добавить(ИмяФормата, ИмяКаталогаКБ + "\" + ИмяФайлаОбработки);	
			
			Если СписокФорматов.НайтиПоЗначению(ИмяФормата) = Неопределено Тогда
				СписокФорматов.Добавить(ИмяФормата, ИмяФормата);
			КонецЕсли;	
			
			сооМФОФорматСтрока = сооМФОФормат.НайтиПоЗначению(СокрЛП(ТекФорматОбмена.МФО));
			Если сооМФОФорматСтрока = Неопределено Тогда
				сооМФОФормат.Добавить(СокрЛП(ТекФорматОбмена.МФО), ИмяФормата);	
			Иначе
				// Переопределение формата с тем же МФО
				сооМФОФорматСтрока.Представление = ИмяФормата;
			КонецЕсли;	
			
			СтрокаИспользуемыеФорматыОбмена = Объект.тчИспользуемыеФорматыОбмена.Добавить();
			
			СтрокаИспользуемыеФорматыОбмена.ИмяФормата = ИмяФормата;
			СтрокаИспользуемыеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
			СтрокаИспользуемыеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
			
		КонецЦикла;	
	КонецЕсли;
	
	СписокФорматов.СортироватьПоЗначению();
	
	Возврат СписокФорматов;
	
КонецФункции // ПрочитатьИспользуемыеФорматыОбмена()

&НаКлиенте
// Читает файлы AllBanks.ini, AllFormats.ini, ClientBank.ini, Abbrs.ini
// формируется соответствие сооМФОФормат МФО -> Формат
// формируется соответствие сооФорматИмяФайлаОбработкиФормата Формат -> ПолноеИмяФайлаОбработкиФормата
// формируется список значений СписокФорматов для выбора в поле Формат
// доступные для выбора форматы из файла ClientBank.ini
//
// Формируется список значений СокращенияТиповОрганизаций, содержащий возможные сокращения 
//
// В файле AllBanks.ini находится список МФО1, МФО2, ... МФОN;НазваниеФормата
// В файле ClientBank.ini находится список НазваниеФормата;ИмяФайлаОбработкиФормата
// В файле Abbrs.ini находится список сокращений типов организаций
//
// Параметры: нет
//
//
Функция ПрочитатьИниФайлы(ЭлементыФормы) Экспорт
	
	Файл = Новый ТекстовыйДокумент();
	
	ИмяКаталогаКБ = Объект.НастройкаИмяКаталогаКБ;
	
	ИмяФайлаВБИни = ИмяКаталогаКБ + "AllBanks.ini";
	
	Если НЕ СуществуетФайл(ИмяФайлаВБИни) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл.Прочитать(ИмяФайлаВБИни);
	
	//сооМФОФормат = Новый Соответствие;
	сооМФОФормат = Новый СписокЗначений;
	
	Для н = 1 По Файл.КоличествоСтрок() Цикл
		СтрокаИзФайла = Файл.ПолучитьСтроку(н);
		Если СокрЛП(СтрокаИзФайла) = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(СтрокаИзФайла,";");
		ИмяФормата = Сред(СтрокаИзФайла,Поз + 1);
		СтрокаИзФайла = Сред(СтрокаИзФайла,1, Поз - 1);
		
		Поз2 = Найти(СтрокаИзФайла,",");
		Пока Поз2 Цикл
			КодМФО = Сред(СтрокаИзФайла,1, Поз2 - 1);
			сооМФОФормат.Добавить(КодМФО, ИмяФормата);
			СтрокаИзФайла = Сред(СтрокаИзФайла,Поз2 + 1);
			Поз2 = Найти(СтрокаИзФайла,",");
		КонецЦикла;	
		
		//Последний код МФО из СтрокаИзФайла
		сооМФОФормат.Добавить(СтрокаИзФайла, ИмяФормата);
	КонецЦикла;
	
	
	ФайлВФ = Новый ТекстовыйДокумент();
	
	ИмяФайлаВФИни = ИмяКаталогаКБ + "AllFormats.ini";
	Если НЕ СуществуетФайл(ИмяФайлаВФИни) Тогда
		Возврат Ложь;
	КонецЕсли;        	
	
	ФайлВФ.Прочитать(ИмяФайлаВФИни);
	
	Объект.тчВсеФорматыОбмена.Очистить();
	//сзВсеФорматыОбмена.Очистить();
	
	Для н = 1 По ФайлВФ.КоличествоСтрок() Цикл
		СтрокаИзФайла = ФайлВФ.ПолучитьСтроку(н);
		Если СокрЛП(СтрокаИзФайла) = "" Тогда
			Продолжить;
		КонецЕсли;
		Поз = Найти(СтрокаИзФайла,";");
		ИмяФормата = Сред(СтрокаИзФайла, 1, Поз - 1);
		
		ИмяФайлаОбработки = Сред(СтрокаИзФайла,Поз + 1);
		ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
		
		СтрокаВсеФорматыОбмена = Объект.тчВсеФорматыОбмена.Добавить();
		
		СтрокаВсеФорматыОбмена.Установлен = Ложь;
		
		СтрокаВсеФорматыОбмена.ИмяФормата = ИмяФормата;
		СтрокаВсеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
		СтрокаВсеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
		
	//	сзВсеФорматыОбмена.Добавить(ИмяФормата, ИмяФормата);
		
	КонецЦикла;
	
	СписокФорматов = ПрочитатьИспользуемыеФорматыОбмена();
	ЭлементыФормы.ФорматОбмена.СписокВыбора.ЗагрузитьЗначения(СписокФорматов.ВыгрузитьЗначения());
	
	ФайлАБ = Новый ТекстовыйДокумент();
	
	ИмяФайлаАБИни = ИмяКаталогаКБ + "Abbrs.ini";
	Если НЕ СуществуетФайл(ИмяФайлаАБИни) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлАБ.Прочитать(ИмяФайлаАБИни);
	
	СокращенияТиповОрганизаций = Новый СписокЗначений; 
	Для н = 1 По ФайлАБ.КоличествоСтрок() Цикл
		СтрокаИзФайла = СокрЛП(ФайлАБ.ПолучитьСтроку(н));
		Если СтрокаИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		СокращенияТиповОрганизаций.Добавить(СтрокаИзФайла, СтрокаИзФайла);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПрочитатьИниФайлы()

&НаКлиенте
// Процедура запускается при первом запуске обработки
// Автоматически отображает форму "ФормаНастроек". 
//
Процедура ПервыйЗапускОбработки() Экспорт
	
	//^<< szewczuk 02.11.2016
	//Предупреждение(НСтр("ru='Необходимо настроить параметры обработки ""Обмен данными с системами Клиент-Банк""';uk='Необхідно настроїти параметри обробки ""Обмін даними із системами Клієнт-Банк""'"),
	//^,НСтр("ru='Первый запуск обработки ""Обмен данными с системами Клиент-Банк""';uk='Перший запуск обробки ""Обмін даними із системами Клієнт-Банк""'"));
	ТекстПредупреждения 	=	НСтр("ru='Необходимо настроить параметры обработки ""Обмен данными с системами Клиент-Банк""';uk='Необхідно настроїти параметри обробки ""Обмін даними із системами Клієнт-Банк""'");
	ЗаголовокПредупреждения	=	НСтр("ru='Первый запуск обработки ""Обмен данными с системами Клиент-Банк""';uk='Перший запуск обробки ""Обмін даними із системами Клієнт-Банк""'");
	ПоказатьПредупреждение(,ТекстПредупреждения,,ЗаголовокПредупреждения);
	//^>> 
	
	//^<< szewczuk 15.11.2016
	ОпределитьКонфигурацию();
	//^>> 
		
	Объект.НастройкаИмяКаталогаКБ = ПолучитьКаталогИБ();
	
	//^<< szewczuk 14.11.2016
	//^Объект.НастройкаПорядокСортировки.Добавить("Контрагент", "По контрагентам");
	//^Объект.НастройкаПорядокСортировки.Добавить("Сумма", "По сумме платежей");
	//^Объект.НастройкаПорядокСортировки.Добавить("ПриходРасход,Сумма", "По сумме платежей прихода, сумме платежей расхода");
	//^Объект.НастройкаПорядокСортировки.Добавить("Статус", "По статусу строки выписки");
	Объект.НастройкаПорядокСортировки.Добавить("Контрагент", 			НСтр("ru='По контрагентам';uk='По контрагентах'"));
	Объект.НастройкаПорядокСортировки.Добавить("Сумма", 				НСтр("ru='По сумме платежей';uk='По сумі платежів'"));
	Объект.НастройкаПорядокСортировки.Добавить("ПриходРасход,Сумма", 	НСтр("ru='По сумме платежей прихода, сумме платежей расхода';uk='По сумі платежів приходу, сумме платежів розходу'"));
	Объект.НастройкаПорядокСортировки.Добавить("Статус", 				НСтр("ru='По статусу строки выписки';uk='По статусу строки выписки'"));
	//^>> 
	
	
	Объект.НастройкаАвтоСозданиеКонтрагента = Истина;
	Объект.НастройкаИспользоватьСортировку 	= Истина;
	
	Объект.НастройкаФормироватьКраткоеНаименованиеОрганизации = Истина;
	
	Объект.НастройкаСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	
	//^<< szewczuk 14.11.2016
	Если Объект.Конфигурация = "БУ" Тогда
		Объект.НастройкаВидОперацииВходящие  =	ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя");
		Объект.НастройкаВидОперацииИсходящие =  ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику");
	КонецЕсли; 
	//^>> 
	
КонецПроцедуры // ПервыйЗапускОбработки()	

&НаСервере
Функция ПолучитьМФО()
	
	//^<< szewczuk 04.11.2016
	Если Объект.БанковскийСчет <> Неопределено Тогда
		Возврат СокрЛП(Объект.БанковскийСчет.Банк.Код);
	КонецЕсли; 
	
	//^>> 
	
КонецФункции

&НаСервере
// Создаёт новый элемент справочника Контрагенты
//
// Параметры:
//
//  Реквизиты  – Структура
// Возвращает ссылку на созданный элемент справочника
//
Функция СоздатьСпрКонтрагент(Реквизиты) Экспорт
	
	спрКонтрагент = Справочники.Контрагенты;
	
	спрКонтрагентОб = спрКонтрагент.СоздатьЭлемент();
	
	спрКонтрагентОб.Наименование		= ПреобразоватьНаименованиеКонтрагента(Реквизиты.Наименование);
	
	спрКонтрагентОб.КодПоЕДРПОУ			= Реквизиты.ОКПО;
	спрКонтрагентОб.НаименованиеПолное	= Реквизиты.Наименование;
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 
		спрКонтрагентОб.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		спрКонтрагентОб.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	//^<< szewczuk 03.11.2016	
	ИначеЕсли Объект.Конфигурация = "БУ" Тогда
		спрКонтрагентОб.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли; 
	//^>> 
		
	спрКонтрагентОб.Записать();
	
	ДобавитьСчетКонтрагента(спрКонтрагентОб.Ссылка, Реквизиты.РСчет, Реквизиты.МФО);
	спрКонтрагентОб.Записать();	
	
	Возврат спрКонтрагентОб.Ссылка;
	
КонецФункции // СоздатьСпрКонтрагент()	

&НаСервере
// Добавляет новый банковский счет контрагенту
//
// Параметры:
//
//  НомерСчета  – Строка
//  Контрагент  – СправочникСсылка.Контрагенты
// Возвращает ссылку на созданный элемент справочника - СправочникСсылка.БанковскиеСчета
//
Функция ДобавитьСчетКонтрагента(Контрагент, НомерСчета, МФО) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		спрБанкСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();	
	//^<< szewczuk 03.11.2016
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
		 спрБанкСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	КонецЕсли; 
	//^>> 
	
	спрБанкСчет.Владелец 		= Контрагент;
	спрБанкСчет.Наименование 	= "По счету №"+ СокрЛП(НомерСчета);
	
	НайтиБанк = НайтиБанк(МФО);
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		БанкНеНайден = НайтиБанк = Справочники.КлассификаторБанков.ПустаяСсылка();	
	//^<< szewczuk 03.11.2016
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
		БанкНеНайден = НайтиБанк = Справочники.Банки.ПустаяСсылка();	
	КонецЕсли; 
	//^>> 
	 
	//^<< szewczuk 03.11.2016
	//^Если НайтиБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
	Если БанкНеНайден Тогда
	//^>> 
		
		спрБанкСчет.РучноеИзменениеРеквизитовБанка = Истина;
		//спрБанкСчет.НаименованиеБанка              = РССчет[0].Значение;
		спрБанкСчет.КодБанка                       = МФО;
		
	Иначе	
		
		спрБанкСчет.Банк = НайтиБанк.Ссылка;
		
	КонецЕсли;
	
	спрБанкСчет.НомерСчета 		= НомерСчета;
	спрБанкСчет.ВидСчета		= "Текущий";
	спрБанкСчет.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	
	спрБанкСчет.Записать();
	
	Возврат спрБанкСчет.Ссылка;
	
КонецФункции // ДобавитьСчетКонтрагента()	

&НаСервере
// По номеру счета для контрагента ищем банковский счет
//
// Параметры:
//
//  НомерСчета  – Строка
//  Контрагент  – СправочникСсылка.Контрагенты
//
// Возвращает ссылку на найденный элемент - СправочникСсылка.БанковскиеСчета
Функция НайтиСчетКонтрагента(НомерСчета, Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Или НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";	
	//^<< szewczuk 03.11.2016
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";	
	КонецЕсли; 
	//^>> 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерСчета",	НомерСчета);
	Запрос.УстановитьПараметр("Владелец",	Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		//^<< szewczuk 03.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
		//^>> 	
			Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();	
		//^<< szewczuk 03.11.2016
		ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
		КонецЕсли; 
		//^>> 
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
КонецФункции // НайтиСчетКонтрагента()	

Функция НайтиБанк(МФО)
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		НайденныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка();
		Если НЕ ПустаяСтрока(МФО) Тогда
			НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоКоду(МФО);
		КонецЕсли;
	//^<< szewczuk 03.11.2016
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда

		НайденныйБанк = Справочники.Банки.ПустаяСсылка();
		
		//^ Перенес из КлиентБанк.epf
		Если ПустаяСтрока(МФО) Тогда
			Сообщить(Нстр("ru = 'Ошибка создания банка: Не указан МФО!'; uk = 'Помилка створення банку: Не зазначений МФО!'"));
			Возврат НайденныйБанк;
		КонецЕсли;	
	
		МФО = СокрЛП(МФО);
	
		// ищем по МФО
		НайтиБанк = Справочники.Банки.НайтиПоКоду(МФО, Истина);
		
		Если ЗначениеЗаполнено(НайтиБанк) Тогда
			Возврат НайтиБанк;
		КонецЕсли;	
		
		КлассификаторБанков = Справочники.Банки.ПолучитьМакет("КлассификаторБанков");
		
		// Области классификатора
		ОбластьКодМФО         	= КлассификаторБанков.Области.КодМФО;
		ОбластьНаименование 	= КлассификаторБанков.Области.Наименование;
		ОбластьГород  			= КлассификаторБанков.Области.Город;
		ОбластьАдрес  			= КлассификаторБанков.Области.Адрес;
		ОбластьЕДРПОУ  			= КлассификаторБанков.Области.ЕДРПОУ;
		ОбластьТелефоны			= КлассификаторБанков.Области.Телефоны;
		ОбластьКоррСчет			= КлассификаторБанков.Области.КоррСчет;
		
		ИскомаяСтрока = КлассификаторБанков.НайтиТекст(МФО,,ОбластьКодМФО,,Истина);
		
		Если ИскомаяСтрока = Неопределено Тогда
			Сообщить(Нстр("ru = 'Ошибка создания банка: В классификаторе банков нет элемента с МФО = '; uk = 'Помилка створення банку: У класифікаторі банків немає елемента із МФО = '") + МФО);
			//^<< szewczuk 03.11.2016
			//^Возврат Неопределено;
			Возврат Справочники.Банки.ПустаяСсылка();
			//^>> 
		Иначе	
			НомерСтроки = ИскомаяСтрока.Верх;
		КонецЕсли;	
		
		// для найденной строки из классификатора определим все реквизиты банка
		КодМФО         	= КлассификаторБанков.Область(НомерСтроки, ОбластьКодМФО.Лево, 			НомерСтроки, ОбластьКодМФО.Право).Текст;
		Наименование 	= КлассификаторБанков.Область(НомерСтроки, ОбластьНаименование.Лево, 	НомерСтроки, ОбластьНаименование.Право).Текст;
		Город  			= КлассификаторБанков.Область(НомерСтроки, ОбластьГород.Лево, 			НомерСтроки, ОбластьГород.Право).Текст;
		Адрес  			= КлассификаторБанков.Область(НомерСтроки, ОбластьАдрес.Лево, 			НомерСтроки, ОбластьАдрес.Право).Текст;
		ЕДРПОУ  		= КлассификаторБанков.Область(НомерСтроки, ОбластьЕДРПОУ.Лево, 			НомерСтроки, ОбластьЕДРПОУ.Право).Текст;
		Телефоны		= КлассификаторБанков.Область(НомерСтроки, ОбластьТелефоны.Лево, 		НомерСтроки, ОбластьТелефоны.Право).Текст;
		КоррСчет		= КлассификаторБанков.Область(НомерСтроки, ОбластьКоррСчет.Лево, 		НомерСтроки, ОбластьКоррСчет.Право).Текст;
		
		НовыйЭлемент = Справочники.Банки.СоздатьЭлемент();

		НовыйЭлемент.Код 			= КодМФО;
		НовыйЭлемент.Наименование 	= Наименование;
		НовыйЭлемент.Город 			= Город;
		НовыйЭлемент.Адрес 			= Адрес;
		НовыйЭлемент.КодПоЕДРПОУ 	= ЕДРПОУ;
		НовыйЭлемент.Телефоны 		= Телефоны;
		НовыйЭлемент.КоррСчет 		= КоррСчет;

		НовыйЭлемент.Записать();
		
		Сообщить(НСтр("ru = 'Создан банк с МФО = '; uk = 'Створений банк із МФО = '") + КодМФО);
		
		//^<< szewczuk 03.11.2016
		//^Возврат НовыйЭлемент.Ссылка;
		НайденныйБанк = НовыйЭлемент.Ссылка;
		//^>> 
	КонецЕсли; 
	//^>> 
	
	Возврат НайденныйБанк;

КонецФункции

//^<< szewczuk 09.11.2016
&НаСервере
Функция клОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено)
	
	Если Объект.Конфигурация = "БУ" Тогда
		СПоставщиком = Новый СписокЗначений;
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

		СПокупателем = Новый СписокЗначений;
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

		Прочее = Новый СписокЗначений;
		Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

		Если ЗначениеЗаполнено(ВидОперации) тогда

			//Определение вида операции

			ВидДоговораПоВидуОпераций = Новый Соответствие();
			//^<< szewczuk 09.11.2016
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
			//^
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			//^
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			//^
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
			//^ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			//^>> 

			ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];

			Если НЕ ВидДоговора = Неопределено Тогда
				Возврат ВидДоговора;
			Иначе
				Возврат Новый СписокЗначений;

			КонецЕсли;

			Иначе

				Возврат Новый СписокЗначений;

			Конецесли;
			
		КонецЕсли;
	
КонецФункции // клОпределитьВидДоговораСКонтрагентом()
//^>>

&НаСервере
// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
//^<< szewczuk 09.11.2016
Функция НайтиДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, КодВалюты="")
	
	//^<< szewczuk 15.11.2016
	Если Объект.Конфигурация = "БУ" Тогда
	//^>> 

		НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
		|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
		|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
		|ГДЕ
		|	&ТекстФильтра
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
		Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
		Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
		
		Если НЕ ЗначениеЗаполнено(КодВалюты) Тогда
			ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе
			ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);
			Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;	
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		
		ТекстФильтра = "
		|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
		|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов"
		+?(СписокВидовДоговора<>неопределено,"
		|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
		
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		Иначе
			Возврат НСтр("ru='Не найден';uk='Не знайдений'")
		КонецЕсли;
		
	//^<< szewczuk 14.11.2016
	КонецЕсли;
	//^>>
	
КонецФункции // ПолучитьДоговорКонтрагента()
//^>> 

//^<< szewczuk 11.11.2016
// Возвращает курс валюты на дату
//
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
&НаСервере
Функция клКурсДляВалюты(Валюта, ДатаКурса) Экспорт

	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции
//^>> 

&НаСервере
// Функция заменяет определённые символы в переданной строке 
//
// Параметры: 
// 		Стр - Строка - переданная строка для замены 
//
//
// Возвращаемое значение:
//
//   Строка - преобразованное значение
//
// 
Функция ЗаменитьСимволы(Стр) Экспорт
	СтрВозврата = Стр;
	СтрВозврата = СтрЗаменить(СтрВозврата, "Ї", "Є");
	СтрВозврата = СтрЗаменить(СтрВозврата, "ї", "є");
	СтрВозврата = СтрЗаменить(СтрВозврата, "Ў", "І");
	СтрВозврата = СтрЗаменить(СтрВозврата, "ў", "і");
	СтрВозврата = СтрЗаменить(СтрВозврата, "•", "ї");
	СтрВозврата = СтрЗаменить(СтрВозврата, "°", "Ї");
	Возврат СтрВозврата;
КонецФункции

&НаСервере
// Функция заменяет определённые символы в переданной строке 
// в порядке, обратном функции ЗаменитьСимволы
// 
// Параметры: 
// 		Стр - Строка - переданная строка для замены 
//
//
// Возвращаемое значение:
//
//   Строка - преобразованное значение
//
// 
Функция ЗаменитьСимволыНазад(Стр) Экспорт
    Рез = СтрЗаменить(Стр,"Ї","Є");
    Рез = СтрЗаменить(Рез,"ї","є");
    Рез = СтрЗаменить(Рез,"Ў","І");
    Рез = СтрЗаменить(Рез,"ў","і");
    Рез = СтрЗаменить(Рез,"°","Ї");
    Рез = СтрЗаменить(Рез,"•","ї");
    Рез = СтрЗаменить(Рез, Символы.ПС, " ");
	Возврат Рез;
КонецФункции

// Убирает в коротком названии контрагента символы "
// перебирает в СокращенияТиповОрганизаций все сокращения и если сокращение подошло
// перемещает сокращение в конец краткого названия отделяя запятой
// Сокращение "подходит", если 
//
// - строка сокращения начинается с первой позиции в строке 
// - сразу после сокращения идет пробел или "
// 
// 
// Пример преобразования: ООО "Добро" -> Добро, ООО 
//
// Параметры:
//
//  НаименованиеКонтрагента  – Строка - преобразовываемое краткое название контрагента
//
// Возвращаемое значение:
//
//   Строка    – преобразованое краткое название контрагента
// 
Функция ПреобразоватьНаименованиеКонтрагента(НаименованиеКонтрагента)
	//НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	Рез = НаименованиеКонтрагента;
	Для Каждого СокращениеЭлемент Из СокращенияТиповОрганизаций Цикл
		Сокращение = СокращениеЭлемент.Значение;
		// проверяем на 1-ую позицию
		Если Найти(Врег(НаименованиеКонтрагента), Врег(Сокращение)) = 1 Тогда
			Поз = СтрДлина(Сокращение) + 1;
			ПроверяемСимвол = Сред(НаименованиеКонтрагента, Поз, 1);
			Если (ПроверяемСимвол = " ") ИЛИ (ПроверяемСимвол = """") Тогда
				// нашли
				Рез = СокрЛП(Сред(НаименованиеКонтрагента, Поз+1));
				Рез = Рез + ", " + Сокращение;
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	// теперь уберем "
	Рез = СтрЗаменить(Рез, """", "");
	Возврат Рез;
КонецФункции // ПреобразоватьНаименованиеКонтрагента()

&НаСервере
// Возвращает для определённого вида документа вид операции
//
Функция ОпределитьВидОперации(ВидДокумента) Экспорт
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
		ДокументПоступление = "ПоступлениеБезналичныхДенежныхСредств";
		ДокументСписание	= "СписаниеБезналичныхДенежныхСредств";
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
		ДокументПоступление = "ПоступлениеНаРасчетныйСчет";
		ДокументСписание	= "СписаниеСРасчетногоСчета";
	КонецЕсли; 
	//^>> 
	
	//^<< szewczuk 03.11.2016
	//^Если ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
	Если ВидДокумента = ДокументПоступление Тогда
	//^>> 
		Возврат Объект.НастройкаВидОперацииВходящие;
	//^<< szewczuk 03.11.2016
	//^ИначеЕсли ВидДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда	
	ИначеЕсли ВидДокумента = ДокументСписание Тогда	
	//^>> 
		Возврат Объект.НастройкаВидОперацииИсходящие;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции // ОпределитьВидОперации()	

&НаКлиенте
Процедура ВыбратьФайлДанных(Элемент, Заголовок, Фильтр = "");
	
	Если Фильтр = "" Тогда
		Фильтр = НСтр("ru='Текстовый файл (*.txt)|*.*|Файлы dBase (*.dbf)|*.dbf|XML файл (*.xml)|*.xml|Все файлы (*.*)|*.*'");
	КонецЕсли;	
	
	Если Элемент.Имя = "ИмяФайлаЭкспорт" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Иначе	
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	КонецЕсли;
	
	ДиалогВыбораФайла.Фильтр                      = Фильтр;
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если Элемент.Имя = "ИмяФайлаЭкспорт" Тогда
			Объект.ИмяФайлаЭкспорт = ДиалогВыбораФайла.ПолноеИмяФайла;
		ИначеЕсли Элемент.Имя = "ИмяФайлаИмпорт" Тогда
			Объект.ИмяФайлаИмпорт = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Заголовок);
	
	ФайлНаДиске = Новый Файл(Элемент.ТекстРедактирования);
	
	Если НЕ ФайлНаДиске.Существует() Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не найден файл!'"));
		ТекстПредупреждения = НСтр("ru='Не найден файл!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат;
	КонецЕсли;
	
	Если (Элемент.Имя = "ИмяФайлаЭкспорт" И Объект.ТипФайлаЭкспорт = "DBF") ИЛИ (Элемент.Имя = "ИмяФайлаИмпорт" И Объект.ТипФайлаИмпорт = "DBF") Тогда
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	Иначе
		
		Текст = Новый ТекстовыйДокумент();
		Если Объект.КодировкаФайлаИмпорт = "DOS" Тогда
			Кодир = КодировкаТекста.OEM;
		Иначе
			Кодир = КодировкаТекста.ANSI;
		КонецЕсли;
		
		Текст.Прочитать(Элемент.ТекстРедактирования, Кодир);
		Текст.Показать(Заголовок, Элемент.ТекстРедактирования);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработку(АдресВременногоХранилища, Подключать = Ложь)
	
	//Возврат ВнешниеОбработки.Создать(Объект.ФорматОбмена, Ложь);
	
	Если РежимОтладки Тогда
		Возврат ВнешниеОбработки.Создать(АдресВременногоХранилища, Ложь); // для файлового варианта и тестирования
	КонецЕсли;	
	
	Если Подключать Тогда
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВременногоХранилища, Объект.ФорматОбмена, Ложь);
	КонецЕсли;	
	
	//// Проверка корректности переданных параметров
	//Если ИмяОбработки = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Возврат ВнешниеОбработки.Создать(Объект.ФорматОбмена, Ложь);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкуЗаполнения(ИмяНастройки, ВидДокумента) Экспорт
	
	//^<< szewczuk 03.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		Если ИмяНастройки = "ВидОперации" Тогда
			Если ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
				Возврат Объект.НастройкаВидОперацииВходящие;
			ИначеЕсли ВидДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда	
				Возврат Объект.НастройкаВидОперацииИсходящие;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "СтатьяДДС" Тогда
			Если ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
				Возврат Объект.НастройкаСтатьяДДСВходящие;
			ИначеЕсли ВидДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда	
				Возврат Объект.НастройкаСтатьяДДСИсходящие;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "Подразделение" Тогда
			Если ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
				Возврат Объект.НастройкаПодразделениеВходящие;
			ИначеЕсли ВидДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда	
				Возврат Объект.НастройкаПодразделениеИсходящие;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "СтатьяДоходовИлиРасходов" Тогда
			Если ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
				Возврат Объект.НастройкаСтатьяДоходов;
			ИначеЕсли ВидДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда	
				Возврат Объект.НастройкаСтатьяРасходов;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "ТипДокумента" Тогда
			Возврат Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
		ИначеЕсли ИмяНастройки = "СтавкаНДС" Тогда
			Возврат Объект.НастройкаСтавкаНДС;
		КонецЕсли;	
	//^<< szewczuk 03.11.2016
	ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
		Если ИмяНастройки = "ВидОперации" Тогда
			Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
				Возврат Объект.НастройкаВидОперацииВходящие;
			ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" Тогда	
				Возврат Объект.НастройкаВидОперацииИсходящие;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "СтатьяДДС" Тогда
			Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
				Возврат Объект.НастройкаСтатьяДДСВходящие;
			ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" Тогда	
				Возврат Объект.НастройкаСтатьяДДСИсходящие;
			КонецЕсли;	
		ИначеЕсли ИмяНастройки = "СтатьяДоходовИлиРасходов" Тогда
			Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
				Возврат Объект.НастройкаСтатьяДоходов;
			ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" Тогда	
				Возврат Объект.НастройкаСтатьяРасходов;
			КонецЕсли;
		ИначеЕсли ИмяНастройки = "СтавкаНДС" Тогда
			Возврат Объект.НастройкаСтавкаНДС;
		КонецЕсли;
	КонецЕсли; 
	//^>> 
		
	Возврат Неопределено;
	
КонецФункции // ОпределитьВидОперации()

&НаСервере
// Ищет контрагента по ОКПО и наименованию
//
// Параметры:
//
//  ОКПО  – Строка – код по ЕДРПОУ или ДРФО
//  Наименование  – Строка – имя контрагента
//
//  Возвращает: Контрагент с данным ОКПО, либо наименованием
//
Функция НайтиПоОКПО(ОКПО, Наименование) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапросаОКПО = "";
	
	// Если ОКПО пусто, не ищем по нему, только по Наименованию юр лица.
	
	Если Не ПустаяСтрока(ОКПО) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И (Контрагенты.КодПоЕДРПОУ В (&ОКПО))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.КодПоЕДРПОУ = &ПустойОКПО
		|	И (Контрагенты.Наименование = &Имя
		|			ИЛИ Контрагенты.Наименование = &ИмяПреобразованное
		|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Имя)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		МассивОКПО = Новый Массив;
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧГ=0")); //ОКПО
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧЦ=8;ЧВН=;ЧГ=0")); //ОКПО8
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧЦ=12;ЧВН=;ЧГ=0")); //ОКПО12
		
		Запрос.УстановитьПараметр("ОКПО", МассивОКПО);
		Запрос.УстановитьПараметр("ПустойОКПО", "");
		
	Иначе	
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И (Контрагенты.Наименование = &Имя
		|			ИЛИ Контрагенты.Наименование = &ИмяПреобразованное
		|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Имя)
		|";		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Имя", Наименование);
	Запрос.УстановитьПараметр("ИмяПреобразованное", ПреобразоватьНаименованиеКонтрагента(Наименование));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции // НайтиПоОКПО()	

&НаСервере
// Позволяет определить есть ли среди реквизитов документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция клЕстьРеквизит(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // клЕстьРеквизит()

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовОпераций(ИмяДокумента, ПолеФормы)
	
	СписокВыбора = ПолеФормы.СписокВыбора;
	СписокВыбора.Очистить();
		
	//^<< szewczuk 31.10.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		Если Найти(ИмяДокумента, "Поступление") > 0 Тогда
	
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		
		Иначе
		
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеРасходы"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		
		КонецЕсли;
	//^<< szewczuk 31.10.2016
	ИначеЕсли Объект.Конфигурация = "БУ" Тогда 
		
		Если Найти(ИмяДокумента, "Поступление") > 0 Тогда
	
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС"));
		
		Иначе
		
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПокупкаПродажаВалюты"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств"));
					
		КонецЕсли;

		
	КонецЕсли; 
	//^>>

		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовДокумента(СуммаПриход, СуммаРасход, ПолеФормы)
	
	СписокВыбора = ПолеФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если СуммаПриход > 0 Тогда
		//^<< szewczuk 04.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
		//^>> 	
			СписокВыбора.Добавить("ПоступлениеБезналичныхДенежныхСредств");
		//^<< szewczuk 04.11.2016
		ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
			СписокВыбора.Добавить("ПоступлениеНаРасчетныйСчет");	
		КонецЕсли; 
		//^>> 
	ИначеЕсли СуммаРасход > 0 Тогда
		//^<< szewczuk 04.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
		//^>> 	
			СписокВыбора.Добавить("СписаниеБезналичныхДенежныхСредств");
		//^<< szewczuk 04.11.2016
		ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
			СписокВыбора.Добавить("СписаниеСРасчетногоСчета");	
		КонецЕсли; 
		//^>> 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьФильтрВыбораФайла(Знач ВнешняяОбработкаОбъект = Неопределено, РежимИмпорт = Истина, РежимЭкспорт = Истина)
	
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	КонецЕсли;	
	
	Если РежимИмпорт Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Режим", "Импорт"); 
		ПараметрыВызова.Вставить("ТипФайла", Объект.ТипФайлаИмпорт);
		ФильтрВыбораФайла = ВнешняяОбработкаОбъект.СформироватьФильтрВыбораФайла(ПараметрыВызова);
	КонецЕсли;	
	
	Если РежимЭкспорт Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Режим", "Экспорт"); 
		ПараметрыВызова.Вставить("ТипФайла", Объект.ТипФайлаЭкспорт);
		ФильтрВыбораФайлаЭкспорт = ВнешняяОбработкаОбъект.СформироватьФильтрВыбораФайла(ПараметрыВызова);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьИмяФайла(Знач ВнешняяОбработкаОбъект = Неопределено, РежимИмпорт = Истина, РежимЭкспорт = Истина)
	
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	КонецЕсли;	
	
	// формируем имя файлов импорт/экспорт
	Если РежимИмпорт Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Режим", "Импорт"); 
		ПараметрыВызова.Вставить("Дата", Объект.ДатаВыписки); // дата выписки, если импорт 
		ПараметрыВызова.Вставить("Организация", Объект.Организация); // организация 
		ПараметрыВызова.Вставить("РСчет", СокрЛП(Объект.БанковскийСчет.НомерСчета)); // Расчетный счет
		ПараметрыВызова.Вставить("КодВБанке", Объект.КодВБанке); // если есть 
		ПараметрыВызова.Вставить("ТипФайла", Объект.ТипФайлаИмпорт);
		//^<< szewczuk 16.11.2016
		//^Объект.ИмяФайлаИмпорт = ВнешняяОбработкаОбъект.СформироватьИмяФайла(ПараметрыВызова);
		Объект.ИмяФайлаИмпорт = ПроверитьКаталог(ВнешняяОбработкаОбъект.СформироватьИмяФайла(ПараметрыВызова));
		//^>> 
	КонецЕсли;
	
	Если РежимЭкспорт Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Режим", "Экспорт");
		ПараметрыВызова.Вставить("Дата", Объект.ДатаППС); // дата начала периода, если экспорт
		ПараметрыВызова.Вставить("Организация", Объект.Организация); // организация
		ПараметрыВызова.Вставить("РСчет", СокрЛП(Объект.БанковскийСчет.НомерСчета)); // Расчетный счет
		ПараметрыВызова.Вставить("КодВБанке", Объект.КодВБанке); // если есть 
		ПараметрыВызова.Вставить("ТипФайла", Объект.ТипФайлаЭкспорт);
		//^<< szewczuk 16.11.2016
		//^Объект.ИмяФайлаЭкспорт = ВнешняяОбработкаОбъект.СформироватьИмяФайла(ПараметрыВызова);
		Объект.ИмяФайлаЭкспорт = ПроверитьКаталог(ВнешняяОбработкаОбъект.СформироватьИмяФайла(ПараметрыВызова)); 
		//^>> 
				
	КонецЕсли;	
	
КонецПроцедуры

//^<< szewczuk 16.11.2016
&НаСервере
Функция ПроверитьКаталог(ФайлНаДиске)
	
	ИмяФайла ="";
	
	ФайлИмпорт = Новый Файл(ФайлНаДиске);
		
	КаталогНаДиске = Новый Файл(ФайлИмпорт.Путь);
		
	Если НЕ КаталогНаДиске.Существует() Тогда
		КаталогНаДиске = Новый Файл(Объект.НастройкаИмяКаталогаКБ);
		Если КаталогНаДиске.Существует() Тогда
			ИмяФайла = Объект.НастройкаИмяКаталогаКБ+ФайлНаДиске;
		КонецЕсли;
	Иначе
		ИмяФайла = ФайлНаДиске;
	КонецЕсли; 

	Возврат ИмяФайла;	
	
КонецФункции
//^>> 
 

&НаСервере
Функция ПолучитьСтатьюДДС(ВидОперации)
	
	//^<< szewczuk 01.11.2016
	//^Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ВидОперации);	
	Если Объект.Конфигурация = "УТ" Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ВидОперации);	
	КонецЕсли; 
	//^>> 
		                                           	                                    	
КонецФункции

&НаСервере
Функция СформироватьНадписьИнфоБанковскогоСчета(Счет)
	//^<< szewczuk 02.11.2016
	//^Если Счет.Пустая() Тогда
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
	//^>> 
		Возврат "";
	Иначе
		Возврат НСтр("ru='№ счета: ';uk='№ рахунку: '") + СокрЛП(Строка(Счет.НомерСчета)) + ", Банк: " + Строка(Счет.Банк) + ", МФО: " + Строка(Счет.Банк.Код);
	КонецЕсли;
	
КонецФункции // ЭкспортПлатежныхПоручений()

&НаКлиенте
// В зависимости от параметров обработки проводит автоматический импорт платежей 
// или автоматическое заполнение таблицы экспорта
// 
// Параметры: нет
//
//
Процедура АвтоИмпортЭкспорт()
	// если автоимпорт - делаем его 
	
	Если Объект.НастройкаАвтоИмпортВыписок Тогда
		
		Отказ = Ложь;
		ИмпортВыпискиКлиент(Отказ);
		
		Если НЕ Отказ Тогда	
			ИмпортВыпискиСервер(АдресХранилищаОбработкиФормата, АдресХранилищаФайла);
		КонецЕсли;	
		
	КонецЕсли; 
	
	// если автозаполнение экспорта - заполним таблицу экспорта
	
	Если Объект.НастройкаАвтоЗаполнениеТаблицыЭкспорта Тогда
		ПрочитатьСуществующиеПП();
	КонецЕсли;
	
КонецПроцедуры // АвтоИмпортЭкспорт()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ПриИзмененииБанковскогоСчета();
КонецПроцедуры

&НаКлиенте
// Процедура выполняет действия при изменении банковского счета
// 
Процедура ПриИзмененииБанковскогоСчета()
	
	// очистим таблицы 
	Объект.тчИмпорт.Очистить();
	Объект.тчЭкспорт.Очистить();
	
	// загрузим старые платежи и платежки
	ПрочитатьСуществующиеПлатежи();
	ПрочитатьСуществующиеПП();
	
	//Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
	//	НадписьБанк = "";
	//	ФорматОбмена = Неопределено;
	//	ИмяФайлаИмпорт = "";
	//	ТипФайлаИмпорт = Неопределено;
	//Иначе
	//	// перерисуем информационную надпись
	//	НадписьБанк = НСтр("ru='№ счета: ';uk='№ рахунку: '") + СокрЛП(Строка(Счет.НомерСчета)) + ", Банк: " + Строка(Счет.Банк) + ", МФО: " + Строка(Счет.Банк.Код);
		// прочитаем формат обмена
		Если ЗначениеЗаполнено(сооМФОФормат) Тогда
			ФорматОбменаСтрока = сооМФОФормат.НайтиПоЗначению(ПолучитьМФО());
			Объект.ФорматОбмена = ?(ФорматОбменаСтрока = Неопределено, "", ФорматОбменаСтрока.Представление);
			ФорматОбменаПриИзмененииКлиент();
			ФорматОбменаПриИзмененииСервер();
		КонецЕсли;	
	//КонецЕсли;
	
	ИнфоБанковскогоСчета = СформироватьНадписьИнфоБанковскогоСчета(Объект.БанковскийСчет);
	
КонецПроцедуры // ПриИзмененииБанковскогоСчета()	

&НаКлиенте
Процедура ФорматОбменаПриИзменении(Элемент)
	
	ФорматОбменаПриИзмененииКлиент();
	ФорматОбменаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматОбменаПриИзмененииКлиент()
	
	ТекущийФайлФорматаОбменаСуществует = Истина;
	
	ИмяФайлаОбработкиФорматаСписка = сооФорматИмяФайлаОбработкиФормата.НайтиПоЗначению(Объект.ФорматОбмена);
	
	Если ИмяФайлаОбработкиФорматаСписка <> Неопределено Тогда
		ИмяФайлаОбработкиФормата = ИмяФайлаОбработкиФорматаСписка.Представление;
	Иначе
		ТекущийФайлФорматаОбменаСуществует = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если СуществуетФайл(ИмяФайлаОбработкиФормата) Тогда
		
		Если НЕ РежимОтладки Тогда
			АдресХранилищаОбработкиФормата = "";
			#Если ВебКлиент Тогда
			//^<< szewczuk 03.11.2016
			//^Предупреждение("Выберите файл " + ИмяФайлаОбработкиФормата);	
			ТекстПредупреждения = "Выберите файл " + ИмяФайлаОбработкиФормата;	
			ПоказатьПредупреждение(,ТекстПредупреждения,,); 
			//^>> 
			Результат = ПоместитьФайл(АдресХранилищаОбработкиФормата, ИмяФайлаОбработкиФормата, , Истина);
			//АдресХранилищаОбработкиФормата = ПоместитьВоВременноеХранилище(ИмяФайлаОбработкиФормата);
			#Иначе
			Результат = ПоместитьФайл(АдресХранилищаОбработкиФормата, ИмяФайлаОбработкиФормата, , Ложь);
			#КонецЕсли
		
		Иначе
			АдресХранилищаОбработкиФормата = ИмяФайлаОбработкиФормата; // для файлового варианта и тестирования  
		КонецЕсли;	
		
	Иначе
		ТекущийФайлФорматаОбменаСуществует = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФорматОбменаПриИзмененииСервер()

	Если ТекущийФайлФорматаОбменаСуществует = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата, Истина);
	
	// запрос к обработке формата на поддерживаемые форматы обмена
	ПоддерживаемыеФорматы = ВнешняяОбработкаОбъект.ПолучитьПоддерживаемыеРежимы();
	
	Если ПоддерживаемыеФорматы.Импорт Тогда 
		Элементы.ТипФайлаИмпорт.СписокВыбора.Очистить();
		
		ВсегоТипов = 0;
		Если ПоддерживаемыеФорматы.ИмпортTXT Тогда
			Элементы.ТипФайлаИмпорт.СписокВыбора.Добавить("TXT", "Текстовые файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ИмпортDBF Тогда
			Элементы.ТипФайлаИмпорт.СписокВыбора.Добавить("DBF", "DBF файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ИмпортXML Тогда
			Элементы.ТипФайлаИмпорт.СписокВыбора.Добавить("XML", "XML файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Режим", "Импорт");
		ПараметрыВызова.Вставить("Организация", Объект.Организация);
		
		ТекущийТипФайлаИмпорта = ВнешняяОбработкаОбъект.ПолучитьТекущийТипФайла(ПараметрыВызова);
		
		Объект.ТипФайлаИмпорт = ТекущийТипФайлаИмпорта;
		
		// запрос к обработке формата на текущий тип файла импорта
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Режим", "Импорт");
		ПараметрыВызова.Вставить("Организация", Объект.Организация);
		ТекущаяКодировкаФайлаИмпорта = ВнешняяОбработкаОбъект.ПолучитьТекущуюКодировкуФайла(ПараметрыВызова);
		
		Объект.КодировкаФайлаИмпорт = ТекущаяКодировкаФайлаИмпорта;
		
	КонецЕсли;	
	
	Если ПоддерживаемыеФорматы.Экспорт Тогда 
		
		Элементы.СтраницаЭкспорт.Видимость = Истина;
		
		Элементы.ТипФайлаЭкспорт.СписокВыбора.Очистить();
		
		ВсегоТипов = 0;
		Если ПоддерживаемыеФорматы.ЭкспортTXT Тогда
			Элементы.ТипФайлаЭкспорт.СписокВыбора.Добавить("TXT", "Текстовые файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ЭкспортDBF Тогда
			Элементы.ТипФайлаЭкспорт.СписокВыбора.Добавить("DBF", "DBF файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ЭкспортXML Тогда
			Элементы.ТипФайлаЭкспорт.СписокВыбора.Добавить("XML", "XML файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Режим", "Экспорт");
		ПараметрыВызова.Вставить("Организация", Объект.Организация);
		
		ТекущийТипФайлаЭкспорта = ВнешняяОбработкаОбъект.ПолучитьТекущийТипФайла(ПараметрыВызова);
		
		Объект.ТипФайлаЭкспорт = ТекущийТипФайлаЭкспорта;
		
		// запрос к обработке формата на текущий тип файла экспорта
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Режим", "Экспорт");
		ПараметрыВызова.Вставить("Организация", Объект.Организация);
		ТекущаяКодировкаФайлаЭкспорта = ВнешняяОбработкаОбъект.ПолучитьТекущуюКодировкуФайла(ПараметрыВызова);
		
		Объект.КодировкаФайлаЭкспорт = ТекущаяКодировкаФайлаЭкспорта;
		
	Иначе
		Элементы.СтраницаЭкспорт.Видимость = Ложь;
	КонецЕсли;	
	
	// запрос к обработке на код в банке 
	ЕстьКодВБанке = ВнешняяОбработкаОбъект.ЕстьКодВБанке();
	Элементы.КодВБанкеИмпорт.Видимость = ЕстьКодВБанке;
	Элементы.КодВБанкеЭкпорт.Видимость = ЕстьКодВБанке;
	
	Если ЕстьКодВБанке Тогда
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Режим", "Импорт");
		ПараметрыВызова.Вставить("Организация", Объект.Организация);
		Объект.КодВБанке = ВнешняяОбработкаОбъект.кбПолучитьКодОрганизации(ПараметрыВызова); 
		
		Если НЕ ЗначениеЗаполнено(Объект.КодВБанке) Тогда
			ПараметрыВызова = Новый Структура();
			ПараметрыВызова.Вставить("Режим", "Экспорт");
			ПараметрыВызова.Вставить("Организация", Объект.Организация);
			Объект.КодВБанке = ВнешняяОбработкаОбъект.кбПолучитьКодОрганизации(ПараметрыВызова); 
		КонецЕсли;	
		
	КонецЕсли;	
	
	СформироватьФильтрВыбораФайла(ВнешняяОбработкаОбъект);
	СформироватьИмяФайла(ВнешняяОбработкаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ", Объект);
	
	Настройки = Неопределено;

	ОткрытьФорму(МетаПуть + ".Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтаФорма, Новый Структура("ПараметрыФормы", ПараметрыФормы)));	
	
КонецПроцедуры

//^<< szewczuk 01.11.2016
&НаКлиенте
Процедура ОткрытьНастройкиПервыйЗапускЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	
	Настройки = Результат;
	
		Если Настройки <> Неопределено Тогда
			ВосстановитьЗначениеНастроек(Настройки);
		Иначе
			// пользователь не захотел при первом запуске сделать настройки 
			// ничего не выдаем, возможно что обработки по умолчанию его и устроили
		КонецЕсли;	

КонецПроцедуры
//^>>

//^<< szewczuk 01.11.2016
&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	Настройки = Результат;
	
	Если Настройки <> Неопределено Тогда
		ВосстановитьЗначениеНастроек(Настройки);
	КонецЕсли;
	
	//^<< szewczuk 10.11.2016
	Если НЕ ПрочитатьИниФайлы(Элементы) Тогда
		// пользователь не захотел сделать настройки, выйдем вообще из обработки
		ТекстПредупреждения = НСтр("ru='Не правильно указан каталог продукта. Обработка будет закрыта!';uk='Не правильно зазначений каталог продукту. Обробка буде закрита!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		ЭтаФорма.Закрыть();
	Иначе
		ПриИзмененииБанковскогоСчета();
		// При установленных параметрах делаем автоимпорт и/или автозаполнение таблицы экспорта
		АвтоИмпортЭкспорт();
	КонецЕсли; 
	//^>>
	
КонецПроцедуры
//^>>

&НаКлиенте
Процедура ОткрытьНастройкиФорматовОбмена(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ, сооМФОФормат", Объект, сооМФОФормат);
	Настройки = Неопределено;

	ОткрытьФорму(МетаПуть + ".Форма.ФормаНастроекФорматов", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьНастройкиФорматовОбменаЗавершение", ЭтаФорма)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиФорматовОбменаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//^<< szewczuk 01.11.2016
	//^Настройки = ОткрытьФормуМодально(МетаПуть + ".Форма.ФормаНастроекФорматов", ПараметрыФормы, ЭтаФорма);
	Настройки = Результат;
	//^>> 
	//^<< szewczuk 01.11.2016
	//^// в любом случае перечитываем файл с используемыми форматами
	СписокФорматов = ПрочитатьИспользуемыеФорматыОбмена();
	Элементы.ФорматОбмена.СписокВыбора.ЗагрузитьЗначения(СписокФорматов.ВыгрузитьЗначения());
	//^>>

КонецПроцедуры            

////////////////////////////////////////////////////////////////////////////////
// Закладка "Импорт выписки"

&НаСервере
// Проверяем, что выбраны организация, счет, дата выписки не пустая
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолей()
	
	Если Объект.ДатаВыписки = Неопределено Тогда
		Сообщить(НСтр("ru='Не указана дата выписки!';uk='Не вказана дата виписки!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		Сообщить(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолей()	

// Читает существующие документы выписок
//
// Параметры:
//
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПрочитатьСуществующиеПлатежи()
	
	// Проверить, что выбраны организация, счет, дата выписки не пустая
	Если НЕ ПроверитьЗаполнениеПолей() Тогда
		Возврат;
	КонецЕсли;	
	
	//Запрос к документам: выписки (СтрокаВыпискиПриход и СтрокаВыпискиРасход)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаВыписки));	
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаВыписки));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	
	Запрос.УстановитьПараметр("ДатаНачНеОплаченные", НачалоДня(Объект.ДатаВыписки-Объект.НастройкаКоличествоДнейДляОплатыБанка*86400));	
	//^<< szewczuk 01.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
			
		ТекстЗапроса = 
		"ВЫБРАТЬ
	       |	ПоступлениеБезналичныхДенежныхСредств.Ссылка,
	       |	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация,
		   |	ПоступлениеБезналичныхДенежныхСредств.ТипПлатежногоДокумента,
	       |	ПоступлениеБезналичныхДенежныхСредств.Контрагент,
	       |	ПоступлениеБезналичныхДенежныхСредств.СуммаДокумента,
	       |	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
		   |	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК НомерПП,
		   |	ПоступлениеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа,
	       |	ПоступлениеБезналичныхДенежныхСредств.СтатьяДвиженияДенежныхСредств,
		   |	ВЫБОР
		   |		КОГДА ДенежныеСредстваКПоступлениюБезналичныеОстатки.СуммаОстаток >= 0
		   |			ТОГДА Ложь
		   |		ИНАЧЕ Истина
		   |	КОНЕЦ КАК Оплачен,
	       |	""Приход"" КАК ПриходРасход
	       |ИЗ
	       |	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
		   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.Остатки КАК ДенежныеСредстваКПоступлениюБезналичныеОстатки
		   |	ПО ДенежныеСредстваКПоступлениюБезналичныеОстатки.Документ = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	       |ГДЕ
	       |	ПоступлениеБезналичныхДенежныхСредств.Дата МЕЖДУ &ДатаНач И &ДатаКон
	       |	И ПоступлениеБезналичныхДенежныхСредств.Организация = &Организация
	       |	И ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
	       |	И ПоступлениеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	       |	И ПоступлениеБезналичныхДенежныхСредств.Проведен = ИСТИНА
	       |
	       |ОБЪЕДИНИТЬ
	       |
	       |ВЫБРАТЬ
	       |	СписаниеБезналичныхДенежныхСредств.Ссылка,
	       |	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация,
		   |	СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента,
	       |	ВЫБОР
	       |		КОГДА СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		   |				)
	       |			ТОГДА СписаниеБезналичныхДенежныхСредств.Организация
	       |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.Контрагент
	       |	КОНЕЦ КАК Контрагент,
	       |	СписаниеБезналичныхДенежныхСредств.СуммаДокумента,
	       |	ВЫБОР
	       |		КОГДА СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		   |				)
	       |			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель
	       |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	       |	КОНЕЦ КАК БанковскийСчетКонтрагента,
		   |	ВЫБОР
		   |		КОГДА СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
		   |			ТОГДА СписаниеБезналичныхДенежныхСредств.НомерПоручения
		   |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента
		   |	КОНЕЦ КАК НомерПП,
		   |	СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа,
	       |	СписаниеБезналичныхДенежныхСредств.СтатьяДвиженияДенежныхСредств,
		   |	ВЫБОР
		   |		КОГДА ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток <= 0
		   |			ТОГДА Ложь
		   |		ИНАЧЕ Истина
		   |	КОНЕЦ КАК Оплачен,
	       |	""Расход""
	       |ИЗ
	       |	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки КАК ДенежныеСредстваКСписаниюБезналичныеОстатки
		   |	ПО ДенежныеСредстваКСписаниюБезналичныеОстатки.Документ = СписаниеБезналичныхДенежныхСредств.Ссылка
		   |//		И ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток < 0 // не оплачен
	       |ГДЕ
		   |	( ((Дата МЕЖДУ &ДатаНач И &ДатаКон) ) ИЛИ ((Дата МЕЖДУ &ДатаНачНеОплаченные И &ДатаНач) И ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток <= 0 ) )
	       |	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация
	       |	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
	       |	И СписаниеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ";
	//^<< szewczuk 04.11.2016
	ИначеЕсли Объект.Конфигурация = "БУ" Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		 |	ПоступлениеНаРасчетныйСчет.Ссылка,
		 |	ПоступлениеНаРасчетныйСчет.ВидОперации КАК ХозяйственнаяОперация,
		 |	ПоступлениеНаРасчетныйСчет.Контрагент,
		 |	ПоступлениеНаРасчетныйСчет.СуммаДокумента,
		 |	ПоступлениеНаРасчетныйСчет.СчетКонтрагента КАК БанковскийСчетКонтрагента,
		 |	ПоступлениеНаРасчетныйСчет.НомерВходящегоДокумента КАК НомерПП,
		 |	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа,
		 |	ИСТИНА КАК Оплачен,
		 |	""Приход"" КАК ПриходРасход,
		 |	ПоступлениеНаРасчетныйСчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		 |ИЗ
		 |	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		 |ГДЕ
		 |	ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &ДатаНач И &ДатаКон
		 |	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
		 |	И ПоступлениеНаРасчетныйСчет.СчетОрганизации = &БанковскийСчет
		 |	И ПоступлениеНаРасчетныйСчет.ПометкаУдаления = ЛОЖЬ
		 |	И ПоступлениеНаРасчетныйСчет.Проведен = ИСТИНА
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	СписаниеСРасчетногоСчета.Ссылка,
		 |	СписаниеСРасчетногоСчета.ВидОперации,
		 |	СписаниеСРасчетногоСчета.Контрагент,
		 |	СписаниеСРасчетногоСчета.СуммаДокумента,
		 |	СписаниеСРасчетногоСчета.СчетКонтрагента,
		 |	СписаниеСРасчетногоСчета.НомерВходящегоДокумента,
		 |	СписаниеСРасчетногоСчета.НазначениеПлатежа,
		 |	ИСТИНА,
		 |	""Расход"",
		 |	СписаниеСРасчетногоСчета.СтатьяДвиженияДенежныхСредств
		 |ИЗ
		 |	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		 |ГДЕ
		 |	СписаниеСРасчетногоСчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
		 |	И СписаниеСРасчетногоСчета.Организация = &Организация
		 |	И СписаниеСРасчетногоСчета.СчетОрганизации = &БанковскийСчет
		 |	И СписаниеСРасчетногоСчета.ПометкаУдаления = ЛОЖЬ
		 |	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА";
	//^>> 
	КонецЕсли;

    Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.тчИмпорт.Добавить();
		
		НоваяСтрока.Контрагент 		= Выборка.Контрагент;
		НоваяСтрока.НомерПП 		= Выборка.НомерПП;
		
		НоваяСтрока.Приход      	= ?(Выборка.ПриходРасход = "Приход", Выборка.СуммаДокумента, 0);
		НоваяСтрока.Расход          = ?(Выборка.ПриходРасход = "Расход", Выборка.СуммаДокумента, 0);
		
		НоваяСтрока.СчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
		
		НоваяСтрока.Содержание      = Выборка.НазначениеПлатежа;
		
		Документ = Выборка.Ссылка;
		НоваяСтрока.Документ		= Документ;
		НоваяСтрока.ВидОперации		= Выборка.ХозяйственнаяОперация;
		//^<< szewczuk 04.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
		//^>> 	
			НоваяСтрока.ТипДокумента	= Выборка.ТипПлатежногоДокумента;
		//^<< szewczuk 04.11.2016
		КонецЕсли; 
		//^>> 
		 
		НоваяСтрока.СтатьяДДС		= Выборка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.ВидДокумента	= Выборка.Ссылка.Метаданные().Имя;
		
		Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		
			//^<< szewczuk 04.11.2016
			Если Объект.Конфигурация = "УТ" Тогда
			//^>> 	
				Если Выборка.ПриходРасход = "Приход" Тогда
					НоваяСтрока.СтатьяДоходовИлиРасходов = Документ.РасшифровкаПлатежа[0].СтатьяДоходов;
				ИначеЕсли Выборка.ПриходРасход = "Расход" Тогда
					НоваяСтрока.СтатьяДоходовИлиРасходов = Документ.РасшифровкаПлатежа[0].СтатьяРасходов;
				КонецЕсли;
				НоваяСтрока.Подразделение   = Документ.РасшифровкаПлатежа[0].Подразделение;	
			//^<< szewczuk 04.11.2016	
			КонецЕсли; 
			//^>>
			
			//^<< szewczuk 10.11.2016
			Если  Объект.Конфигурация = "БУ" Тогда
				НоваяСтрока.Договор = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;	
			КонецЕсли; 
			//^>> 
			 
			НоваяСтрока.Статус 	= СтатусыСтрокИмпорта.СуществующийПлатеж;
		
			НоваяСтрока.Оплачен	= Выборка.Оплачен;
		
			НоваяСтрока.Флаг 	= Истина;
	
		КонецЕсли;
	КонецЦикла;
  СортировкаТчИмпорт();
	
КонецПроцедуры // ПрочитатьСуществующиеПлатежи()

&НаКлиенте
Процедура ИмпортВыпискиКлиент(Отказ = Ложь)
	
	// Очищаем с таблицы все, кроме существующих платежей
	// проверим, что таблица не пустая и не все уже существующие - тогда и лишнего вопроса
	// задавать не надо
	
	Рез = 0;
	Для Каждого Строка Из Объект.тчИмпорт Цикл
		Если Строка.Статус <> СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
			Рез = 1;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Рез = 1 Тогда
		
		//^<< szewczuk 02.11.2016
		//^Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		//^	Отказ = Истина;
		//^	Возврат;
		//^КонецЕсли;
		ТекстВопроса = НСтр("ru='Будут удалены все платежи, кроме существующих. Продолжить?';uk='Будуть вилучені всі платежі, крім існуючих. Продовжити?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ИмпортВыпискиКлиентЗавершение", ЭтаФорма),ТекстВопроса,РежимДиалогаВопрос.ДаНет,,);
		ОчиститьНесуществующиеПлатежи();
		//^>>
	КонецЕсли;
	
	// 1. Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
	// дата, организация, расчетный счет, формат обмена, тип файла
	Если НЕ ПроверитьЗаполнениеПолейДляИмпорта() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	АдресХранилищаФайла = "";
	
	#Если ВебКлиент Тогда
	//^<< szewczuk 02.11.2016
	//^Предупреждение("Выберите файл " + Объект.ИмяФайлаИмпорт);
	ТекстПредупреждения = "Выберите файл " + Объект.ИмяФайлаИмпорт;	
	ПоказатьПредупреждение(,ТекстПредупреждения,,);
	//^>> 
		
	Результат = ПоместитьФайл(АдресХранилищаФайла, Объект.ИмяФайлаИмпорт, , Истина);
	#Иначе
	Результат = ПоместитьФайл(АдресХранилищаФайла, Объект.ИмяФайлаИмпорт, , Ложь);
	#КонецЕсли

КонецПроцедуры

//^<< szewczuk 02.11.2016
&НаКлиенте
Процедура ИмпортВыпискиКлиентЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
КонецПроцедуры
//^>> 

&НаСервере
Функция ИмпортВыпискиСервер(АдресХранилища, АдресХранилищаФайла)
	
	Если НЕ ТекущийФайлФорматаОбменаСуществует Тогда
		Сообщить("Файл формата " + Объект.ФорматОбмена + " не найден");
		Возврат Неопределено;
	КонецЕсли;	
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилища);
	
	// 1.1 Сохраняем значения для выбранного формата
	// Вызываем функцию СохранитьЗначения для формата
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Режим", 				"Импорт");
	ПараметрыВызова.Вставить("Организация", 		Объект.Организация);
	ПараметрыВызова.Вставить("ТекущееИмяФайла", 	Объект.ИмяФайлаИмпорт);
	ПараметрыВызова.Вставить("КодВБанке", 			Объект.КодВБанке); // если есть 
	ПараметрыВызова.Вставить("ТекущийТипФайла", 	Объект.ТипФайлаИмпорт);
	ПараметрыВызова.Вставить("КодировкаФайла", 		Объект.КодировкаФайлаИмпорт);

	ВнешняяОбработкаОбъект.СохранитьНастройки(ПараметрыВызова);
	
	// 2. Формируем параметры для вызова функции импорта формы обработки формата
	
	// запрос к обработке формата на импорт
	ПараметрыФормата = Новый Структура;
	
	ПараметрыФормата.Вставить("ДатаДок", 			Объект.ДатаВыписки);
	ПараметрыФормата.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормата.Вставить("РСчет", 				СокрЛП(Объект.БанковскийСчет.НомерСчета));
	
	ХранилищаФайла = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	//ИмяФайла = ПолучитьИмяВременногоФайла(Объект.ТипФайлаИмпорт); 
	ИмяФайла = КаталогВременныхФайлов() + "KBExch." + Объект.ТипФайлаИмпорт; 
	ХранилищаФайла.Записать(ИмяФайла);
	
	ПараметрыФормата.Вставить("ИмяФайла",			ИмяФайла);
	ПараметрыФормата.Вставить("ТипФайла", 			Объект.ТипФайлаИмпорт);
	ПараметрыФормата.Вставить("НашМФО", 			СокрЛП(Объект.БанковскийСчет.Банк.Код));
	ПараметрыФормата.Вставить("КодировкаФайла", 	Объект.КодировкаФайлаИмпорт);
	ПараметрыФормата.Вставить("АдресХранилищаФайла", АдресХранилищаФайла);
		
	// 3. Вызываем функцию обработки, получаем таблицу платежей
	
	Попытка
		тзВыписка = ВнешняяОбработкаОбъект.ИмпортВыписки(ПараметрыФормата);
	Исключение
		//^<< szewczuk 03.11.2016
		//^Сообщить("Ошибка импорта: " + ОписаниеОшибки());
		Сообщить("Ошибка импорта: ");
		//^>> 
		Возврат Неопределено;
	КонецПопытки; 
	
	// Если произошла ошибка
	Если тзВыписка = Неопределено ИЛИ ТипЗнч(тзВыписка) <> Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(тзВыписка) = Тип("Строка") И ЗначениеЗаполнено(тзВыписка) Тогда
			Сообщить(тзВыписка);
		Иначе
			Сообщить("Не загружено");
		КонецЕсли;	
		Возврат Неопределено;
	КонецЕсли;	
	
	
	// 4. Обрабатываем таблицу платежей 
	// (перекодировка, только входящие, ищем юрфизлиц, контрагентов, сделки, заказы, договора)
	
	тзПлатежи = Объект.тчИмпорт.Выгрузить();
	тзПлатежи.Очистить();
	
	ПерекодировкаИмпорта = ВнешняяОбработкаОбъект.ПерекодировкаИмпорта();
	
	Для Каждого Строка Из тзВыписка Цикл
		
		// проверяем на только входящие платежи
		Если Объект.НастройкаИмпортТолькоВходящихПлатежей Тогда
			Если Число(Строка.Расход) > 0 Тогда
				Продолжить;	
			КонецЕсли; 
		КонецЕсли;
		
		НоваяСтрока = тзПлатежи.Добавить();
		
		// перекодировка
		Если ПерекодировкаИмпорта Тогда
			Строка.Контрагент = ЗаменитьСимволы(Строка.Контрагент);	
			Строка.Содержание = ЗаменитьСимволы(Строка.Содержание);	
		КонецЕсли;	
		
		НоваяСтрока.Приход      	= Строка.Приход;
		НоваяСтрока.Расход      	= Строка.Расход;
		
		НоваяСтрока.НомерПП			= Строка.НомерПП;
		
		// 4.1. Определение контрагента
		// Ищем по коду ЕДРПОУ (в дальнейшем ОКПО):
		ВыборкаПоОКПО = НайтиПоОКПО(Строка.ОКПО, Строка.Контрагент);
		НайденКонтрагент = Ложь;
		Если ВыборкаПоОКПО.Следующий() Тогда //есть хоть один
			
			Контрагент 	= ВыборкаПоОКПО.Ссылка;
			НайденКонтрагент = Истина;
			
		Иначе
			
			// в зависимости от флага
			// "АвтоСозданиеКонтрагента" создаем новые элементы справочника Контрагенты
			
			Если Объект.НастройкаАвтоСозданиеКонтрагента Тогда
				
				ПР = ?(Строка.Приход = 0, "Р", "П");
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("Наименование", Строка.Контрагент);
				Реквизиты.Вставить("ПР", ПР); //Приход ("П") или расход ("Р")
				Реквизиты.Вставить("ОКПО", 	Строка.ОКПО);
				Реквизиты.Вставить("РСчет", Строка.РСчет);
				Реквизиты.Вставить("МФО", 	Строка.МФО);
				
				//Создаём нового контрагента в справочнике
				Контрагент = СоздатьСпрКонтрагент(Реквизиты);
			Иначе
				// ПустаяСсылка
				Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;	
			
		КонецЕсли;	
		
		НоваяСтрока.Контрагент 		= Контрагент;
		
		// 4.2. Определение сделки, заказа, договора.		
		ПриходРасход = "";
		Если НоваяСтрока.Приход > 0 Тогда
			ПриходРасход = "Приход";
			//^<< szewczuk 03.11.2016
			Если Объект.Конфигурация = "УТ" Тогда
			//^>> 	
				ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств";	
			//^<< szewczuk 03.11.2016
			ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
				ВидДокумента = "ПоступлениеНаРасчетныйСчет";	
			КонецЕсли; 
			//^>> 
			 
		ИначеЕсли НоваяСтрока.Расход > 0 Тогда	
			ПриходРасход = "Расход";
			//^<< szewczuk 03.11.2016
			Если Объект.Конфигурация = "УТ" Тогда
			//^>> 	
				ВидДокумента = "СписаниеБезналичныхДенежныхСредств";
			//^<< szewczuk 03.11.2016
			ИначеЕсли  Объект.Конфигурация = "БУ" Тогда
				ВидДокумента = "СписаниеСРасчетногоСчета";	
			КонецЕсли; 
			//^>> 
			
		КонецЕсли;	
		
		НоваяСтрока.ВидДокумента 	= ВидДокумента;
		
		//НоваяСтрока.ВидОперации = ОпределитьВидОперации(ВидДокумента);
		НоваяСтрока.ВидОперации 				= ПолучитьНастройкуЗаполнения("ВидОперации", ВидДокумента);
		НоваяСтрока.СтатьяДДС 					= ПолучитьНастройкуЗаполнения("СтатьяДДС", ВидДокумента);
		НоваяСтрока.Подразделение 				= ПолучитьНастройкуЗаполнения("Подразделение", ВидДокумента);
		НоваяСтрока.СтатьяДоходовИлиРасходов 	= ПолучитьНастройкуЗаполнения("СтатьяДоходовИлиРасходов", ВидДокумента);
		//^<< szewczuk 04.11.2016
		Если Объект.Конфигурация = "БУ" Тогда
			НоваяСтрока.СтавкаНДС 					= ПолучитьНастройкуЗаполнения("СтавкаНДС", ВидДокумента);	
		КонецЕсли; 
		//^>> 
		
		//^<< szewczuk 04.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
			НоваяСтрока.ТипДокумента 				= ПолучитьНастройкуЗаполнения("ТипДокумента", ВидДокумента);
		КонецЕсли; 
		//^>>
		
		СписокВидовДоговоров = клОпределитьВидДоговораСКонтрагентом(ПолучитьНастройкуЗаполнения("ВидОперации", ВидДокумента));
		Договор		= НайтиДоговорКонтрагента(Контрагент,Объект.Организация,СписокВидовДоговоров);

		НоваяСтрока.Договор 		= Договор;
		
		НоваяСтрока.Содержание 		= СокрЛП(Строка.Содержание);
				
		// по счету ищем банковский счет для контрагента. Если нет - создать.
		НоваяСтрока.СчетКонтрагента = НайтиСчетКонтрагента(Строка.РСчет, Контрагент);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКонтрагента) Тогда
			НоваяСтрока.СчетКонтрагента = ДобавитьСчетКонтрагента(Контрагент, Строка.РСчет, Строка.МФО);
		КонецЕсли;	
			
		// определяем статус
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
		Иначе
			НоваяСтрока.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи;
		КонецЕсли;
		
	КонецЦикла;	
	
	// Ищем среди неоплаченных ППИсх с совпадением суммы и номера ПП (то есть те, которые вернулись из банка и их необходимо обновить). 
	// Для таких проставим статус СуществующийПлатежНеобходимоОплатить
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаИмпорт Из Объект.тчИмпорт Цикл
		
		Если СтрокаИмпорт.Оплачен Или СтрокаИмпорт.ВидДокумента <> "СписаниеБезналичныхДенежныхСредств" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из тзПлатежи Цикл
			Если Строка.Контрагент = СтрокаИмпорт.Контрагент Тогда
				
				Если (Строка.Расход > 0) И (СтрокаИмпорт.Расход  > 0) И (Строка.Расход  = СтрокаИмпорт.Расход ) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					
					Если МассивУдаляемыхСтрок.Найти(Строка) = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(Строка);
					КонецЕсли;	
					
					СтрокаИмпорт.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить;
					Прервать;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		тзПлатежи.Удалить(ЭлементМассива);
	КонецЦикла;
	
	// 4.5 Удаляем с тзПлатежи, те которые уже есть в тчИмпорт
	// (совпадение по Контрагенту и приходу-расходу)
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого Строка Из тзПлатежи Цикл
		ПервоеСовпадениеПриход = Истина;
		ПервоеСовпадениеРасход = Истина;
		Для Каждого СтрокаИмпорт Из Объект.тчИмпорт Цикл
			
			СтрокаСравнения = "Контрагент";
			Если (Строка[СтрокаСравнения] = СтрокаИмпорт[СтрокаСравнения]) Тогда
				// приход-расход
				Если (Строка.Приход > 0) И (СтрокаИмпорт.Приход > 0) И (Строка.Приход = СтрокаИмпорт.Приход) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					// совпало
					Если ПервоеСовпадениеПриход Тогда
						// эту строку из тзПлатежи удаляем
						МассивУдаляемыхСтрок.Добавить(Строка);
						ПервоеСовпадениеПриход = Ложь;
					КонецЕсли; 
				КонецЕсли; 
				Если (Строка.Расход > 0) И (СтрокаИмпорт.Расход  > 0) И (Строка.Расход  = СтрокаИмпорт.Расход ) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					// совпало
					Если ПервоеСовпадениеРасход  Тогда
						// эту строку из тзПлатежи удаляем
						МассивУдаляемыхСтрок.Добавить(Строка);
						ПервоеСовпадениеРасход  = Ложь;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		тзПлатежи.Удалить(ЭлементМассива);
	КонецЦикла;
	
	
	// 5. Объединяем с тчИмпорт, в которой сейчас существующие платежи. Устанавливаем статусы
	Для Каждого Строка Из тзПлатежи Цикл  
		НоваяСтрока = Объект.тчИмпорт.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.Оплачен = Истина;
		НоваяСтрока.Флаг = Истина;
		
	КонецЦикла;		
	
	// 6. Сортируем тчИмпорт
	СортировкаТчИмпорт();
	
КонецФункции

&НаСервере
Процедура ТипФайлаИмпортПриИзмененииСервер()
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	
	СформироватьФильтрВыбораФайла(ВнешняяОбработкаОбъект, Истина, Ложь);
	СформироватьИмяФайла(ВнешняяОбработкаОбъект, Истина, Ложь);
	
КонецПроцедуры

&НаСервере
// Сортирует переданную таблицу значений по типу сортировки
//
// Параметры:
//
//  тзСорт - сортируемая таблица
//	ТипСортировки - тип сортировки
//
// Возвращает отсортированную таблицу
//
Функция Сортировать(тзСорт, ТипСортировки) Экспорт
	
	ПорядокСортировки = "";
	Для Каждого эл Из ТипСортировки Цикл
		ПорядокСортировки = ПорядокСортировки + эл.Значение + ",";
	КонецЦикла;
	ПорядокСортировки = Сред(ПорядокСортировки, 1, СтрДлина(ПорядокСортировки) - 1);
	
	тзВрем = тзСорт.Скопировать();    //скопируем тзСорт во временную тзВрем
	тзВрем.Колонки.Добавить("Сумма");
	тзВрем.Колонки.Добавить("ПриходРасход");
	Для Каждого стр Из тзВрем Цикл
		стр.Сумма = стр.Приход + стр.Расход;
		Если стр.Расход > 0 Тогда
			стр.ПриходРасход = 1;
		Иначе
			стр.ПриходРасход = 0;
		КонецЕсли; 
	КонецЦикла;	
	
	тзВрем.Сортировать(ПорядокСортировки);
	тзВрем.Колонки.Удалить("Сумма");
	тзВрем.Колонки.Удалить("ПриходРасход");
	
	Возврат тзВрем;
	
КонецФункции	

&НаСервере
// Сортирует тчИмпорт согласно настроек 
//
// Параметры: УстанавливатьТекущуюСтроку - булево
// При истина устанавливается необходимость изменения текущей строки в тпИмпорт
// Само изменение текущей строки происходит в ОбновлениеОтображения() - 
// здесь текущая строка устанавливаться не хочет
//
Процедура СортировкаТчИмпорт()

	// применим сортировку по настройкам
	Если Объект.НастройкаИспользоватьСортировку Тогда
		//сортируем таблицу значений "тчИмпорт.Выгрузить()" табличной части "тчИмпорт"
		тзИмпорт = Сортировать(Объект.тчИмпорт.Выгрузить(), Объект.НастройкаПорядокСортировки);
		//загружаем "тзИмпорт" в "тчИмпорт"
		Объект.тчИмпорт.Загрузить(тзИмпорт);
	КонецЕсли;	
	
КонецПроцедуры // СортировкаТчИмпорт()

&НаСервере
Процедура СоздатьДокументыВыпискаПоРасчетномуСчету()

	КоличествоСтрок = 0;
	
	Для Каждого СтрокаИмпорт Из Объект.тчИмпорт Цикл
		
		Если НЕ СтрокаИмпорт.Оплачен ИЛИ НЕ СтрокаИмпорт.Флаг ИЛИ НЕ СтрокаИмпорт.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаИмпорт.Документ) Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ВыпискаПоРасчетномуСчету = Документы.ВыпискаПоРасчетномуСчету.СоздатьДокумент();
	ВыпискаПоРасчетномуСчету.Организация    = Объект.Организация;
	ВыпискаПоРасчетномуСчету.БанковскийСчет = Объект.БанковскийСчет;
	ВыпискаПоРасчетномуСчету.Дата           = КонецДня(Объект.ДатаВыписки);
	
	ВыпискаПоРасчетномуСчету.УстановитьНовыйНомер();
	
	Для Каждого СтрокаИмпорт Из Объект.тчИмпорт Цикл
		
		Если НЕ СтрокаИмпорт.Оплачен ИЛИ НЕ СтрокаИмпорт.Флаг ИЛИ НЕ СтрокаИмпорт.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаИмпорт.ВидДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
			ВыпискаПоРасчетномуСчетуТабЧасть = ВыпискаПоРасчетномуСчету.ВходящиеПлатежи;
		Иначе	
			ВыпискаПоРасчетномуСчетуТабЧасть = ВыпискаПоРасчетномуСчету.ИсходящиеПлатежи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИмпорт.Документ) Тогда
			СтрокаВыпискаПоРасчетномуСчету =  ВыпискаПоРасчетномуСчетуТабЧасть.Добавить();
			
			СтрокаВыпискаПоРасчетномуСчету.ПлатежныйДокумент = СтрокаИмпорт.Документ;
			СтрокаВыпискаПоРасчетномуСчету.Сумма = СтрокаИмпорт.Приход + СтрокаИмпорт.Расход;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Попытка
		
		ВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Проведение);
		
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Проведен документ ""Выписка по расчетному счету"" № %1 от %2!'"), ВыпискаПоРасчетномуСчету.Номер, ВыпискаПоРасчетномуСчету.Дата));
		
		Для Каждого СтрокаИмпорт Из Объект.тчИмпорт Цикл
			Если НЕ СтрокаИмпорт.Флаг Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаИмпорт.Оплачен = Истина;
			СтрокаИмпорт.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;
		КонецЦикла;	
		
	Исключение
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не проведен! Произошли ошибки при проведении!'"), ВыпискаПоРасчетномуСчету.Номер, ВыпискаПоРасчетномуСчету.Дата));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // СоздатьДокументыВыпискаПоРасчетномуСчету()

&НаСервере
// Очищает в тчИмпорт все платежи, кроме существующих
//
// Параметры:
//
Процедура ОчиститьНесуществующиеПлатежи()
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из Объект.тчИмпорт Цикл
		Если Строка.Статус <> СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);			
		КонецЕсли; 
	КонецЦикла; 
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		Объект.тчИмпорт.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНесуществующиеПлатежи()

&НаКлиенте
// Проверяет заполнение всех полей для импорта выписки
// 
// Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
// дата, организация, расчетный счет, формат обмена, тип файла
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены все поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейДляИмпорта()
	
	Если ПустаяСтрока(Объект.ИмяФайлаИмпорт) Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указано имя файла для импорта выписки!';uk='Не вказано ім''я файлу імпорту виписки!'"));
		ТекстПредупреждения = НСтр("ru='Не указано имя файла для импорта выписки!';uk='Не вказано ім''я файлу імпорту виписки!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ СуществуетФайл(Объект.ИмяФайлаИмпорт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ДатаВыписки = '00010101000000' Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указана дата выписки!';uk='Не вказана дата виписки!'"));
		ТекстПредупреждения = НСтр("ru='Не указана дата выписки!';uk='Не вказана дата виписки!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		ТекстПредупреждения = НСтр("ru='Не указана организация!';uk='Не вказана організація!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
		ТекстПредупреждения = НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФорматОбмена) Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		ТекстПредупреждения = НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипФайлаИмпорт) Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(НСтр("ru='Не указан тип файла для импорта с системы Клиент-Банк!';uk='Не вказаний тип файлу для імпорту із системи Клієнт-Банк!'"));
		ТекстПредупреждения = НСтр("ru='Не указан тип файла для импорта с системы Клиент-Банк!';uk='Не вказаний тип файлу для імпорту із системи Клієнт-Банк!'");
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейДляИмпорта()	

&НаСервере
Функция клПолучитьСтавкуНДС(СтавкаНДС) Экспорт

 	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат 20;
	КонецЕсли;

	Возврат 0;

КонецФункции // клПолучитьСтавкуНДС()

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(РасшифровкаПлатежа, Сумма, Строка, докОб, докОбМетаданные)
	
	//в таб части РасшифровкаПлатежа
	//^<< szewczuk 02.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 
		Если Строка.Расход > 0 Тогда
			Если Строка.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			 ИЛИ Строка.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию	
			 ИЛИ Строка.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				
				РасшифровкаПлатежа.Сумма 			= Сумма;
				
			Иначе
				
				РасшифровкаПлатежа.Партнер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Контрагент, "Партнер");
				РасшифровкаПлатежа.Подразделение = Строка.Подразделение;
				
				РасшифровкаПлатежа.Сумма 			= Сумма;
				
				Если Строка.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
				 ИЛИ Строка.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
					РасшифровкаПлатежа.СтатьяРасходов = Строка.СтатьяДоходовИлиРасходов;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Строка.Приход > 0 Тогда
			
			РасшифровкаПлатежа.Партнер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Контрагент, "Партнер");
			РасшифровкаПлатежа.Сумма = Сумма;
			РасшифровкаПлатежа.СтатьяДоходов = Строка.СтатьяДоходовИлиРасходов;
			РасшифровкаПлатежа.Подразделение = Строка.Подразделение;
			
		КонецЕсли;
		
		//^<< szewczuk 14.11.2016
		РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Строка.СтатьяДДС;
		//^>> 
		
		//^<< szewczuk 02.11.2016
	ИначеЕсли Объект.Конфигурация = "БУ" Тогда
		
		РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Строка.СтатьяДДС;
		РасшифровкаПлатежа.ДоговорКонтрагента			 = Строка.Договор;
		РасшифровкаПлатежа.СтавкаНДС					 = Строка.СтавкаНДС;
		РасшифровкаПлатежа.СуммаПлатежа 				 = Сумма;
		РасшифровкаПлатежа.СуммаВзаиморасчетов 			 = Сумма;
				
		ЗначениеСтавкиНДС     		= клПолучитьСтавкуНДС(РасшифровкаПлатежа.СтавкаНДС);
		РасшифровкаПлатежа.СуммаНДС	= РасшифровкаПлатежа.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
		//^<< szewczuk 11.11.2016
		СтруктураКурсаДокумента = клКурсДляВалюты(докОб.ВалютаДокумента, докОб.Дата);
		РасшифровкаПлатежа.КурсВзаиморасчетов 		= СтруктураКурсаДокумента.Курс;
		РасшифровкаПлатежа.КратностьВзаиморасчетов	= СтруктураКурсаДокумента.Кратность;
		//^>> 

		
		Если Строка.Расход > 0 Тогда
			
				РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Объект.НастройкаИсхСчетРасчетов);
				РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам	 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Объект.НастройкаИсхСчетАвансов);

				РасшифровкаПлатежа.СчетУчетаНДС 					= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6432");
				РасшифровкаПлатежа.СчетУчетаНДСПодтвержденный 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6431");
				Попытка
					РасшифровкаПлатежа.НалоговоеНазначение 			= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				Исключение
				КонецПопытки;
			
			ИначеЕсли Строка.Приход > 0 Тогда
				
				РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Объект.НастройкаВхСчетРасчетов);
				РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам	 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Объект.НастройкаВхСчетАвансов);
				
				РасшифровкаПлатежа.СчетУчетаНДС 					= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
				РасшифровкаПлатежа.СчетУчетаНДСПодтвержденный 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6441");
				Попытка
					РасшифровкаПлатежа.НалоговоеНазначение 			= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				Исключение
				КонецПопытки;
		
		КонецЕсли;

	КонецЕсли; 
	//^>>

КонецПроцедуры	

&НаСервере
Процедура СформироватьВыпискиСервер()
	
	Для Каждого Строка Из Объект.тчИмпорт Цикл
		
		Если Строка.Флаг Тогда
			
			// надо импортировать эту строку 
			// статус "СуществующийПлатеж" не трогаем, остальные пытаемся записать и при 
			// установленных настройках провести
			Если Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить Тогда
				// для документа проставим флаг оплаты и дату оплаты, остальное - не трогаем
				докОб = Строка.Документ.ПолучитьОбъект();
				
				докОбМетаданные = докОб.Метаданные();
				
				докОб.Дата 			= Объект.ДатаВыписки;	
				
				// пытаемся записать
				Попытка
					докОб.Записать();
					// записали - поменяем сразу статус на существующий платеж
					//Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;
				Исключение
					// 	
				КонецПопытки;
				
				// если установлена соответствующая настройка - пытаемся и провести
				Если Объект.НастройкаПытатьсяПроводитьСозданныеДокументы Тогда
					//^<< szewczuk 09.11.2016
					//^Попытка
					//^	докОб.Записать(РежимЗаписиДокумента.Проведение);
					//^Исключение
					//^ // 
					//^КонецПопытки;
					Если Строка.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""%1"" не будет проведен! Не заполнены все необходимые реквизиты!';uk='Документ ""%1"" не буде проведений! Не заповнені всі необхідні реквізити!'"), докОб));
					Иначе
						Попытка
							докОб.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
						// 
					КонецПопытки;
					КонецЕсли;
					//^>> 
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			НовыйДокумент = Истина;
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Или НЕ ЗначениеЗаполнено(Строка.Документ.Номер) Тогда //вторая проверка в случае, если документ удалён физически
				// создаем новый документ
				
				ТипДокумента = Строка.ВидДокумента;
				Если ПустаяСтрока(ТипДокумента) Тогда
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для строки ""%1"" не выбран вид документа!';uk='Для рядка ""%1"" не вибраний вид документу!'"), Строка.НомерСтроки));
					Продолжить;
				КонецЕсли;	
				Док = Документы[ТипДокумента];
				
				докОб = Док.СоздатьДокумент();
			Иначе  
				// перезаписываем измененный старый документ
				докОб = Строка.Документ.ПолучитьОбъект();
				НовыйДокумент = Ложь;
			КонецЕсли;	
			
			
			// заполняем реквизиты документа
			
			докОбМетаданные = докОб.Метаданные();

			докОб.Контрагент 			= Строка.Контрагент;
			докОб.СуммаДокумента 		= ?(Строка.Приход > 0, Строка.Приход, Строка.Расход);
			
			//^<< szewczuk 03.11.2016
			//^докОб.БанковскийСчет		= Объект.БанковскийСчет;
			Если клЕстьРеквизит("БанковскийСчет",докОбМетаданные) Тогда
				докОб.БанковскийСчет  = Объект.БанковскийСчет;
			ИначеЕсли клЕстьРеквизит("СчетОрганизации",докОбМетаданные) Тогда	
				докОб.СчетОрганизации = Объект.БанковскийСчет;
			КонецЕсли;	
			//^>> 
			
			докОб.Организация			= Объект.Организация;
			
			//^<< szewczuk 03.11.2016
			//^докОб.БанковскийСчетКонтрагента		= Строка.СчетКонтрагента;
			Если клЕстьРеквизит("БанковскийСчетКонтрагента",докОбМетаданные) Тогда
				докОб.БанковскийСчетКонтрагента	= Строка.СчетКонтрагента;
			КонецЕсли;	

			Если клЕстьРеквизит("СчетКонтрагента",докОбМетаданные) Тогда
				докОб.СчетКонтрагента		= Строка.СчетКонтрагента;
			КонецЕсли;	
			//^>>
			
			//^<< szewczuk 04.11.2016
			Если клЕстьРеквизит("СчетБанк",докОбМетаданные) Тогда
				докОб.СчетБанк	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Объект.НастройкаСчетУчетаДС);
			КонецЕсли;
			//^>> 
			
			Если клЕстьРеквизит("НомерПоручения", докОбМетаданные) Тогда
				докОб.НомерПоручения 			= Строка.НомерПП;
			КонецЕсли;	
			
			Если клЕстьРеквизит("НомерВходящегоДокумента", докОбМетаданные) Тогда
				докОб.НомерВходящегоДокумента 	= Строка.НомерПП;
			КонецЕсли;      
			
			Если НовыйДокумент Тогда
				// дата для нового
				докОб.Дата = Объект.ДатаВыписки;
				// номер для нового 
				докОб.УстановитьНовыйНомер();
			КонецЕсли; 
			
			Если клЕстьРеквизит("ДатаВходящегоДокумента", докОбМетаданные) Тогда
				докОб.ДатаВходящегоДокумента 	= Объект.ДатаВыписки;	
			КонецЕсли;	
			
			// валюта - из счета 
			//^<< szewczuk 03.11.2016
			Если клЕстьРеквизит("Валюта", докОбМетаданные) Тогда
			//^>> 
				докОб.Валюта = Объект.БанковскийСчет.ВалютаДенежныхСредств;
			//^<< szewczuk 03.11.2016
			ИначеЕсли клЕстьРеквизит("ВалютаДокумента", докОбМетаданные) Тогда
				докОб.ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
			КонецЕсли;
			//^>> 
			
			//в таб части РасшифровкаПлатежа
			докОб.РасшифровкаПлатежа.Очистить();
			
			РасшифровкаПлатежа = докОб.РасшифровкаПлатежа.Добавить();
			ЗаполнитьРасшифровкуПлатежа(РасшифровкаПлатежа, докОб.СуммаДокумента, Строка, докОб, докОбМетаданные);

			Если клЕстьРеквизит("НазначениеПлатежа",докОбМетаданные) Тогда
				докОб.НазначениеПлатежа		= Строка.Содержание;
			Иначе	
				докОб.Комментарий 			= Строка.Содержание;
			КонецЕсли;	
			
			// вид операции
			
			//^<< szewczuk 03.11.2016
			Если Объект.Конфигурация = "УТ" Тогда
			//^>> 	
				докОб.ТипПлатежногоДокумента = Строка.ТипДокумента;
				докОб.ХозяйственнаяОперация = Строка.ВидОперации;
			ИначеЕсли Объект.Конфигурация = "БУ" Тогда
				докОб.ВидОперации = Строка.ВидОперации;
			КонецЕсли; 
			//^>> 
			
			// СтатьяДвиженияДенежныхСредств
			докОб.СтатьяДвиженияДенежныхСредств = Строка.СтатьяДДС;
			
			// пытаемся записать
			Попытка
				докОб.ОбменДанными.Загрузка = Истина; // в противном случае номер ПП перезаписывается
				докОб.Записать();
				докОб.ОбменДанными.Загрузка = Ложь; 
				// записали - поменяем сразу статус на существующий платеж
				//Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;
				Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			// если установлена соответствующая настройка - пытаемся и провести
			// но только если строка не со статусом - "НеобходимоЗаполнитьРеквизиты" 
			// так как они все равно не смогут провестися
			Если Объект.НастройкаПытатьсяПроводитьСозданныеДокументы Тогда
				Если Строка.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""%1"" не будет проведен! Не заполнены все необходимые реквизиты!';uk='Документ ""%1"" не буде проведений! Не заповнені всі необхідні реквізити!'"), докОб));
				Иначе
					Попытка
						//^<< szewczuk 14.11.2016
						//^докОб.Записать(РежимЗаписиДокумента.Проведение);
						Если докОб.ПроверитьЗаполнение() Тогда
							докОб.Записать(РежимЗаписиДокумента.Проведение);
						КонецЕсли;
						//^>> 
					Исключение
						// 
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			// запишем в строку ссылку на созданный документ
			Строка.Документ = докОб.Ссылка;
			
		КонецЕсли;
	КонецЦикла;	
	
	// применим сортировку по настройкам
	СортировкаТчИмпорт();
	
КонецПроцедуры

&НаСервере
Процедура ДатаВыпискиПриИзмененииСервер()
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	
	СформироватьИмяФайла(ВнешняяОбработкаОбъект, Истина, Ложь);
	
КонецПроцедуры

//^<< szewczuk 15.11.2016
&НаСервере
Процедура ОпределитьКонфигурацию()
	
	//определим текущую конфигурацию
	текКонфигурация = Метаданные.Имя;
	Если Найти(текКонфигурация, "УправлениеТорговлей") Тогда
		текКонфигурация = "УТ";
	ИначеЕсли Найти(текКонфигурация, "БухгалтерияДляУкраины") Тогда
		текКонфигурация = "БУ";
	ИначеЕсли Найти(текКонфигурация, "УправлениеПредприятиемДляУкраины") Тогда
		текКонфигурация = "УТ";
	Иначе
		текКонфигурация = "";
	КонецЕсли;
	
	//^<< szewczuk 31.10.2016
	Если текКонфигурация <> "" Тогда
		Конфигурация = текКонфигурация;
		Объект.Конфигурация = текКонфигурация;
		//^<< szewczuk 15.11.2016
		НазначитьТипыРеквизитовБанковскихСчетов();
		//^>> 
	Иначе 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обработка ""Обмен данными с системами ""Клиент-Банк"", 2.1"" 
							|не предназначена для работы с "+ Метаданные.Синоним;
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	//^>> 
	
КонецПроцедуры
//^>> 

//^<< szewczuk 15.11.2016
&НаСервере
Процедура НазначитьТипыРеквизитовБанковскихСчетов()
	
	Если Объект.Конфигурация  =  "УТ" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций");
		Элементы.БанковскийСчет.ОграничениеТипа = ОписаниеТипа;
		Элементы.БанковскийСчет.ВыбиратьТип = Ложь;
	ИначеЕсли Объект.Конфигурация  = "БУ" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Элементы.БанковскийСчет.ОграничениеТипа	 = ОписаниеТипа;
		Элементы.БанковскийСчет.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры
//^>> 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ ИМПОРТ

&НаКлиенте
Процедура ИмпортВыписки(Команда)
	
	Отказ = Ложь;
	ИмпортВыпискиКлиент(Отказ);
	
	Если НЕ Отказ Тогда
		Если РежимОтладки Тогда
			ИмпортВыпискиСервер(ИмяФайлаОбработкиФормата, АдресХранилищаФайла); // для файлового варианта и тестирования 
		Иначе	
			ИмпортВыпискиСервер(АдресХранилищаОбработкиФормата, АдресХранилищаФайла);
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВыписки(Команда)
	//СформироватьВыпискиКлиент();
	СформироватьВыпискиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортПометитьВсе(Команда)
	Для Каждого СтрокаДокумента Из Объект.тчИмпорт Цикл
		СтрокаДокумента.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортСнятьПометкуСоВсех(Команда)
	Для Каждого СтрокаДокумента Из Объект.тчИмпорт Цикл
		СтрокаДокумента.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаИмпортНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлДанных(Элемент, НСтр("ru='Выберите файл для загрузки данных из клиента банка'"), ФильтрВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаИмпортОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпискиПриИзменении(Элемент)
	Объект.тчИмпорт.Очистить();
	
	ДатаВыпискиПриИзмененииСервер();

	ПрочитатьСуществующиеПлатежи();
КонецПроцедуры

&НаКлиенте
Процедура ТипФайлаИмпортПриИзменении(Элемент)
	ТипФайлаИмпортПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КодВБанкеИмпортПриИзменении(Элемент)
	СформироватьИмяФайла();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ТаблицаИмпортФлаг" Тогда
						
		Элемент.ТекущиеДанные.Флаг = НЕ (Элемент.ТекущиеДанные.Флаг);
		
	ИначеЕсли Поле.Имя = "ТаблицаИмпортСодержание" Тогда
		//^<< szewczuk 02.11.2016
		//^Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.Содержание));
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.Содержание);
		ПоказатьПредупреждение(,ТекстПредупреждения,,);
		//^>> 		
		
				
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда 
		
		Если (Поле.Имя = "ТаблицаИмпортНомерСтроки"
		  ИЛИ Поле.Имя = "ТаблицаИмпортНомерПП"
		  ИЛИ Поле.Имя = "ТаблицаИмпортВидДокумента"
		  ИЛИ Поле.Имя = "ТаблицаИмпортТипДокумента"
		  ИЛИ Поле.Имя = "ТаблицаИмпортВидОперации"
		  ИЛИ Поле.Имя = "ТаблицаИмпортДокумент"
		  ИЛИ Поле.Имя = "ТаблицаИмпортОплачен"
		  ИЛИ Поле.Имя = "ТаблицаИмпортПриход"
		  ИЛИ Поле.Имя = "ТаблицаИмпортРасход")
		  ИЛИ (Поле.Имя = "ТаблицаИмпортКонтрагент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент)) 
		  ИЛИ (Поле.Имя = "ТаблицаИмпортСчетКонтрагента" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетКонтрагента)) 
		  ИЛИ (Поле.Имя = "ТаблицаИмпортСтатьяДДС" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДДС))
		  ИЛИ (Поле.Имя = "ТаблицаИмпортСтатьяДоходовИлиРасходов" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДоходовИлиРасходов))
		  ИЛИ (Поле.Имя = "ТаблицаИмпортПодразделение" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Подразделение))
		  Тогда
			
			СтандартнаяОбработка = Ложь;
				
			ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
		
		КонецЕсли
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаИмпортВидОперации" Тогда
		
		ТекущиеДанные = Элементы.ТаблицаИмпорт.ТекущиеДанные;
		ЗаполнитьСписокВыбораВидовОпераций(ТекущиеДанные.ВидДокумента, Элементы.ТаблицаИмпортВидОперации);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаИмпортВидДокумента" Тогда
		
		ТекущиеДанные = Элементы.ТаблицаИмпорт.ТекущиеДанные;
		ЗаполнитьСписокВыбораВидовДокумента(ТекущиеДанные.Приход, ТекущиеДанные.Расход, Элементы.ТаблицаИмпортВидДокумента);
		
	КонецЕсли;

	ТекущиеДанные = Элементы.ТаблицаИмпорт.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		
		ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		//^<< szewczuk 02.11.2016
		Если Объект.Конфигурация = "УТ" Тогда
		//^>> 
			ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
		//^<< szewczuk 02.11.2016
		ИначеЕсли Объект.Конфигурация = "БУ" Тогда 
			ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		КонецЕсли; 
		//^>>
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортКонтрагентПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаИмпорт.ТекущиеДанные;
	//^<< szewczuk 02.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 
		ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
	//^<< szewczuk 02.11.2016
	ИначеЕсли Объект.Конфигурация = "БУ" Тогда 
		ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	КонецЕсли; 
	//^>>
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортВидОперацииПриИзменении(Элемент)
	Элементы.ТаблицаИмпорт.ТекущиеДанные.СтатьяДДС = ПолучитьСтатьюДДС(Элементы.ТаблицаИмпорт.ТекущиеДанные.ВидОперации);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Закладка "Экспорт платёжных поручений"

&НаКлиенте
// Экспорт платежных поручений 
//
// Параметры: нет
//
//
Функция ЭкспортППКлиент()
	
	// 1. Проверяем, что выбрано имя файла
	// ФормаОбработкиФормата определена
	// дата, организация, расчетный счет, формат обмена, тип файла
	Возврат ПроверитьЗаполнениеПолейДляЭкспорта();
	
КонецФункции // ЭкспортПлатежныхПоручений()

&НаСервере
// Экспорт платежных поручений 
//
// Параметры: нет
//
//
Функция ЭкспортППСервер()
	
	Если НЕ ТекущийФайлФорматаОбменаСуществует Тогда
		Сообщить("Файл формата " + Объект.ФорматОбмена + " не найден");
		Возврат Неопределено;
	КонецЕсли;	
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	
	// 1.1 Вызываем функцию СохранитьЗначения для формата
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Режим", 			"Экспорт");
	ПараметрыВызова.Вставить("Организация", 	Объект.Организация);
	ПараметрыВызова.Вставить("ТекущееИмяФайла",	Объект.ИмяФайлаЭкспорт);
	ПараметрыВызова.Вставить("КодВБанке", 		Объект.КодВБанке); // если есть 
	ПараметрыВызова.Вставить("ТекущийТипФайла", Объект.ТипФайлаЭкспорт);
	ПараметрыВызова.Вставить("КодировкаФайла", 	Объект.КодировкаФайлаЭкспорт);

	ВнешняяОбработкаОбъект.СохранитьНастройки(ПараметрыВызова);
	
	// 2. Формируем параметры для вызова функции экспорта формы обработки формата
	
	// запрос к обработке формата на экспорт
	ПараметрыВызова = Новый Структура;
	
	ПараметрыВызова.Вставить("НашМФО", СокрЛП(Объект.БанковскийСчет.Банк.Код));
	ПараметрыВызова.Вставить("НашСчет", СокрЛП(Объект.БанковскийСчет.НомерСчета));
	
	ПараметрыВызова.Вставить("НашОКПО", Объект.Организация.КодПоЕДРПОУ);
	
	Если Объект.НастройкаФормироватьКраткоеНаименованиеОрганизации Тогда
		ПараметрыВызова.Вставить("НашаФирма", СокрЛП(Объект.Организация.Наименование));
	Иначе	
		ПараметрыВызова.Вставить("НашаФирма", СокрЛП(Объект.Организация.НаименованиеПолное));
	КонецЕсли;
	//^<< szewczuk 04.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
	//^>> 	
		ПараметрыВызова.Вставить("НашаФирмаСокр", СокрЛП(Объект.Организация.НаименованиеСокращенное));
	КонецЕсли; 
	//^>> 
	 
	
	ПараметрыВызова.Вставить("НашБанк", СокрЛП(Объект.БанковскийСчет.Наименование));
	
	ИмяФайла = КаталогВременныхФайлов() + "KBExchEx." + Объект.ТипФайлаЭкспорт; 
	
	ПараметрыВызова.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыВызова.Вставить("ТипФайла", Объект.ТипФайлаЭкспорт);
	
	ПараметрыВызова.Вставить("КодировкаФайла", Объект.КодировкаФайлаЭкспорт);
	
	тзПлатежныеПоручения = Новый ТаблицаЗначений;
	тзПлатежныеПоручения.Колонки.Добавить("НомерПП");
	тзПлатежныеПоручения.Колонки.Добавить("ДатаПП");
	тзПлатежныеПоручения.Колонки.Добавить("Контрагент");
	тзПлатежныеПоручения.Колонки.Добавить("МФО");
	тзПлатежныеПоручения.Колонки.Добавить("Счет");
	тзПлатежныеПоручения.Колонки.Добавить("ОКПО");
	тзПлатежныеПоручения.Колонки.Добавить("Сумма");
	тзПлатежныеПоручения.Колонки.Добавить("Содержание");
	тзПлатежныеПоручения.Колонки.Добавить("Банк");
	
	тзПлатежныеПоручения.Колонки.Добавить("Валюта");
	тзПлатежныеПоручения.Колонки.Добавить("ВалСумма");
	тзПлатежныеПоручения.Колонки.Добавить("ПроцентНДС");
	тзПлатежныеПоручения.Колонки.Добавить("СуммаНДС");

	ПерекодировкаЭкспорта = ВнешняяОбработкаОбъект.ПерекодировкаЭкспорта();	
	
	Для Каждого Строка Из Объект.тчЭкспорт Цикл
		
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = тзПлатежныеПоручения.Добавить();
		НовСтрока.НомерПП 		= Строка.НомерПП;
		НовСтрока.ДатаПП 		= Строка.ДатаПП;
		
		// "Полное наименование" контрагента
		Если ТипЗнч(Строка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Объект.НастройкаФормироватьКраткоеНаименованиеКонтрагента Тогда
				НовСтрока.Контрагент 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Контрагент.Наименование), Строка.Контрагент.Наименование);
			Иначе	
				НовСтрока.Контрагент 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Контрагент.НаименованиеПолное), Строка.Контрагент.НаименованиеПолное);
			КонецЕсли;	
		Иначе
			Если Объект.НастройкаФормироватьКраткоеНаименованиеОрганизации Тогда
				НовСтрока.Контрагент 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Контрагент.Наименование), Строка.Контрагент.Наименование);
			Иначе	
				НовСтрока.Контрагент 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Контрагент.НаименованиеПолное), Строка.Контрагент.НаименованиеПолное);
			КонецЕсли;	
		КонецЕсли;	
 
		НовСтрока.МФО 			= Строка.СчетКонтрагента.Банк.Код;
		НовСтрока.Счет 			= Строка.СчетКонтрагента.НомерСчета;
		
		НовСтрока.ОКПО 			= Строка.Контрагент.КодПоЕДРПОУ;
			
			
		НовСтрока.Сумма 		= Строка.Сумма;
		НовСтрока.Содержание 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Содержание), Строка.Содержание);
		Банк = Строка.СчетКонтрагента.Банк.Наименование;
		НовСтрока.Банк 			= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Банк), Банк);
		//	Код валюты (Валюта) – строка (3)
		НовСтрока.Валюта		= Строка.СчетКонтрагента.ВалютаДенежныхСредств.Код;
		//	Сумма в валюте (ВалСумма) - число
		НовСтрока.ВалСумма		= 0;
		//	Процент НДС (ПроцентНДС) – строка (например «0», «20»)
		НовСтрока.ПроцентНДС	= ?(Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, "20","0");
		СтавкаНДС = ?(Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, 20, 0);
		//	Сумма НДС (СуммаНДС) – число
		НовСтрока.СуммаНДС		= Строка.Сумма * 100 / (100 + СтавкаНДС);
		
	КонецЦикла;
	
	ПараметрыВызова.Вставить("тзПлатежныеПоручения", тзПлатежныеПоручения);
	
	Попытка
		Рез = ВнешняяОбработкаОбъект.ЭкспортПлатежныхПоручений(ПараметрыВызова);
	Исключение
		Сообщить("Ошибка экспорта: " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	// рез - либо истина, либо ложь
	
	// Если произошла ошибка
	Если Рез <> Неопределено Тогда
		Если ТипЗнч(Рез) = Тип("Строка") И ЗначениеЗаполнено(Рез) Тогда
			Сообщить(Рез);
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	АдресХранилищаФайлаЭкспорт = "";
	
	Если Рез Тогда
		
		ХранилищеФайла = Новый ДвоичныеДанные(ИмяФайла);
		АдресХранилищаФайлаЭкспорт = ПоместитьВоВременноеХранилище(ХранилищеФайла);
		
		//Предупреждение(НСтр("ru='Экспорт платежных документов успешно завершен';uk='Експорт платіжних доручень успішно завершено'")); 
		Сообщить(НСтр("ru='Экспорт платежных документов успешно завершен';uk='Експорт платіжних доручень успішно завершено'")); 
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции // ЭкспортПлатежныхПоручений()

// Проверяем, что выбраны организация, счет, дата выписки не пустая
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейЭкспорт()
	
	Если Объект.ДатаППС = Неопределено Тогда
		Сообщить(НСтр("ru='Не указана дата начала периода!';uk='Не вказана дата початку періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ДатаПППо = Неопределено Тогда
		Сообщить(НСтр("ru='Не указана дата конца периода!';uk='Не вказана дата кінця періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		Сообщить(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейЭкспорт()	

// Читает существующие платежные поручения
//
// Параметры:
// 		Нет
//
Процедура ПрочитатьСуществующиеПП()
	
	// Проверить, что выбраны организация, счет, дата выписки не пустая
	Если НЕ ПроверитьЗаполнениеПолейЭкспорт() Тогда
		Возврат;
	КонецЕсли;	
	
	//Запрос к документам: "СписаниеБезналичныхДенежныхСредств"
		Запрос = Новый Запрос;
	
		Запрос.УстановитьПараметр("ДатаС", НачалоДня(Объект.ДатаППС));	
		Запрос.УстановитьПараметр("ДатаПо", КонецДня(Объект.ДатаПППо));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		

	//^<< szewczuk 01.11.2016
	Если Объект.Конфигурация = "УТ" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
	       |	СписаниеБезналичныхДенежныхСредств.Ссылка,
	       |	СписаниеБезналичныхДенежныхСредств.Дата КАК ДатаПП,
	       |	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация,
	       |	СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента,
	       |	ВЫБОР
	       |		КОГДА СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		   |				)
	       |			ТОГДА СписаниеБезналичныхДенежныхСредств.Организация
	       |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.Контрагент
	       |	КОНЕЦ КАК Контрагент,
	       |	СписаниеБезналичныхДенежныхСредств.СуммаДокумента,
	       |	ВЫБОР
	       |		КОГДА СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), 
		   |				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		   |				)
	       |			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель
	       |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	       |	КОНЕЦ КАК БанковскийСчетКонтрагента,
	       |	ВЫБОР
	       |		КОГДА СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	       |			ТОГДА СписаниеБезналичныхДенежныхСредств.НомерПоручения
	       |		ИНАЧЕ СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента
	       |	КОНЕЦ КАК НомерПП,
	       |	СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа,
	       |	СписаниеБезналичныхДенежныхСредств.СтатьяДвиженияДенежныхСредств
	       |ИЗ
	       |	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки КАК ДенежныеСредстваКСписаниюБезналичныеОстатки
	       |		ПО (ДенежныеСредстваКСписаниюБезналичныеОстатки.Документ = СписаниеБезналичныхДенежныхСредств.Ссылка)
	       |			И (ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток < 0)
	       |ГДЕ
	       |	СписаниеБезналичныхДенежныхСредств.Дата МЕЖДУ &ДатаС И &ДатаПо
	       |	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация
	       |	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
	       |	И СписаниеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ";
			
	  ИначеЕсли Объект.Конфигурация = "БУ" Тогда 
		ТекстЗапроса =   
		"ВЫБРАТЬ
		|	СписаниеСРасчетногоСчета.Ссылка,
		|	СписаниеСРасчетногоСчета.Дата КАК ДатаПП,
		|	СписаниеСРасчетногоСчета.ВидОперации КАК ХозОперация,
		|	СписаниеСРасчетногоСчета.Контрагент,
		|	СписаниеСРасчетногоСчета.СуммаДокумента,
		|	СписаниеСРасчетногоСчета.СчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК НомерПП,
		|	СписаниеСРасчетногоСчета.НазначениеПлатежа
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И СписаниеСРасчетногоСчета.Организация = &Организация
		|	И СписаниеСРасчетногоСчета.СчетОрганизации = &БанковскийСчет
		|	И СписаниеСРасчетногоСчета.ПометкаУдаления = ЛОЖЬ"
	КонецЕсли;
	//^>> 
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Объект.тчЭкспорт.Очистить();
	
	ВидДокумента = "СписаниеБезналичныхДенежныхСредств";
	
	Пока Выборка.Следующий() Цикл
		
		//Если Выборка.Ссылка.РасшифровкаПлатежа.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НоваяСтрока = Объект.тчЭкспорт.Добавить();
		
		НоваяСтрока.ДатаПП	 		= Выборка.ДатаПП;
		НоваяСтрока.Контрагент 		= Выборка.Контрагент;
		НоваяСтрока.СчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
			
		НоваяСтрока.НомерПП 		= Выборка.НомерПП;
		
		НоваяСтрока.СтавкаНДС	 	= ПолучитьНастройкуЗаполнения("СтавкаНДС", ВидДокумента);
			
		НоваяСтрока.Сумма	      	= Выборка.СуммаДокумента;
		
		НоваяСтрока.Содержание      = СокрЛП(СтрЗаменить(Выборка.НазначениеПлатежа,Символы.ПС," "));
		
		НоваяСтрока.Документ		= Выборка.Ссылка;
		
		НоваяСтрока.Флаг = Истина;
		
	КонецЦикла;
	

КонецПроцедуры // ПрочитатьСуществующиеПП()

&НаСервере
Процедура ТипФайлаЭкспортПриИзмененииСервер()
	
	ВнешняяОбработкаОбъект = ПодключитьВнешнююОбработку(АдресХранилищаОбработкиФормата);
	
	СформироватьФильтрВыбораФайла(ВнешняяОбработкаОбъект, Ложь, Истина);
	СформироватьИмяФайла(ВнешняяОбработкаОбъект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Проверяет заполнение всех полей для экпорта платежных поручений
//
// Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
// дата, организация, расчетный счет, формат обмена, тип файла// Параметры: нет
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены все поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейДляЭкспорта()
	
	Если ПустаяСтрока(Объект.ИмяФайлаЭкспорт) Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указано имя файла для экспорта платежных поручений!';uk='Не вказано ім''я файлу для експорту платіжних доручень!'"));
		ТекстПредупреждения = НСтр("ru='Не указано имя файла для экспорта платежных поручений!';uk='Не вказано ім''я файлу для експорту платіжних доручень!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,);  
		//^>> 
		
		Возврат Ложь;
	КонецЕсли; 
	
	Если Объект.ДатаППС = '00010101000000' Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указана дата начала периода!';uk='Не вказана дата початку періоду!'"));
		ТекстПредупреждения = НСтр("ru='Не указана дата начала периода!';uk='Не вказана дата початку періоду!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ДатаПППо = '00010101000000' Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указана дата конца периода!';uk='Не вказана дата кінця періоду!'"));
		 ТекстПредупреждения = НСтр("ru='Не указана дата конца периода!';uk='Не вказана дата кінця періоду!'");	
		 ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		 ТекстПредупреждения = НСтр("ru='Не указана организация!';uk='Не вказана організація!'");	
		 ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
		ТекстПредупреждения = НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФорматОбмена) Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		ТекстПредупреждения = НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипФайлаЭкспорт) Тогда
		//^<< szewczuk 03.11.2016
		//^Предупреждение(НСтр("ru='Не указан тип файла для экспорта в систему Клиент-Банк!';uk='Не вказаний тип файлу для експорту в систему Клієнт-Банк!'"));
		ТекстПредупреждения = НСтр("ru='Не указан тип файла для экспорта в систему Клиент-Банк!';uk='Не вказаний тип файлу для експорту в систему Клієнт-Банк!'");	
		ПоказатьПредупреждение(,ТекстПредупреждения,,); 
		//^>> 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейДляЭкспорта()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ ЭКСПОРТ

&НаКлиенте
Процедура ЭкспортПП(Команда)

	Рез = ЭкспортППКлиент();
	Если Рез = Истина Тогда
		Рез = ЭкспортППСервер();
	КонецЕсли;	
	
	Если Рез = Истина И ЗначениеЗаполнено(АдресХранилищаФайлаЭкспорт) Тогда
		ПолучитьФайл(АдресХранилищаФайлаЭкспорт, Объект.ИмяФайлаЭкспорт, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПлатежныеПоручения(Команда)
	ПрочитатьСуществующиеПП();	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭкспортПометитьВсе(Команда)
	Для Каждого СтрокаДокумента Из Объект.тчЭкспорт Цикл
		СтрокаДокумента.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭкспортСнятьПометкуСоВсех(Команда)
	Для Каждого СтрокаДокумента Из Объект.тчЭкспорт Цикл
		СтрокаДокумента.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДатаППСПриИзменении(Элемент)
	// перечитываем платежки
	ПрочитатьСуществующиеПП();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПППоПриИзменении(Элемент)
	// перечитываем платежки
	ПрочитатьСуществующиеПП();
КонецПроцедуры

&НаКлиенте
Процедура ТипФайлаЭкспортПриИзменении(Элемент)
	ТипФайлаЭкспортПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КодВБанкеЭкпортПриИзменении(Элемент)
	СформироватьИмяФайла();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЭкспортОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл выгрузки'"));
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЭкспортНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьФайлДанных(Элемент, НСтр("ru='Выберите файл для выгрузки данных из клиента банка'"), ФильтрВыбораФайлаЭкспорт);
КонецПроцедуры

&НаКлиенте
Процедура тчЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура тчЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "тчЭкспортФлаг" Тогда
						
		Элемент.ТекущиеДанные.Флаг = НЕ (Элемент.ТекущиеДанные.Флаг);
		
	ИначеЕсли Поле.Имя = "тчЭкспортСтавкаНДС" Тогда
		
		// даем отредактировать
				
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда 
		
		СтандартнаяОбработка = Ложь;
			
		ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;
КонецПроцедуры
