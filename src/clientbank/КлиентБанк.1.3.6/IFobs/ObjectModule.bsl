Перем ИмяФормата;

// Возвращает Истина, если код в банке есть, Ложь - иначе
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если код в банке есть, Ложь - иначе
//
Функция ЕстьКодВБанке() Экспорт
	Возврат Ложь;
КонецФункции	
	
// Возвращает наименование кода в банке
//
// Параметры:
//
//	нет
//
// Возвращаемое значение:
//
// 	Строка - наименование кода
//
Функция ПолучитьНаименованиеКода() Экспорт
	Возврат "";
КонецФункции		

// Возвращает код банка организации
//
// Параметры:
//
//  Структура Параметры
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка   – код организации в банке
//
Функция кбПолучитьКодОрганизации(Параметры) Экспорт
	Возврат "";
КонецФункции

// Возвращает по имени файла каталог
//
// Параметры:
//
//  Файл - имя файла - строка
//
// Возвращаемое значение:
//
//   Строка – каталог
//
Функция ПолучитьКаталог(Файл)
	Если Файл = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	ИмяФайла = Файл;
	
	Каталог = "";
	поз = Найти(ИмяФайла, "\");
	Пока поз Цикл
		Каталог = Каталог + Лев(ИмяФайла, поз);
		ИмяФайла = Сред(ИмяФайла, поз + 1);
		поз = Найти(ИмяФайла, "\");
	КонецЦикла;	
	Возврат Каталог;
	
КонецФункции	

// Формирует имя файла по умолчанию
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
// 
// Возвращаемое значение:
//
//   имя файла по умолчанию
//
Функция СформироватьИмяФайла(Параметры) Экспорт 
	ИмяФайла = ПолучитьСохраненнуюНастройку("ИмяФайла", Параметры);
	Если Параметры.Режим = "Импорт" Тогда
		Если Параметры.ТипФайла = "DBF" Тогда
			сФайл = Формат(Параметры.Дата, "ДФ=yyMMdd") + ".dbf";
			Каталог = ПолучитьКаталог(ИмяФайла);
			Возврат Каталог + сФайл;
		Иначе	
			Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
				Возврат "Export.xml";
			Иначе
				Возврат ИмяФайла;
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат "Import.dbf";
		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

// Возвращает сохраненный тип файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка – текущий тип файла ("TXT"/"DBF"/"XML")
//
Функция ПолучитьТекущийТипФайла(Параметры) Экспорт
	
	ТипФайла = ПолучитьСохраненнуюНастройку("ТипФайла", Параметры);
	
	Если Параметры.Режим = "Импорт" Тогда
		Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
			Возврат "DBF";
		Иначе
			Возврат ТипФайла;
		КонецЕсли;	
	Иначе 
		// Параметры.Режим = "Экспорт"
		Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
			Возврат "DBF";
		Иначе
			Возврат ТипФайла;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции

// Возвращает сохраненный кодировку файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
//
// Возвращаемое значение:
//
//   Строка – текущая кодировка файла ( "ANSI" / "OEM" )
//
Функция ПолучитьТекущуюКодировкуФайла(Параметры) Экспорт
	
	КодировкаФайла = ПолучитьСохраненнуюНастройку("КодировкаФайла", Параметры);
	
	Если Параметры.Режим = "Импорт" Тогда
		Если НЕ ЗначениеЗаполнено(КодировкаФайла) Тогда
			Возврат "ANSI"; // ANSI (Windows) или OEM (DOS)
		Иначе
			Возврат КодировкаФайла;
		КонецЕсли;	
	Иначе 
		// Параметры.Режим = "Экспорт"
		Если НЕ ЗначениеЗаполнено(КодировкаФайла) Тогда
			Возврат "ANSI"; // ANSI (Windows) или OEM (DOS)
		Иначе
			Возврат КодировкаФайла;
		КонецЕсли;	
	КонецЕсли;	

КонецФункции

// Обработка формата должна вернуть режимы и типы файлов, которая она поддерживает.
//
// Параметры: нет
//
//  Возвращаемое значение:
//
//	Возвращает структуру со следующими ключами:
//
//	Импорт (Истина/Ложь)
//	ИмпортTXT (Истина/Ложь)
//	ИмпортDBF (Истина/Ложь)
//	ИмпортXML (Истина/Ложь)
//	Экспорт (Истина/Ложь)
//	ЭкспортTXT (Истина/Ложь) 
//	ЭкспортDBF (Истина/Ложь)
//	ЭкспортXML (Истина/Ложь)
//
Функция ПолучитьПоддерживаемыеРежимы() Экспорт
	
	ИмпортЭкспорт = Новый Структура;
	ИмпортЭкспорт.Вставить("Импорт", Истина);
	ИмпортЭкспорт.Вставить("ИмпортTXT", Ложь);
	ИмпортЭкспорт.Вставить("ИмпортDBF", Истина);
	ИмпортЭкспорт.Вставить("ИмпортXML", Истина);
	
	ИмпортЭкспорт.Вставить("Экспорт", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортTXT", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортDBF", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортXML", Истина);
	
	Возврат ИмпортЭкспорт;
	
КонецФункции

// Осуществляет импорт выписки из файла типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортTXT(Параметры)
	Возврат Неопределено;	
КонецФункции	

// Осуществляет импорт выписки из файла типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортXML(Параметры)
	
	ФайлXML = Новый ЧтениеXML;
	ИмяФайла = Параметры.ИмяФайла;
	
	Попытка
		ФайлXML.ОткрытьФайл(ИмяФайла);
	Исключение
		Возврат "Ошибка открытия файла " + ИмяФайла;
	КонецПопытки;		
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	КолвоЗаписей = 0;
	Пока ФайлXML.Прочитать() Цикл
		ИмяТега = ФайлXML.Имя; 
		Если ИмяТега = "ROW" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			DOCUMENTTYPEID = Число(ФайлXML.ПолучитьАтрибут("DOCUMENTTYPEID"));  //1-платежное поручение
			
			Если DOCUMENTTYPEID <> 1 Тогда //Проверим на платежное поручение
				Продолжить;
			КонецЕсли;

			
			КодВалюты = ФайлXML.ПолучитьАтрибут("CURRSYMBOLCODE");
			КодВалютыЧислом = СокрЛП(Строка(ФайлXML.ПолучитьАтрибут("CURRENCYID")));
			Если (КодВалюты <> "UAH") И (КодВалютыЧислом <> "980" ) Тогда //Проверим на гривны
				Продолжить;
			КонецЕсли;
			
			ДатаВыписки = ФайлXML.ПолучитьАтрибут("DOCUMENTDATE");  // 20081110 DOCUMENTDATE="20160607" 
			// Проверка на дату выписки
			Если (ДатаВыписки <> Формат(Параметры.ДатаДок,"ДФ=yyyyMMdd")) И (ДатаВыписки <> Формат(Параметры.ДатаДок,"ДФ=dd.MM.yyyy")) Тогда
				Продолжить;
			КонецЕсли;
			
			РСчетА = СокрЛП(ФайлXML.ПолучитьАтрибут("ACCOUNTNO"));
			РСчетБ = СокрЛП(ФайлXML.ПолучитьАтрибут("CORRACCOUNTNO"));
			
			Если РСчетБ = Параметры.РСчет Тогда // дебет
				НовСтрока = тзВыписка.Добавить();
				НовСтрока.Приход		= Число(ФайлXML.ПолучитьАтрибут("SUMMA"))/100;
				НовСтрока.Расход		= 0;
				
				НовСтрока.РСчет			= СокрЛП(Формат(РСчетА,"ЧГ=0"));
					
				НовСтрока.ОКПО			= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("IDENTIFYCODE"),"ЧГ=0"));
				НовСтрока.МФО			= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("BANKID"),"ЧГ=0"));
				НовСтрока.Контрагент	= СокрЛП(ФайлXML.ПолучитьАтрибут("CONTRAGENTSNAME"));
				
			ИначеЕсли РСчетА = Параметры.РСчет Тогда // кредит	
				НовСтрока = тзВыписка.Добавить();
				НовСтрока.Приход		= 0;
				НовСтрока.Расход		= Число(ФайлXML.ПолучитьАтрибут("SUMMA"))/100;
				
				НовСтрока.РСчет			= СокрЛП(Формат(РСчетБ,"ЧГ=0"));
					
				НовСтрока.ОКПО			= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRIDENTIFYCODE"),"ЧГ=0"));
				НовСтрока.МФО			= СокрЛП(Формат(ФайлXML.ПолучитьАтрибут("CORRBANKID"),"ЧГ=0"));
				НовСтрока.Контрагент	= СокрЛП(ФайлXML.ПолучитьАтрибут("CORRCONTRAGENTSNAME"));
			Иначе
				Продолжить;
			КонецЕсли;	
				
			НовСтрока.Содержание 	= СокрЛП(ФайлXML.ПолучитьАтрибут("PLATPURPOSE"));
			НовСтрока.НомерПП 		= СокрЛП(ФайлXML.ПолучитьАтрибут("DOCUMENTNO"));
			
			КолвоЗаписей = КолвоЗаписей + 1;
			
		Иначе
			Продолжить;	
		КонецЕсли;	
		
	КонецЦикла;	  
	
	
	Если НЕ тзВыписка.Количество() Тогда
		Возврат "В текущем файле нет платежей с данной датой выписки и расчетным счетом!";
	КонецЕсли;
	
	ФайлXML.Закрыть();
	
	Возврат тзВыписка;
	
КонецФункции	

// Осуществляет импорт выписки из файла типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортDBF(Параметры)
	
	ФайлDBF = Новый XBase;
	
	ИмяФайла = Параметры.ИмяФайла;
	  	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяФайла,,Истина); //Только для чтения
	Исключение
		Возврат "Ошибка открытия файла " + ИмяФайла;
	КонецПопытки;		
	
	Если НЕ ФайлDBF.Открыта() Тогда
		Возврат "Ошибка открытия файла " + ИмяФайла;
	КонецЕсли;
	
	ФайлDBF.Кодировка = КодировкаXBase[Параметры.КодировкаФайла];
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	ФайлDBF.Первая();
	Пока НЕ ФайлDBF.ВКонце() Цикл
		// проверка на дату платежа
		Если ФайлDBF.DAT <> Параметры.ДатаДок И ФайлDBF.DAT_PR <> Параметры.ДатаДок Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;	
		
		// проверка на валюту
		Попытка
		Если СокрЛП(ФайлDBF.KOD_VAL) <> "980" Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;	
		Исключение
		КонецПопытки;
		
		// проверка на совпадение расчетного счета
		Если СокрЛП(Формат(ФайлDBF.RR_DB, "ЧГ=0")) = Параметры.РСчет Тогда  // Расход
			НовСтрока = тзВыписка.Добавить();
			НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.RR_K,"ЧГ=0"));
			НовСтрока.МФО 			= СокрЛП(Формат(ФайлDBF.MFO_CR,"ЧГ=0"));
 			НовСтрока.ОКПО			= СокрЛП(Формат(ФайлDBF.OKPO_CR,"ЧГ=0"));
			НовСтрока.Контрагент	= СокрЛП(ФайлDBF.NAIM_K);
			НовСтрока.Приход		= 0;
            НовСтрока.Расход		= ФайлDBF.SUM;
		ИначеЕсли СокрЛП(Формат(ФайлDBF.RR_K, "ЧГ=0")) = Параметры.РСчет Тогда  // Приход
			НовСтрока = тзВыписка.Добавить();
			НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.RR_DB,"ЧГ=0"));
			НовСтрока.МФО 			= СокрЛП(Формат(ФайлDBF.MFO_DB,"ЧГ=0"));
 			НовСтрока.ОКПО			= СокрЛП(Формат(ФайлDBF.OKPO_DB,"ЧГ=0"));
			НовСтрока.Контрагент	= СокрЛП(ФайлDBF.NAIM_D);
			НовСтрока.Приход		= ФайлDBF.SUM;
            НовСтрока.Расход		= 0;
		Иначе	
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		НовСтрока.Содержание 	= СтрЗаменить(ФайлDBF.PRIZN,Символы.ПС," ");
		НовСтрока.НомерПП	 	= СокрЛП(Формат(ФайлDBF.N_DOC,"ЧГ=0"));
		ФайлDBF.Следующая();
	КонецЦикла;	
	
	Если НЕ тзВыписка.Количество() И ФайлDBF.КоличествоЗаписей() Тогда
		Возврат "В текущем файле нет платежей с данной датой выписки и расчетным счетом!";
	КонецЕсли;
	
	ФайлDBF.ЗакрытьФайл();
	
	Возврат тзВыписка;
	
КонецФункции	

// Осуществляет импорт выписки из файла
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортВыписки(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ИмпортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ИмпортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ИмпортXML(Параметры);
	КонецЕсли;	
КонецФункции

Функция ВыровнятьВправо(Стр, Длина, Символ = " ")
	СтрокаПробелов 	= "                                                                ";
	СтрокаНулей 	= "0000000000";
	Если Символ = " " Тогда
		Строка = СтрокаПробелов;
	Иначе
		Строка = СтрокаНулей;
	КонецЕсли;	
	Стр = СокрЛП(Строка(Стр));
	ДлинаСтр = СтрДлина(Стр);
	Стр = Лев(Строка,Длина - ДлинаСтр) + Стр;
	
	Возврат Лев(Стр, Длина); // обрезаем строку, если ее длинна больше допустимой
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортTXT(Параметры)
	// BOL формат
	Текст = Новый ТекстовыйДокумент;
	СтрокаПробелов 	= "                                                                                                                                                                                                ";
	
	Для Каждого Строка из Параметры.тзПлатежныеПоручения Цикл
		
		ТекСтрока = ВыровнятьВправо(Параметры.НашМФО, 9); //1-9
		ТекСтрока = ТекСтрока + ВыровнятьВправо(Параметры.НашСчет, 14); //10-23
		ТекСтрока = ТекСтрока + ВыровнятьВправо(Строка.МФО, 9); //24-32
		ТекСтрока = ТекСтрока + ВыровнятьВправо(Строка.Счет, 14); //33-46
		ТекСтрока = ТекСтрока + "1"; // тип операции //47-47
		ТекСтрока = ТекСтрока + ВыровнятьВправо(Формат(Строка.Сумма*100, "ЧН=0;ЧГ=0"),16); //48-63
		ТекСтрока = ТекСтрока + ВыровнятьВправо("1", 2); // Вид платежа - 1 - платежка, 6 - мемориальный ордер //64-65
		ТекСтрока = ТекСтрока + Лев(Строка.НомерПП + СтрокаПробелов, 10); //66-75
		ТекСтрока = ТекСтрока + "980"; //76-78
		ТекСтрока = ТекСтрока + Формат(Строка.ДатаПП,"ДФ=yyMMdd"); //79-84
		ТекСтрока = ТекСтрока + Лев("" + СтрокаПробелов, 6); // Дата получения документа в банке //85-90
		ТекСтрока = ТекСтрока + Лев(Параметры.НашаФирма + СтрокаПробелов, 38); //91-128
		ТекСтрока = ТекСтрока + Лев(Строка.Контрагент + СтрокаПробелов, 38); //129-166
		ТекСтрока = ТекСтрока + Лев(Строка.Содержание + СтрокаПробелов, 160); //167-326
		
		// ТекСтрока = ТекСтрока + Формат("#o"+Сп.Получить("ОКПО"), "с60"); //Дополнительные реквизиты
		
		// теперь просто пустота, ОКПО скорей всего ушло в поле 
		// № 15, "Дополнительные реквизиты". В этом поле указывается код страны 
		// плательшика/получателя если плательшик/получатель 
		// является не резидентом в следующем формате: 
		// #nП764О018#, ("П" и "О" русские заглавные символы) 
		// где "764" - код страны плательщика, "018" - код страны получателя. 
		ТекСтрока = ТекСтрока + Лев("" + СтрокаПробелов, 60); //Дополнительные реквизиты //327-386
		
		// № 16, "Код назначения платежа". 
		// Следует указывать код "070" для платежей в бюджет 
		// и оставлять поле пустым для всех прочих платежей		
		ТекСтрока = ТекСтрока + Лев(Строка.НомерПП + СтрокаПробелов, 5); //Код назначения платежа и еще что-то (поля №16-17) //387-389 //390-391
		ТекСтрока = ТекСтрока + Лев(Параметры.НашОКПО + СтрокаПробелов, 14); //392-405
		// ТекСтрока = ТекСтрока + Формат("", "с187");
		ТекСтрока = ТекСтрока + Лев(Строка.ОКПО + СтрокаПробелов, 14); //406-419
		ТекСтрока = ТекСтрока + Лев("" + СтрокаПробелов, 173); //420-428...
		
		Текст.ДобавитьСтроку(ТекСтрока);			
	
	КонецЦикла;          
	
	ИмяФайла = Параметры.ИмяФайла;	
	Попытка
		Текст.Записать(ИмяФайла, КодировкаТекста[Параметры.КодировкаФайла]);
	Исключение
		Возврат "Ошибка записи файла " + ИмяФайла;
	КонецПопытки;		
	
	Возврат Истина;
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортXML(Параметры)
	
	ИмяФайла = 	Параметры.ИмяФайла;
	
	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.ОткрытьФайл(ИмяФайла,"WINDOWS-1251");

	ЗаписьXML.ЗаписатьОбъявлениеXML();  // Записываем объявление XML

	ЗаписьXML.ЗаписатьНачалоЭлемента("ROWDATA"); // Начало элемента ROWDATA

	Для Каждого Строка из Параметры.тзПлатежныеПоручения Цикл  // Начинаем выгружать платежи

		ЗаписьXML.ЗаписатьНачалоЭлемента("ROW"); // Начало элемента ROW
		
		//AMOUNT	Сумма платежа в копейках	Целое число
		ЗаписьXML.ЗаписатьАтрибут("AMOUNT",Формат(Число(Строка.Сумма)*100,"ЧГ=0"));
		//CORRSNAME	Наименование получателя платежа	 -
		ЗаписьXML.ЗаписатьАтрибут("CORRSNAME",Строка.Контрагент);
		//DETAILSOFPAYMENT	Назначение платежа	 -
		ЗаписьXML.ЗаписатьАтрибут("DETAILSOFPAYMENT",Строка.Содержание);
		//CORRACCOUNTNO	№ счета получателя платежа	 -
		ЗаписьXML.ЗаписатьАтрибут("CORRACCOUNTNO",Строка.Счет);
		//ACCOUNTNO	№ счета плательщика	 -
		ЗаписьXML.ЗаписатьАтрибут("ACCOUNTNO",Параметры.НашСчет);
		//CORRBANKID	Код банка получателя платежа (МФО)	 -
		ЗаписьXML.ЗаписатьАтрибут("CORRBANKID",Строка.МФО);
		//CORRIDENTIFYCODE	Идентификационный код получателя платежа(ЕГРПОУ)	 -
		ЗаписьXML.ЗаписатьАтрибут("CORRIDENTIFYCODE",Строка.ОКПО);
		//CORRCOUNTRYID	Код страны корреспондента	При отсутствии автоматически выбирается Украина (804)
		ЗаписьXML.ЗаписатьАтрибут("CORRCOUNTRYID","804");
		//DOCUMENTNO	№ документа	Если номер не указан, будет использоваться автонумерация
		ЗаписьXML.ЗаписатьАтрибут("DOCUMENTNO",Строка.НомерПП);
		//VALUEDATE	Дата валютирования	 -
		ЗаписьXML.ЗаписатьАтрибут("VALUEDATE",Формат(Строка.ДатаПП,"ДФ=yyyyMMdd"));
		//PRIORITY	Приоритет	По умолчанию 50
		ЗаписьXML.ЗаписатьАтрибут("PRIORITY","50");
		//DOCUMENTDATE	Дата документа	ГГГГММДД
		ЗаписьXML.ЗаписатьАтрибут("DOCUMENTDATE",Формат(Строка.ДатаПП,"ДФ=yyyyMMdd"));
		//ADDENTRIES	Дополнительные реквизиты платежа	-
		ЗаписьXML.ЗаписатьАтрибут("ADDENTRIES","");
		//PURPOSEPAYMENTID	Код назначения платежа	 Целое 3-значное число
		ЗаписьXML.ЗаписатьАтрибут("PURPOSEPAYMENTID","");
		//BANKID	Код банка плательщика (МФО)	-
		ЗаписьXML.ЗаписатьАтрибут("BANKID",Параметры.НашМФО);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента ROW

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента ROWDATA
	
	Возврат Истина;
	
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортDBF(Параметры)
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase[Параметры.КодировкаФайла];
	
	ФайлDBF.Поля.Добавить("A","C",80,0);
	ФайлDBF.Поля.Добавить("B","C",80,0);
	ФайлDBF.Поля.Добавить("ACCOUNT_A","C",14,0);
	ФайлDBF.Поля.Добавить("ACCOUNT_B","C",14,0);
	ФайлDBF.Поля.Добавить("MFO_A","C",9,0);
	ФайлDBF.Поля.Добавить("MFO_B","C",9,0);
	ФайлDBF.Поля.Добавить("OKPO_A","C",14,0);
	ФайлDBF.Поля.Добавить("OKPO_B","C",14,0);
	ФайлDBF.Поля.Добавить("BANK_A","C",38,0);
	ФайлDBF.Поля.Добавить("BANK_B","C",38,0);
	ФайлDBF.Поля.Добавить("AMOUNT","N",18,2);
	ФайлDBF.Поля.Добавить("NUMBER","C",12,0);
	ФайлDBF.Поля.Добавить("DETAILS","C",160,0);
	ФайлDBF.Поля.Добавить("DAY",3,8,0);  // Не описан в формате IFobs(ОТП банк), но есть у других
	
	// дополнено
	ФайлDBF.Поля.Добавить("CITY_A","N",3,0);
	ФайлDBF.Поля.Добавить("CITY_B","N",3,0);
	ФайлDBF.Поля.Добавить("GUILTY","C",160,0);
	ФайлDBF.Поля.Добавить("DETAILS_T","C",160,0);
	
	Попытка
		ФайлDBF.СоздатьФайл(Параметры.ИмяФайла);
	Исключение
		Возврат "Ошибка создания файла " + Параметры.ИмяФайла;
	КонецПопытки;		
	
	Для Каждого Строка из Параметры.тзПлатежныеПоручения Цикл
		ФайлDBF.Добавить();
		
		ФайлDBF.ACCOUNT_A	= Параметры.НашСчет;
		ФайлDBF.MFO_A		= Параметры.НашМФО;
		ФайлDBF.OKPO_A		= Параметры.НашОКПО;
		ФайлDBF.BANK_A		= Параметры.НашБанк;
		ФайлDBF.A			= Параметры.НашаФирма;
		
		ФайлDBF.MFO_B	 	= Строка.МФО;
		ФайлDBF.ACCOUNT_B	= Строка.Счет;
		ФайлDBF.OKPO_B		= Строка.ОКПО;
		ФайлDBF.B			= Строка.Контрагент;
		ФайлDBF.AMOUNT		= Строка.Сумма;
		ФайлDBF.NUMBER		= Строка.НомерПП;
		ФайлDBF.DAY			= Строка.ДатаПП;
		ФайлDBF.BANK_B		= Строка.Банк;
		
		ФайлDBF.DETAILS		= Строка.Содержание;
		
		// дополнено
		ФайлDBF.CITY_A		= 804;
		ФайлDBF.CITY_B		= 804;
		ФайлDBF.DETAILS_T 	= Строка.Содержание;
		
		ФайлDBF.Записать();
	КонецЦикла;
	ФайлDBF.ЗакрытьФайл();
	
	Возврат Истина;
КонецФункции

// Осуществляет экспорт платежных поручений в файл
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортПлатежныхПоручений(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ЭкспортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ЭкспортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ЭкспортXML(Параметры);
	КонецЕсли;	
		
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) после импорта. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаИмпорта() Экспорт
	Возврат Истина;
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) перед экспортом. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаЭкспорта() Экспорт
	Возврат Ложь;
КонецФункции

// Формирует имя файла по умолчанию
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
//		Ключ РСчет - Расчетный счет
// 
// Возвращаемое значение:
//
//   имя файла по умолчанию
//
Функция СформироватьФильтрВыбораФайла(Параметры) Экспорт 
	Если Параметры.ТипФайла = "TXT" Тогда
		Возврат НСтр("ru = 'Текстовые файлы (*.*)|*.*'");
	ИначеЕсли Параметры.ТипФайла = "DBF" Тогда
		Возврат НСтр("ru='Файлы dBase (*.dbf)|*.dbf'");
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат НСтр("ru='XML файлы (*.xml)|*.xml'");
	Иначе	
		Возврат НСтр("ru='Все файлы (*.*)|*.*'");
	КонецЕсли;	
КонецФункции

Функция ПолучитьСохраненнуюНастройку(ИмяНастройки, Параметры) Экспорт
	
	Если ИмяНастройки = "КодировкаФайла" Тогда
		
		ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим;
		Настройки = ХранилищеСистемныхНастроек.Загрузить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек);
	
		Если Настройки <> Неопределено Тогда
			Возврат Настройки.Получить(ИмяНастройки + ИмяКлючаНастроек);
		КонецЕсли;	
		
	ИначеЕсли ИмяНастройки = "ТипФайла" Тогда
		
		ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим;
		Настройки = ХранилищеСистемныхНастроек.Загрузить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек);
	
		Если Настройки <> Неопределено Тогда
			Возврат Настройки.Получить(ИмяНастройки + ИмяКлючаНастроек);
		КонецЕсли;	
		
	ИначеЕсли ИмяНастройки = "КодВБанке" Тогда
		
		ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим;
		Настройки = ХранилищеСистемныхНастроек.Загрузить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек);
	
		Если Настройки <> Неопределено Тогда
			Возврат Настройки.Получить(ИмяНастройки + ИмяКлючаНастроек);
		КонецЕсли;	
		
	ИначеЕсли ИмяНастройки = "ИмяФайла" Тогда
		
		ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим + Параметры.ТипФайла;
		Настройки = ХранилищеСистемныхНастроек.Загрузить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек);
	
		Если Настройки <> Неопределено Тогда
			Возврат Настройки.Получить(ИмяНастройки + ИмяКлючаНастроек);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Сохраняет настройки 
Процедура СохранитьНастройки(Параметры) Экспорт
	
	Настройки = Новый Соответствие;
	ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим;
	Настройки.Вставить("ТипФайла" 		+ ИмяКлючаНастроек, Параметры.ТекущийТипФайла);
	Настройки.Вставить("КодировкаФайла" + ИмяКлючаНастроек, Параметры.КодировкаФайла);
	Настройки.Вставить("КодВБанке" 		+ ИмяКлючаНастроек, Параметры.КодВБанке);
	ХранилищеСистемныхНастроек.Сохранить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек, Настройки);
	
	Настройки = Новый Соответствие;
	ИмяКлючаНастроек = ИмяФормата + Параметры.Организация + Параметры.Режим + Параметры.ТекущийТипФайла;
	Настройки.Вставить("ИмяФайла" 		+ ИмяКлючаНастроек, Параметры.ТекущееИмяФайла);
	ХранилищеСистемныхНастроек.Сохранить("ВнешняяОбработка.КлиентБанк2/ОбработкаФормата", "КлиентБанк2" + ИмяКлючаНастроек, Настройки);
	
КонецПроцедуры // СохранитьНастройкиФормы()

//ИмяФормата = "IFOBS";
ИмяФормата = Метаданные().Имя;