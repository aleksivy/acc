// (С) АБИ Украина 2004

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мБанкСчет;
Перем мОрганизация;

Перем ФормаОбработкиФормата;               // форма внешней обработки формата
Перем СтатусыСтрокИмпорта;

Перем ТипСортировки;

Перем НадоОбновитьТекущуюСтроку;
Перем НомерНовойТекущейСтроки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура вызывается при любом изменении формы обработки формата
//
// Параметры: нет
//
//
Процедура ПриИзмененииФормыОбработки()
	
	// узнать новые - есть ли код банка, наименование кода банка, код банка, имя файла, типы файлов
	
	Если ФормаОбработкиФормата = Неопределено Тогда
		// все надо очистить
		ИмяФайлаИмпорт = "";
		ЭлементыФормы.ИмяФайлаИмпорт.Доступность 	= Ложь;
		ИмяФайлаЭкспорт = "";
		ЭлементыФормы.ИмяФайлаЭкспорт.Доступность 	= Ложь;
		ТипФайлаИмпорт = Неопределено;
		ЭлементыФормы.ТипФайлаИмпорт.Доступность 	= Ложь;
		ТипФайлаЭкспорт = Неопределено;
		ЭлементыФормы.ТипФайлаЭкспорт.Доступность	= Ложь;
		КодВБанке = "";
		ЭлементыФормы.КодВБанкеИмпорт.Доступность 	= Ложь;
		ЭлементыФормы.КодВБанкеЭкспорт.Доступность 	= Ложь;
		//ЭлементыФормы.тпИмпорт.Доступность 			= Ложь;
		//ЭлементыФормы.тпЭкспорт.Доступность 		= Ложь;
		
		КодировкаФайлаИмпорт = Неопределено;
		ЭлементыФормы.КодировкаФайлаИмпорт.Доступность 	= Ложь;
		
		Возврат;
	Иначе
		ЭлементыФормы.ИмяФайлаИмпорт.Доступность 	= Истина;
		ЭлементыФормы.ИмяФайлаЭкспорт.Доступность 	= Истина;
		ЭлементыФормы.ТипФайлаИмпорт.Доступность 	= Истина;
		ЭлементыФормы.ТипФайлаЭкспорт.Доступность 	= Истина;
		ЭлементыФормы.КодВБанкеИмпорт.Доступность 	= Истина;
		ЭлементыФормы.КодВБанкеЭкспорт.Доступность 	= Истина;
		ЭлементыФормы.тпИмпорт.Доступность 			= Истина;
		ЭлементыФормы.тпЭкспорт.Доступность 		= Истина;
		
		ЭлементыФормы.КодировкаФайлаИмпорт.Доступность 	= Истина;
		
	КонецЕсли;
	
	СписокКодировокФайлов = Новый СписокЗначений;
	СписокКодировокФайлов.Добавить("ANSI", 	"Windows");
	СписокКодировокФайлов.Добавить("OEM", 	"DOS");
	
	// запрос к обработке формата на поддерживаемые форматы обмена
	ПоддерживаемыеФорматы = ФормаОбработкиФормата.ПолучитьПоддерживаемыеРежимы();
	
	Если ПоддерживаемыеФорматы.Импорт Тогда
		ЭтаФорма.Панель.Страницы.СтраницаИмпорт.Видимость = Истина;
		
		// заполняем список типов файлов
		СписокТиповФайлов = Новый СписокЗначений;
		ВсегоТипов = 0;
		Если ПоддерживаемыеФорматы.ИмпортTXT Тогда
			СписокТиповФайлов.Добавить("TXT", "Текстовые файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ИмпортDBF Тогда
			СписокТиповФайлов.Добавить("DBF", "DBF файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ИмпортXML Тогда
			СписокТиповФайлов.Добавить("XML", "XML файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		
		Если ВсегоТипов = 1 Тогда
			// он всего один, выбирать не из чего, установим недоступность
			ЭлементыФормы.ТипФайлаИмпорт.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ТипФайлаИмпорт.Доступность = Истина;
		КонецЕсли;
		
		// запрос к обработке формата на текущий тип файла импорта
		Параметры = Новый Структура();
		Параметры.Вставить("Режим", "Импорт");
		Параметры.Вставить("Организация", Организация);
		ТекущийТипФайлаИмпорта = ФормаОбработкиФормата.ПолучитьТекущийТипФайла(Параметры);
		
		// список для выбора в ЭлементыФормы.ТипФайлаИмпорт
		ЭлементыФормы.ТипФайлаИмпорт.СписокВыбора = СписокТиповФайлов;
		
		// установим тип файла импорта 
		ТипФайлаИмпорт = ТекущийТипФайлаИмпорта;
		
		// список для выбора в ЭлементыФормы.КодировкаФайлаИмпорт
		ЭлементыФормы.КодировкаФайлаИмпорт.СписокВыбора = СписокКодировокФайлов;
		
		// запрос к обработке формата на текущий тип файла импорта
		Параметры = Новый Структура();
		Параметры.Вставить("Режим", "Импорт");
		Параметры.Вставить("Организация", Организация);
		//////ТекущаяКодировкаФайлаИмпорта = ФормаОбработкиФормата.ПолучитьТекущуюКодировкуФайла(Параметры);
		//////
		//////КодировкаФайлаИмпорт = ТекущаяКодировкаФайлаИмпорта;
		
	Иначе
		// импорт не поддерживается, сделаем невидимой страницу
		ЭтаФорма.Панель.Страницы.СтраницаИмпорт.Видимость = Ложь;
	КонецЕсли;
	
	Если ПоддерживаемыеФорматы.Экспорт Тогда
		ЭтаФорма.Панель.Страницы.СтраницаЭкспорт.Видимость = Истина;
		
		// заполняем список типов файлов
		СписокТиповФайлов = Новый СписокЗначений;
		ВсегоТипов = 0;
		Если ПоддерживаемыеФорматы.ЭкспортTXT Тогда
			СписокТиповФайлов.Добавить("TXT", "Текстовые файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ЭкспортDBF Тогда
			СписокТиповФайлов.Добавить("DBF", "DBF файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ПоддерживаемыеФорматы.ЭкспортXML Тогда
			СписокТиповФайлов.Добавить("XML", "XML файлы");
			ВсегоТипов = ВсегоТипов + 1;
		КонецЕсли;
		Если ВсегоТипов = 1 Тогда
			// он всего один, выбирать не из чего, установим недоступность
			ЭлементыФормы.ТипФайлаЭкспорт.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ТипФайлаЭкспорт.Доступность = Истина;
		КонецЕсли;	
		// запрос к обработке формата на текущий тип файла импорта
		Параметры = Новый Структура();
		Параметры.Вставить("Режим", "Экспорт");
		Параметры.Вставить("Организация", Организация);
		ТекущийТипФайлаЭкспорта = ФормаОбработкиФормата.ПолучитьТекущийТипФайла(Параметры);
		
		// список для выбора в ЭлементыФормы.ТипФайлаЭкспорт
		ЭлементыФормы.ТипФайлаЭкспорт.СписокВыбора = СписокТиповФайлов;
		
		// установим тип файла Экспорта
		ТипФайлаЭкспорт = ТекущийТипФайлаЭкспорта;
		
		// список для выбора в ЭлементыФормы.КодировкаФайлаЭкспорт
		ЭлементыФормы.КодировкаФайлаЭкспорт.СписокВыбора = СписокКодировокФайлов;
		
		// запрос к обработке формата на текущий тип файла экспорта
		Параметры = Новый Структура();
		Параметры.Вставить("Режим", "Экспорт");
		Параметры.Вставить("Организация", Организация);
		//////ТекущаяКодировкаФайлаЭкспорта = ФормаОбработкиФормата.ПолучитьТекущуюКодировкуФайла(Параметры);
		//////
		//////КодировкаФайлаЭкспорт = ТекущаяКодировкаФайлаЭкспорта;
		
	Иначе
		// экспорт не поддерживается, не отображаем эту страницу
		ЭтаФорма.Панель.Страницы.СтраницаЭкспорт.Видимость = Ложь;
	КонецЕсли;
	
	// запрос к обработке формата на имя файла импорта и наименование (файл или каталог)
	ЭтоКаталог = Ложь;
	Попытка 
		ЭтоКаталог = ФормаОбработкиФормата.ФайлИмпортаКаталог();
	Исключение
		
	КонецПопытки;
	
	Если ЭтоКаталог Тогда
		ЭлементыФормы.НадписьИмяФайлаИмпорта.Значение = НСтр("ru='Имя каталога импорта:';uk='Ім''я каталогу імпорту:'");
	Иначе
		ЭлементыФормы.НадписьИмяФайлаИмпорта.Значение = НСтр("ru='Имя файла импорта:';uk='Ім''я файлу імпорту:'");
	КонецЕсли; 
	
	// запрос к обработке формата на имя файла экспорта и наименование (файл иили каталог)
	ЭтоКаталог = Ложь;
	Попытка 
		ЭтоКаталог = ФормаОбработкиФормата.ФайлЭкспортаКаталог();
	Исключение
		
	КонецПопытки;
	
	Если ЭтоКаталог Тогда
		ЭлементыФормы.НадписьИмяФайлаЭкспорта.Значение = НСтр("ru='Имя каталога экспорта:';uk='Ім''я каталогу експорту:'");
	Иначе
		ЭлементыФормы.НадписьИмяФайлаЭкспорта.Значение = НСтр("ru='Имя файла экспорта:';uk='Ім''я файла експорту:'");
	КонецЕсли; 
	
	// запрос к обработке на код в банке 
	ЕстьКодВБанке = ФормаОбработкиФормата.ЕстьКодВБанке();
	
	Если ЕстьКодВБанке Тогда
		
		// устанавливаем доступность и видимость для элементов формы
		// читаем наименование кода и собственно код
		
		НаименованиеКодаВБанке = ФормаОбработкиФормата.ПолучитьНаименованиеКода();
		
		ЭлементыФормы.НадписьКодБанкаИмпорт.Значение = НаименованиеКодаВБанке;
		ЭлементыФормы.НадписьКодБанкаИмпорт.Доступность = Истина;
		ЭлементыФормы.НадписьКодБанкаИмпорт.Видимость = Истина;
		
		ЭлементыФормы.КодВБанкеИмпорт.Доступность = Истина;
		ЭлементыФормы.КодВБанкеИмпорт.Видимость = Истина;
		
		ЭлементыФормы.НадписьКодБанкаЭкспорт.Значение = НаименованиеКодаВБанке;
		ЭлементыФормы.НадписьКодБанкаЭкспорт.Доступность = Истина;
		ЭлементыФормы.НадписьКодБанкаЭкспорт.Видимость = Истина;
		
		ЭлементыФормы.КодВБанкеЭкспорт.Доступность = Истина;
		ЭлементыФормы.КодВБанкеЭкспорт.Видимость = Истина;
		
		Параметры = Новый Структура;
		
		Параметры.Вставить("Организация", Организация); // организация
		КодВБанке = ФормаОбработкиФормата.кбПолучитьКодОрганизации(Параметры);
		
		Если КодВБанке <> Неопределено И КодВБанке <> "" Тогда
			СформироватьИмяФайла();
		Иначе	
			ИмяФайлаИмпорт 	= "";
			ИмяФайлаЭкспорт = "";
		КонецЕсли;	
		
	Иначе
		// снимаем доступность и видимость для элементов формы, очищаем код в банке
		
		ЭлементыФормы.НадписьКодБанкаИмпорт.Доступность = Ложь;
		ЭлементыФормы.НадписьКодБанкаИмпорт.Видимость = Ложь;
		
		ЭлементыФормы.КодВБанкеИмпорт.Доступность = Ложь;
		ЭлементыФормы.КодВБанкеИмпорт.Видимость = Ложь;
		
		ЭлементыФормы.НадписьКодБанкаЭкспорт.Доступность = Ложь;
		ЭлементыФормы.НадписьКодБанкаЭкспорт.Видимость = Ложь;
		
		ЭлементыФормы.КодВБанкеЭкспорт.Доступность = Ложь;
		ЭлементыФормы.КодВБанкеЭкспорт.Видимость = Ложь;
		
		КодВБанке = "";
		
		СформироватьИмяФайла();
		
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииФормыОбработки()

// Процедура - обработчик события "ПриИзменении" поля ввода "ФорматОбмена". 
// При изменении формата необходимо изменить обработку формата 
// 
Процедура ПриИзмененииФорматаОбмена()
	
	Если ФорматОбмена <> Неопределено Тогда
		ИмяФайлаОбработкиФормата = сооФорматИмяФайлаОбработкиФормата[ФорматОбмена];
		Если ИмяФайлаОбработкиФормата = Неопределено Тогда
			ФормаОбработкиФормата = Неопределено;
			ПриИзмененииФормыОбработки();
			Возврат;
		КонецЕсли;
		Если СуществуетФайл(ИмяФайлаОбработкиФормата) Тогда
			Попытка
				ФормаОбработкиФормата = ВнешниеОбработки.ПолучитьФорму(ИмяФайлаОбработкиФормата,"Форма",ЭтаФорма);
			Исключение
				Сообщить(НСтр("ru = 'Ошибка открытия обработки '; uk = 'Помилка відкриття обробки '") + ИмяФайлаОбработкиФормата);
				ФормаОбработкиФормата = Неопределено;
			КонецПопытки;	
		Иначе
			ФормаОбработкиФормата = Неопределено;
		КонецЕсли;
		ПриИзмененииФормыОбработки();
	Иначе
		ФормаОбработкиФормата = Неопределено;
		ПриИзмененииФормыОбработки();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФорматаОбмена()

// Заполняет реквизиты формы из структуры НастройкиОбработки
Процедура ЗаполнитьИзНастроек()
	Если Не ЗначениеЗаполнено(Организация) Тогда Организация = НастройкиОбработки.ОрганизацияПоУмолчанию; КонецЕсли;
	 
	ТипСортировки = НастройкиОбработки.ТипСортировки;
	
	// здесь также меняется формат, загружается форма обработки формата
	// устанавливаются имена и типы файлов импорта/экспорта. 
	//БанковскийСчетПриИзменении(ЭлементыФормы.Счет);
	ПриИзмененииБанковскогоСчета();
	
	// мог поменятся порядок сортировки, отсортируем таблицу
	СортировкаТчИмпорт();
	
	//Если Конфигурация = "УПП" Или Конфигурация = "УТ" Тогда
	//	ДлинаНомераДокументов = 8;
	//Иначе	
		ДлинаНомераДокументов = 11;
	//КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьИзНастроек()	

// В зависимости от параметров обработки проводит автоматический импорт платежей 
// или автоматическое заполнение таблицы экспорта
// 
// Параметры: нет
//
//
Процедура АвтоИмпортЭкспорт()
	// если автоимпорт - делаем его 
	
	Если НастройкиОбработки.АвтоИмпортВыписок Тогда
		ИмпортВыписки();
	КонецЕсли; 
	
	// если автозаполнение экспорта - заполним таблицу экспорта
	
	Если НастройкиОбработки.АвтоЗаполнениеТаблицыЭкспорта Тогда
		ПрочитатьСуществующиеПП();
	КонецЕсли;
	
КонецПроцедуры // АвтоИмпортЭкспорт()
 
// Проверяем, что выбраны организация, счет, дата выписки не пустая
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолей()
	
	Если ДатаВыписки = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указана дата выписки!';uk='Не вказана дата виписки!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	//Если Счет.Пустая() Тогда
	//	Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолей()	

// Открывает файл ИмяФайла через ЗапуститьПриложение
// проверяется наличие файла
//
// Параметры:
//
//  ИмяФайла  – строка – имя отурываемого файла
//
Процедура ОткрытьФайл(ИмяФайла)
//	Если СуществуетФайл(ИмяФайла) Тогда
		ЗапуститьПриложение(ИмяФайла);
//	КонецЕсли; 
КонецПроцедуры // ОткрытьФайл()

Процедура СформироватьИмяФайла()
	// формируем имя файлов импорт/экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Режим", "Импорт"); 
	Параметры.Вставить("Дата", ДатаВыписки); // дата выписки, если импорт 
	Параметры.Вставить("Организация", Организация); // организация 
	Параметры.Вставить("РСчет", СокрЛП(Счет.НомерСчета)); // Расчетный счет
	Параметры.Вставить("КодВБанке", КодВБанке); // если есть 
	Параметры.Вставить("ТипФайла", ТипФайлаИмпорт);
	ИмяФайлаИмпорт = ФормаОбработкиФормата.СформироватьИмяФайла(Параметры);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Режим", "Экспорт");
	Параметры.Вставить("Дата", ДатаППС); // дата начала периода, если экспорт
	Параметры.Вставить("Организация", Организация); // организация
	Параметры.Вставить("РСчет", СокрЛП(Счет.НомерСчета)); // Расчетный счет
	Параметры.Вставить("КодВБанке", КодВБанке); // если есть 
	Параметры.Вставить("ТипФайла", ТипФайлаЭкспорт);
	ИмяФайлаЭкспорт = ФормаОбработкиФормата.СформироватьИмяФайла(Параметры);
	
КонецПроцедуры	

// Процедура выполняет действия при изменении банковского счета
// 
Процедура ПриИзмененииБанковскогоСчета()
	
	// очистим таблицы 
	тчИмпорт.Очистить();
	тчЭкспорт.Очистить();
	
	
	// Проверить заполнение полей "импорт"
	Если НЕ ПроверитьЗаполнениеПолей() Тогда
		Возврат;
	КонецЕсли;	
	
	// Проверить заполнение полей "экспорт"
	Если НЕ ПроверитьЗаполнениеПолейЭкспорт() Тогда
		Возврат;
	КонецЕсли;	
	
	// загрузим старые платежи и платежки
	ПрочитатьСуществующиеПлатежи();
	ПрочитатьСуществующиеПП();
	
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		НадписьБанк = "";
		ФорматОбмена = Неопределено;
		ИмяФайлаИмпорт = "";
		ТипФайлаИмпорт = Неопределено;
	Иначе
		// перерисуем информационную надпись
		НадписьБанк = НСтр("ru='№ счета: ';uk='№ рахунку: '") + СокрЛП(Строка(Счет.НомерСчета)) + ", Банк: " + Строка(Счет.Банк) + ", МФО: " + Строка(Счет.Банк.Код);
		// прочитаем формат обмена
		ФорматОбмена = сооМФОФормат[СокрЛП(Счет.Банк.Код)];
		ПриИзмененииФорматаОбмена();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииБанковскогоСчета()	

////////////////////////////////////////////////////////////////////////////////
// Закладка "Импорт выписки"

// Проверяет заполнение всех полей для импорта выписки
// 
// Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
// дата, организация, расчетный счет, формат обмена, тип файла
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены все поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейДляИмпорта()
	
	Если ПустаяСтрока(ИмяФайлаИмпорт) Тогда
		Предупреждение(НСтр("ru='Не указано имя файла для импорта выписки!';uk='Не вказано ім''я файлу імпорту виписки!'"));
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ СуществуетФайл(ИмяФайлаИмпорт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ФормаОбработкиФормата = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаВыписки = '00010101000000' Тогда
		Предупреждение(НСтр("ru='Не указана дата выписки!';uk='Не вказана дата виписки!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	//Если Счет.Пустая() Тогда
	//	Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ФорматОбмена = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипФайлаИмпорт = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан тип файла для импорта с системы Клиент-Банк!';uk='Не вказаний тип файлу для імпорту із системи Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейДляИмпорта()	

// Очищает в тчИмпорт все платежи, кроме существующих
//
// Параметры:
//
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОчиститьНесуществующиеПлатежи()
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из тчИмпорт Цикл
		Если Строка.Статус <> СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);			
		КонецЕсли; 
	КонецЦикла; 
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		тчИмпорт.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНесуществующиеПлатежи()
 
// Импорт выписки 
//
// Параметры: нет
//
//
Процедура ИмпортВыписки()
	
	// очищаем с таблицы все, кроме существующих платежей
	// проверим, что таблица не пустая и не все уже существующие - тогда и лишнего вопроса
	// задавать не надо
	
	Рез = 0;
	Для Каждого Строка Из тчИмпорт Цикл
		Если Строка.Статус <> СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
			Рез = 1;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Рез = 1 Тогда
		ТекстВопроса = НСтр("ru='Будут удалены все платежи, кроме существующих. Продолжить?';uk='Будуть вилучені всі платежі, крім існуючих. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ОчиститьНесуществующиеПлатежи();
	КонецЕсли;
	
	
	// 1. Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
	// дата, организация, расчетный счет, формат обмена, тип файла
	Если НЕ ПроверитьЗаполнениеПолейДляИмпорта() Тогда
		Возврат;
	КонецЕсли;	
	
	// 1.1 Сохраняем значения для выбранного формата
	// Вызываем функцию СохранитьЗначения для формата
	
	Параметры = Новый Структура;
	Параметры.Вставить("Режим", 			"Импорт");
	Параметры.Вставить("Организация", 		Организация);
	Параметры.Вставить("ТекущееИмяФайла", 	ИмяФайлаИмпорт);
	Параметры.Вставить("КодВБанке", 		КодВБанке); // если есть 
	Параметры.Вставить("ТекущийТипФайла", 	ТипФайлаИмпорт);
	Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаИмпорт);

	ФормаОбработкиФормата.СохранитьЗначения(Параметры);
	
	// 2. Формируем параметры для вызова функции импорта формы обработки формата
	
	// запрос к обработке формата на импорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаДок", 			ДатаВыписки);
	Параметры.Вставить("Организация", 		Организация);
	Параметры.Вставить("РСчет", 			СокрЛП(Счет.НомерСчета));
	
	Параметры.Вставить("ИмяФайла",			ИмяФайлаИмпорт);
	Параметры.Вставить("ТипФайла", 			ТипФайлаИмпорт);
	Параметры.Вставить("НашМФО", 			СокрЛП(Счет.Банк.Код));
	Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаИмпорт);
	
	// 3. Вызываем функцию обработки, получаем таблицу платежей
	
	тзВыписка = ФормаОбработкиФормата.ИмпортВыписки(Параметры);
	
	// Если произошла ошибка
	Если тзВыписка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// 4. Обрабатываем таблицу платежей 
	// (перекодировка, только входящие, ищем юрфизлиц, контрагентов, сделки, заказы, договора)
	
	тзПлатежи = тчИмпорт.Выгрузить();
	тзПлатежи.Очистить();
	
	ПерекодировкаИмпорта = ФормаОбработкиФормата.ПерекодировкаИмпорта();
	
	Для Каждого Строка Из тзВыписка Цикл
		
		// проверяем на только входящие платежи
		Если НастройкиОбработки.ИмпортТолькоВходящихПлатежей Тогда
			Если Число(Строка.Расход) > 0 Тогда
				Продолжить;	
			КонецЕсли; 
		КонецЕсли;
	
		НоваяСтрока = тзПлатежи.Добавить();
		
		// перекодировка
		Если ПерекодировкаИмпорта Тогда
			Строка.Контрагент = ЗаменитьСимволы(Строка.Контрагент);	
			Строка.Содержание = ЗаменитьСимволы(Строка.Содержание);	
		КонецЕсли;	
		
		НоваяСтрока.Приход      	= Строка.Приход;
		НоваяСтрока.Расход      	= Строка.Расход;
		
		НоваяСтрока.НомерПП			= Строка.НомерПП;
		
		// только 
		
		// 4.1. Определение юридического/физического лица, контрагента
		// Ищем по коду ЕДРПОУ (в дальнейшем ОКПО):
		
		ВыборкаПоОКПО = НайтиПоОКПО(Строка.ОКПО, Строка.Контрагент);
		НайденКонтрагент = Ложь;
		Если ВыборкаПоОКПО.Следующий() Тогда //есть хоть один
			
			Контрагент 	= ВыборкаПоОКПО.Ссылка;
			НайденКонтрагент = Истина;
			
		Иначе
			
			// в зависимости от флага
			// "АвтоСозданиеКонтрагента" создаем новые элементы справочника Контрагенты
			
			Если НастройкиОбработки.АвтоСозданиеКонтрагента Тогда
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("Наименование", Строка.Контрагент);
				Реквизиты.Вставить("ОКПО", Строка.ОКПО);
				ПР = ?(Строка.Приход = 0, "Р", "П");
				Реквизиты.Вставить("ПР", ПР); //Приход ("П") или расход ("Р")
				Реквизиты.Вставить("РСчет", Строка.РСчет);
				Реквизиты.Вставить("МФО", Строка.МФО);
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("Наименование", Строка.Контрагент);
				Реквизиты.Вставить("ПР", ПР); //Приход ("П") или расход ("Р")
				Реквизиты.Вставить("ОКПО", 	Строка.ОКПО);
				Реквизиты.Вставить("РСчет", Строка.РСчет);
				Реквизиты.Вставить("МФО", 	Строка.МФО);
				
				//Создаём нового контрагента в справочнике
				Контрагент = СоздатьСпрКонтрагент(Реквизиты);
			Иначе
				// ПустаяСсылка
				Контрагент = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")].ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока.Контрагент 		= Контрагент;
		
		// 4.2. Определение сделки, заказа, договора.		
		ПриходРасход = "";
		Если НоваяСтрока.Приход > 0 Тогда
			ПриходРасход = "Приход";
			ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриходПоУмолчанию")
		ИначеЕсли НоваяСтрока.Расход > 0 Тогда	
			ПриходРасход = "Расход";
			ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасходПоУмолчанию")
		КонецЕсли;	
		
		ВидОперации = клОпределитьВидОперации(ВидДокумента);

		СписокВидовДоговоров = клОпределитьВидДоговораСКонтрагентом(ВидОперации);
		Договор		= НайтиДоговорКонтрагента(Контрагент,Организация,СписокВидовДоговоров);

		НоваяСтрока.Договор 		= Договор;
		
		НоваяСтрока.Содержание 		= СокрЛП(Строка.Содержание);
		// осталось сделки и заказы только в том случае, если найден Контрагент
		Если НайденКонтрагент И НастройкиОбработки.ПоискСделкиИДоговораПоНомеру Тогда
			//пытаемся найти сделки и заказы
			
			//из "Строка.Содержание" находим список номеров
			масНомераСделок = НайтиНомер(Строка.Содержание);
			// нужно масНомераСделок дополнить: 
			// 1. нулями до длины = 8
			// 2. префикс + нулями до длины = 8
			масНомераСделокДополнить(масНомераСделок, СокрЛП(Организация.Префикс));
			
			Если масНомераСделок.Количество() > 0 Тогда
				//сначала ищем среди сделок, затем, если результат пуст, среди договоров
				ВыборкаСделки = НайтиСделки(масНомераСделок, Контрагент, Организация, ПриходРасход);
				масСписокНайденныхСделок = ВыборкаСделки.ВыгрузитьКолонку("Ссылка"); 
				КоличествоНайденныхСделок = ВыборкаСделки.Количество();
				Если КоличествоНайденныхСделок > 0  Тогда
					//нашли хоть одну сделку
					Если КоличествоНайденныхСделок = 1  Тогда
						НоваяСтрока.Сделка 	= ВыборкаСделки[0].Ссылка;
						Если клЕстьТабличнаяЧасть("РасшифровкаПлатежа",ВыборкаСделки[0].Ссылка.Метаданные()) Тогда
							НоваяСтрока.Договор = ВыборкаСделки[0].Ссылка.РасшифровкаПлатежа[0].ДоговорКонтрагента;
						Иначе	
							НоваяСтрока.Договор = ВыборкаСделки[0].Ссылка.ДоговорКонтрагента;
						КонецЕсли;	
					КонецЕсли;	
					
					НоваяСтрока.СписокНайденныхСделок = ЗначениеВСтрокуВнутр(масСписокНайденныхСделок);
					
					ТаблицаНайденныеСделкиДляЗаполнения = Сделки.Выгрузить();
					ТаблицаНайденныеСделкиДляЗаполнения.Очистить();
					Для Каждого НайденнаяСделка Из масСписокНайденныхСделок Цикл
						НоваяСтрокаТаблицыНайденныхСделок = ТаблицаНайденныеСделкиДляЗаполнения.Добавить();
						НоваяСтрокаТаблицыНайденныхСделок.Сделка 				= НайденнаяСделка;
						НоваяСтрокаТаблицыНайденныхСделок.СуммаДокументаСделки 	= НайденнаяСделка.СуммаДокумента;
						НоваяСтрокаТаблицыНайденныхСделок.СуммаКБ 				= НайденнаяСделка.СуммаДокумента;
					КонецЦикла;	
					
					Если ТаблицаНайденныеСделкиДляЗаполнения.Итог("СуммаКБ") = НоваяСтрока.Приход + НоваяСтрока.Расход Тогда
						ТаблицаНайденныеСделкиДляЗаполнения.ЗаполнитьЗначения (Истина, "Флаг");		
					КонецЕсли;	
					
					НоваяСтрока.НайденныеСделкиДляЗаполнения = ЗначениеВСтрокуВнутр(ТаблицаНайденныеСделкиДляЗаполнения);
					
					КоличествоВыбранныхСделок 	= 0;
					СуммаВыбранныхСделок 		= 0;
					МассивВыбранныхСделок = Новый Массив;
					Для Каждого СтрокаСделки Из ТаблицаНайденныеСделкиДляЗаполнения Цикл 
						
						Если НЕ СтрокаСделки.Флаг Или НЕ ЗначениеЗаполнено(СтрокаСделки.Сделка) Тогда
							Продолжить;
						КонецЕсли;	
						
						КоличествоВыбранныхСделок 	= КоличествоВыбранныхСделок + 1;
						СуммаВыбранныхСделок 		= СуммаВыбранныхСделок + СтрокаСделки.СуммаКБ;
						
						МассивВыбранныхСделок.Добавить(СтрокаСделки.Сделка);
						
					КонецЦикла;	
					
					НоваяСтрока.КоличествоВыбранныхСделок 	= КоличествоВыбранныхСделок;
					НоваяСтрока.СуммаВыбранныхСделок 		= СуммаВыбранныхСделок;
					
					НоваяСтрока.МассивВыбранныхСделок = ЗначениеВСтрокуВнутр(МассивВыбранныхСделок);
					
					
					
				Иначе	
					//ищем договора
					ВыборкаДоговора = НайтиДоговора(масНомераСделок, Контрагент, Организация);
					Если ВыборкаДоговора.Следующий() Тогда
						//нашли хоть один договор
						НоваяСтрока.Договор = ВыборкаДоговора.Ссылка;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
		
		// по счету ищем банковский счет для контрагента. Если нет - создать.
		НоваяСтрока.СчетКонтрагента = НайтиСчетКонтрагента(Строка.РСчет, Контрагент);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКонтрагента) Тогда
			НоваяСтрока.СчетКонтрагента = ДобавитьСчетКонтрагента(Контрагент, Строка.РСчет, Строка.МФО);
		КонецЕсли;	
			
		
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		
		// определяем статус
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
		Иначе
			// договор должен быть заполнен всегда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
				НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
			Иначе
				
				НоваяСтрока.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи;
				
				Если Конфигурация = "УПП" Или Конфигурация = "УТ" Или Конфигурация = "УТП" Тогда
					Если НоваяСтрока.Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Или 
						 НоваяСтрока.Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
						// проверяем на заполненность сделки
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сделка) Тогда
							Если НоваяСтрока.СуммаВыбранныхСделок <> НоваяСтрока.Приход + НоваяСтрока.Расход Тогда
								НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Конфигурация = "БУ" Тогда
					НоваяСтрока.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи;
				КонецЕсли;	
				
				// сделка заполнена, но сумма проплаты больше суммы сделки - скорей всего ошибка!
				Если ЗначениеЗаполнено(НоваяСтрока.Сделка) И НоваяСтрока.Сделка.СуммаДокумента < (НоваяСтрока.Приход + НоваяСтрока.Расход) Тогда
					НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
				КонецЕсли;	
				
				// если есть найденные сделки (при этом ни одну не выбрали), выведем информацию о них
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сделка) И НоваяСтрока.КоличествоВыбранныхСделок = 0 Тогда
					Если НоваяСтрока.НайденныеСделкиДляЗаполнения <> "" Тогда 
						НайденныеСделкиДляЗаполнения = ЗначениеИзСтрокиВнутр(НоваяСтрока.НайденныеСделкиДляЗаполнения);
						Если ТипЗнч(НайденныеСделкиДляЗаполнения) = Тип("ТаблицаЗначений") И НайденныеСделкиДляЗаполнения.Количество() > 0 Тогда
							НоваяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;	
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// Ищем среди неоплаченных ППИсх с совпадением суммы и номера ПП (то есть те, которые вернулись из банка и их необходимо обновить). 
	// Для таких проставим статус СуществующийПлатежНеобходимоОплатить
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаИмпорт Из тчИмпорт Цикл
		
		Если СтрокаИмпорт.Документ.Оплачено Или СтрокаИмпорт.ВидДокумента <> "ПлатежноеПоручениеИсходящее" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из тзПлатежи Цикл
			Если Строка.Контрагент = СтрокаИмпорт.Контрагент Тогда
				
				Если (Строка.Расход > 0) И (СтрокаИмпорт.Расход  > 0) И (Строка.Расход  = СтрокаИмпорт.Расход ) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					МассивУдаляемыхСтрок.Добавить(Строка);
					
					СтрокаИмпорт.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить;
					Прервать;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		тзПлатежи.Удалить(ЭлементМассива);
	КонецЦикла;
	
	// 4.5 Удаляем с тзПлатежи, те которые уже есть в тчИмпорт
	// (совпадение по ЮрФизЛицу и приходу-расходу) (УТ)
	// (совпадение по Контрагенту и приходу-расходу) (УПП)
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого Строка Из тзПлатежи Цикл
		ПервоеСовпадениеПриход = Истина;
		ПервоеСовпадениеРасход = Истина;
		Для Каждого СтрокаИмпорт Из тчИмпорт Цикл
			
			СтрокаСравнения = "Контрагент";
			Если (Строка[СтрокаСравнения] = СтрокаИмпорт[СтрокаСравнения]) Тогда
				// приход-расход
				Если (Строка.Приход > 0) И (СтрокаИмпорт.Приход > 0) И (Строка.Приход = СтрокаИмпорт.Приход) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					// совпало
					Если ПервоеСовпадениеПриход Тогда
						// эту строку из тзПлатежи удаляем
						МассивУдаляемыхСтрок.Добавить(Строка);
						ПервоеСовпадениеПриход = Ложь;
					КонецЕсли; 
				КонецЕсли; 
				Если (Строка.Расход > 0) И (СтрокаИмпорт.Расход  > 0) И (Строка.Расход  = СтрокаИмпорт.Расход ) Тогда
					// номер ПП есть в файле и совпадает с текущим
					Если ЗначениеЗаполнено(Строка.НомерПП) И Строка.НомерПП <> СтрокаИмпорт.НомерПП Тогда
						Продолжить;
					КонецЕсли;	
					// совпало
					Если ПервоеСовпадениеРасход  Тогда
						// эту строку из тзПлатежи удаляем
						МассивУдаляемыхСтрок.Добавить(Строка);
						ПервоеСовпадениеРасход  = Ложь;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		тзПлатежи.Удалить(ЭлементМассива);
	КонецЦикла;
	
	// 5. Объединяем с тчИмпорт, в которой сейчас существующие платежи. Устанавливаем статусы
	
	Для Каждого Строка Из тзПлатежи Цикл  
		НоваяСтрока = тчИмпорт.Добавить();
		
		НоваяСтрока.Контрагент 		= Строка.Контрагент;
		
		НоваяСтрока.Приход      	= Строка.Приход;
		НоваяСтрока.Расход      	= Строка.Расход;
		
		НоваяСтрока.НомерПП      	= Строка.НомерПП;
		
		Если НоваяСтрока.Приход > 0 Тогда
			НоваяСтрока.ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриходПоУмолчанию")
		ИначеЕсли НоваяСтрока.Расход > 0 Тогда	
			НоваяСтрока.ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасходПоУмолчанию")
		КонецЕсли;	
		НоваяСтрока.СтавкаНДС	 	= Строка.СтавкаНДС;
		
		НоваяСтрока.Сделка	 		= Строка.Сделка;
		НоваяСтрока.СчетКонтрагента = Строка.СчетКонтрагента;
		НоваяСтрока.Договор			= Строка.Договор;
		
		НоваяСтрока.Содержание      = Строка.Содержание;
		
		НоваяСтрока.Статус			= Строка.Статус;
		НоваяСтрока.СписокНайденныхСделок			= Строка.СписокНайденныхСделок;
		НоваяСтрока.НайденныеСделкиДляЗаполнения	= Строка.НайденныеСделкиДляЗаполнения;
		НоваяСтрока.МассивВыбранныхСделок			= Строка.МассивВыбранныхСделок;
		НоваяСтрока.КоличествоВыбранныхСделок		= Строка.КоличествоВыбранныхСделок;
		НоваяСтрока.СуммаВыбранныхСделок			= Строка.СуммаВыбранныхСделок;
		НоваяСтрока.Флаг = Истина;
		
		Если Конфигурация = "БУ" Тогда
			НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		Иначе
			// подразделение, ответственный - с настроек пользователя
			Попытка
				// старая редакция 
				НоваяСтрока.Подразделение = глЗначениеПеременной("глТекущийПользователь").ОсновноеПодразделениеКомпании;
				НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь").ОсновнойОтветственный;
			Исключение
				// новая редакция
				//НоваяСтрока.Подразделение = клПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");	
				НоваяСтрока.Ответственный = клПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			КонецПопытки;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// 6. Сортируем тчИмпорт
	СортировкаТчИмпорт();
	
КонецПроцедуры // ИмпортВыписки()

// Читает существующие документы выписок
//
// Параметры:
//
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПрочитатьСуществующиеПлатежи()
	
	// Проверить, что выбраны организация, счет, дата выписки не пустая
	Если НЕ ПроверитьЗаполнениеПолей() Тогда
		Возврат;
	КонецЕсли;	
	
	//Запрос к документам: выписки (СтрокаВыпискиПриход и СтрокаВыпискиРасход)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаВыписки));	
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаВыписки));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Счет);
	
	Запрос.УстановитьПараметр("ДатаНачНеОплаченные", НачалоДня(ДатаВыписки-НастройкиОбработки.КоличествоДнейДляОплатыБанка*86400));	
	
	ТекстВыбрать = "ВЫБРАТЬ
	|	Ссылка,
	|	Контрагент КАК Контрагент,
	|	Ответственный КАК Ответственный,
	|	СуммаДокумента,
	|	СчетКонтрагента, 
	|	ДоговорКонтрагента КАК Договор,";
	
	ТекстГде = "ГДЕ
	|	Дата МЕЖДУ &ДатаНач И &ДатаКон И
	|	Организация = &Организация И
	|	СчетОрганизации  = &БанковскийСчет И
	|   ПометкаУдаления = Ложь И
	|   Проведен = Истина
	|";

	// Среди ПП исходящих выберем также непроведённые и неоплаченные, которые, возможно, вернутся из банка (т.е. нужно будет оплатить)
	Если Конфигурация = "БУ" Тогда
		ТекстГдеППИсх = "ГДЕ
		|	( (((Дата МЕЖДУ &ДатаНач И &ДатаКон) ИЛИ (ДатаВыписки МЕЖДУ &ДатаНач И &ДатаКон)) И Проведен = Истина) ИЛИ (ДатаВыписки МЕЖДУ &ДатаНачНеОплаченные И &ДатаКон И Проведен = Ложь И Оплачено = Ложь) ) И
		|	Организация = &Организация И
		|	СчетОрганизации  = &БанковскийСчет И
		|   ПометкаУдаления = Ложь 
		|";
	Иначе	
		ТекстГдеППИсх = "ГДЕ
		|	( (((Дата МЕЖДУ &ДатаНач И &ДатаКон) ИЛИ (ДатаОплаты МЕЖДУ &ДатаНач И &ДатаКон)) И Проведен = Истина) ИЛИ (Дата МЕЖДУ &ДатаНачНеОплаченные И &ДатаКон И Проведен = Ложь И Оплачено = Ложь) ) И
		|	Организация = &Организация И
		|	СчетОрганизации  = &БанковскийСчет И
		|   ПометкаУдаления = Ложь 
		|";
	КонецЕсли;	
	
	//здесь в цикле по списку документов из ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход")
	СписокВыпискаПриход = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход");
	ТекстЗапроса = "";
	Для Каждого ДокументВыписки Из СписокВыпискаПриход Цикл
		ДокументВыпискиПриход = ДокументВыписки.Значение;	
		ТекстЗапроса = ТекстЗапроса + ТекстВыбрать + " 
		|	""Приход"" КАК ПриходРасход
		|
		|ИЗ
		|	Документ." + ДокументВыпискиПриход + "
		|" + ТекстГде + "
		|
		|ОБЪЕДИНИТЬ
		|";
	КонецЦикла;	
	
	СписокВыпискаРасход = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасход");
	Для Каждого ДокументВыписки Из СписокВыпискаРасход Цикл
		ДокументВыпискиРасход = ДокументВыписки.Значение;	
		докМетаданные = Документы[ДокументВыпискиРасход].СоздатьДокумент().Метаданные();
		ТекстЗапроса = ТекстЗапроса + ТекстВыбрать + " 
		|	""Расход"" КАК ПриходРасход
		|
		|ИЗ
		|	Документ." + ДокументВыпискиРасход + "
		|" + ?(ДокументВыпискиРасход = "ПлатежноеПоручениеИсходящее", ТекстГдеППИсх,ТекстГде) + "
		|
		|ОБЪЕДИНИТЬ
		|";
	КонецЦикла;	
	//удалить последнее ОБЪЕДИНИТЬ 
	ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса) - СтрДлина("|ОБЪЕДИНИТЬ"));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка.РасшифровкаПлатежа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = тчИмпорт.Добавить();
		
		НоваяСтрока.Контрагент 		= Выборка.Контрагент;
		
		СсылкаМетаданные = Выборка.Ссылка.Метаданные();
		
		Если клЕстьРеквизит("НомерПоручения",СсылкаМетаданные) Тогда
			НоваяСтрока.НомерПП 		= Выборка.Ссылка.НомерПоручения;
		КонецЕсли;	
		
		НоваяСтрока.Приход      	= ?(Выборка.ПриходРасход = "Приход",Выборка.СуммаДокумента, 0);
		НоваяСтрока.Расход          = ?(Выборка.ПриходРасход = "Расход",Выборка.СуммаДокумента, 0);
		
		НоваяСтрока.Договор			= Выборка.Договор;
		НоваяСтрока.СчетКонтрагента = Выборка.СчетКонтрагента;
		
		Если Конфигурация = "УТ" Тогда
		ИначеЕсли Конфигурация = "УПП" Тогда
	
		КонецЕсли;	
		
		//сделка и т.п. внутри таб части "РасшифровкаПлатежа"
		НоваяСтрока.СтавкаНДС	 	= Выборка.Ссылка.РасшифровкаПлатежа[0].СтавкаНДС;
		НоваяСтрока.Сделка 			= Выборка.Ссылка.РасшифровкаПлатежа[0].Сделка;
		
		НоваяСтрока.Ответственный 	= Выборка.Ответственный;
		
		Если клЕстьРеквизит("НазначениеПлатежа",СсылкаМетаданные) Тогда
			НоваяСтрока.Содержание      = Выборка.Ссылка.НазначениеПлатежа;
		Иначе	
			НоваяСтрока.Содержание      = Выборка.Ссылка.Комментарий;
		КонецЕсли;	
		
		НоваяСтрока.Документ		= Выборка.Ссылка;
		НоваяСтрока.ВидДокумента	= Выборка.Ссылка.Метаданные().Имя;
		
		НоваяСтрока.Статус 	= СтатусыСтрокИмпорта.СуществующийПлатеж;
		НоваяСтрока.Флаг 	= Истина;
		
	КонецЦикла;	
	
	// Сортируем тчИмпорт
	СортировкаТчИмпорт();
КонецПроцедуры // ПрочитатьСуществующиеПлатежи()

// Обновляет данные в информационной строке импорта
//
// Параметры: нет
//
//
Процедура ОбновитьИнфоСтрокуИмпорт()
	
	// сколько платежей выбрано 
	ВыбраноПлатежей = 0;
	ВсегоПлатежей = 0;
	СуммаПриходаВсего = 0;
	СуммаРасходаВсего = 0;
	СуммаПриходаВыбрано = 0;
	СуммаРасходаВыбрано = 0;
	
	// сколько уже существующих, новых, отредактированых платежей
	// сумма прихода и расхода
	
	Для Каждого Строка Из тчИмпорт Цикл
		
		ВсегоПлатежей = ВсегоПлатежей + 1;
		СуммаПриходаВсего = СуммаПриходаВсего + Строка.Приход;
		СуммаРасходаВсего = СуммаРасходаВсего + Строка.Расход;
		
		Если Строка.Флаг Тогда
			ВыбраноПлатежей = ВыбраноПлатежей + 1;
			СуммаПриходаВыбрано = СуммаПриходаВыбрано + Строка.Приход;
			СуммаРасходаВыбрано = СуммаРасходаВыбрано + Строка.Расход;
		КонецЕсли; 
	КонецЦикла; 
	
	// обновляем данные в информационной строке
	
	ИнфоСтрокаИмпорт = НСтр("ru='Всего платежей:   ';uk='Всього платежів:  '") + Формат(ВсегоПлатежей, "ЧДЦ=0") + НСтр("ru=' Приход: ';uk=' Надходження: '") + Формат(СуммаПриходаВсего, "ЧЦ=16; ЧДЦ=2; ЧН=") + НСтр("ru=' Расход: ';uk=' Видаток: '") + Формат(СуммаРасходаВсего, "ЧЦ=16; ЧДЦ=2; ЧН=");
	ИнфоСтрокаИмпорт = ИнфоСтрокаИмпорт + Символы.ПС;
	ИнфоСтрокаИмпорт = ИнфоСтрокаИмпорт +
					   НСтр("ru='Выбрано платежей: ';uk='Вибрано платежів: '") + Формат(ВыбраноПлатежей, "ЧДЦ=0") + НСтр("ru=' Приход: ';uk=' Надходження: '") + Формат(СуммаПриходаВыбрано, "ЧЦ=16; ЧДЦ=2; ЧН=") + НСтр("ru=' Расход: ';uk=' Видаток: '") + Формат(СуммаРасходаВыбрано, "ЧЦ=16; ЧДЦ=2; ЧН=");
					   
					  
КонецПроцедуры // ОбновитьИнфоСтрокуИмпорт()

// Обновляет данные в информационной строке "детали строки импорта"
//
// Параметры: нет
//
//
Процедура ОбновитьИнфоСтрокуДеталиСтрокиИмпорта()
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если ТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ЭлементыФормы.ИнфоСтрокаДеталиСтрокиИмпорта.ЦветТекста = WebЦвета.Синий;
	
	ИнфоСтрокаДеталиСтрокиИмпорта = "";
	Если ТС.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи Тогда
		ИнфоСтрокаДеталиСтрокиИмпорта = "Платеж готов к записи.";
		Если НЕ ЗначениеЗаполнено(ТС.Сделка) И ТС.КоличествоВыбранныхСделок >= 1 Тогда
			ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
			|Выбрано сделок: " + Формат(ТС.КоличествоВыбранныхСделок, "ЧДЦ=0") + ". Сумма = " + Формат(ТС.СуммаВыбранныхСделок, "ЧЦ=16; ЧДЦ=2; ЧН=") + ".";
		КонецЕсли;	
	ИначеЕсли ТС.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
		ИнфоСтрокаДеталиСтрокиИмпорта = "Существующий платеж.";
	ИначеЕсли ТС.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
		ЭлементыФормы.ИнфоСтрокаДеталиСтрокиИмпорта.ЦветТекста = WebЦвета.Красный;
		ИнфоСтрокаДеталиСтрокиИмпорта = "Не заполнены все реквизиты:";
		Если НЕ ЗначениеЗаполнено(ТС.Контрагент) Тогда
			ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
			|Контрагент";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТС.Договор) Тогда
			ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
			|Договор";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТС.Сделка) Тогда
			Если ТС.КоличествоВыбранныхСделок = 0 Тогда
				ИнфоСтрокаДеталиСтрокиИмпорта = "Возможно, не выбраны сделки";
				Если ТС.НайденныеСделкиДляЗаполнения <> "" Тогда 
					НайденныеСделкиДляЗаполнения = ЗначениеИзСтрокиВнутр(ТС.НайденныеСделкиДляЗаполнения);
					Если ТипЗнч(НайденныеСделкиДляЗаполнения) = Тип("ТаблицаЗначений") И НайденныеСделкиДляЗаполнения.Количество() > 0 Тогда
					ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
					|Найдено сделок: "+ Формат(НайденныеСделкиДляЗаполнения.Количество(), "ЧДЦ=0") + ". Сумма = " + Формат(НайденныеСделкиДляЗаполнения.Итог("СуммаДокументаСделки"), "ЧЦ=16; ЧДЦ=2; ЧН=") + ".";
					ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
					|Выбрано сделок: 0.";
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТС.КоличествоВыбранныхСделок > 1 И ТС.СуммаВыбранныхСделок <> (ТС.Приход + ТС.Расход)  Тогда	
				ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
				|Выбрано сделок: " + Формат(ТС.КоличествоВыбранныхСделок, "ЧДЦ=0") + ". Сумма = " + Формат(ТС.СуммаВыбранныхСделок, "ЧЦ=16; ЧДЦ=2; ЧН=") + ", необходимо " + Формат(ТС.Приход + ТС.Расход, "ЧЦ=16; ЧДЦ=2; ЧН=") + ".";
			ИначеЕсли ТС.КоличествоВыбранныхСделок = 1 И ТС.СуммаВыбранныхСделок < (ТС.Приход + ТС.Расход)  Тогда	
				ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
				|Выбрано сделок: " + Формат(ТС.КоличествоВыбранныхСделок, "ЧДЦ=0") + ". Сумма = " + Формат(ТС.СуммаВыбранныхСделок, "ЧЦ=16; ЧДЦ=2; ЧН=") + ", необходимо " + Формат(ТС.Приход + ТС.Расход, "ЧЦ=16; ЧДЦ=2; ЧН=") + ".";
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТС.Сделка) И ТС.Сделка.СуммаДокумента < (ТС.Приход + ТС.Расход) Тогда
			ИнфоСтрокаДеталиСтрокиИмпорта = ИнфоСтрокаДеталиСтрокиИмпорта + "
			|Выбрано сделок: 1. Сумма = " + Формат(ТС.Сделка.СуммаДокумента, "ЧЦ=16; ЧДЦ=2; ЧН=") + ", необходимо " + Формат(ТС.Приход + ТС.Расход, "ЧЦ=16; ЧДЦ=2; ЧН=") + ".";
		КонецЕсли;	
	КонецЕсли;	
	
	ИнфоСтрокаСодержаниеПлатежа = ТС.Содержание;				   
					  
КонецПроцедуры // ОбновитьИнфоСтрокуИмпорт()

// Процедура проверяет, заполнены ли все реквизиты выписки
// также проверяет модифицировнность существующих документов
// должна вызываться при изменении КАЖДОЙ ячейки табличного поля тпИмпорт
// (кроме Флаг)
// Меняет статус строки выписки
//
// Параметры:
//
//  ТС – текущая строка тпИмпорт
// 
Процедура ЗаполненыВсеРеквизитыВыписки(ТС)
	
	// все ли реквизиты выписки заполнены?
	// имеет более высокий приоритет над "модифированностью" 
	// так как если реквизиты не заполнены - это однозначно статус - НеобходимоЗаполнитьРеквизиты
	 
	ЗаполненыВсе = Истина;
	Мофицированность = Ложь;
	ЕстьДокумент = Истина;
	Документ = ТС.Документ;
	
	Если Документ = Неопределено Или НЕ ЗначениеЗаполнено(Документ.Номер) Тогда  //вторая проверка в случае, если документ удалён физически
		ЕстьДокумент 	= Ложь;
		ТС.Документ 	= Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТС.Контрагент) Тогда
		ЗаполненыВсе = Ложь;
	ИначеЕсли ЕстьДокумент Тогда
		Если ТС.Контрагент <> Документ.Контрагент Тогда
			Мофицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// приход - расход 
	Если ЕстьДокумент Тогда
		Если Документ.Метаданные().Имя = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход") Тогда
			// приход
			Если ТС.Приход <> Документ.СуммаДокумента Тогда
				Мофицированность = Истина;
			КонецЕсли;
		Иначе
			// расход
			Если ТС.Расход <> Документ.СуммаДокумента Тогда
				Мофицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ставка НДС
	Если НЕ ЗначениеЗаполнено(ТС.СтавкаНДС) Тогда
		ЗаполненыВсе = Ложь;
	ИначеЕсли ЕстьДокумент Тогда
	КонецЕсли;
	
	// договор - должен быть всегда
	Если НЕ ЗначениеЗаполнено(ТС.Договор) Тогда
		ЗаполненыВсе = Ложь;
	ИначеЕсли ЕстьДокумент Тогда
		Если ТС.Договор <> Документ.ДоговорКонтрагента Тогда
			Мофицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Конфигурация = "УПП" Или Конфигурация = "УТ" Или Конфигурация = "УТП" Тогда
		// сделка - может быть пустой, если взаиморасчеты ведутся в целом по договору,
		// если по сделкам - должна быть
		Если ЗначениеЗаполнено(ТС.Договор) Тогда
			Если ТС.Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Или 
				 ТС.Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				 И НЕ ЗначениеЗаполнено(ТС.Сделка) И ТС.КоличествоВыбранныхСделок = 0 Тогда
				ЗаполненыВсе = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Конфигурация = "БУ" Тогда
		// документ расчетов (сделка) не является обязательным,  
		// Если ТС.Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
	КонецЕсли;	
	
	// если выбрано несколько сделок, но суммы не совпадают
	Если НЕ ЗначениеЗаполнено(ТС.Сделка) И ТС.КоличествоВыбранныхСделок >= 1 И ТС.СуммаВыбранныхСделок <> (ТС.Приход + ТС.Расход) Тогда
		ЗаполненыВсе = Ложь;
	КонецЕсли;	
	
	// если выбрана одна сделка, но сумма сделки меньше оплаты
	Если ЗначениеЗаполнено(ТС.Сделка) И ТС.Сделка.СуммаДокумента < (ТС.Приход + ТС.Расход) Тогда
		ЗаполненыВсе = Ложь;
	КонецЕсли;	
	
	// если есть найденные сделки (при этом ни одну не выбрали), выведем информацию о них
	Если НЕ ЗначениеЗаполнено(ТС.Сделка) И ТС.КоличествоВыбранныхСделок = 0 Тогда
		Если ТС.НайденныеСделкиДляЗаполнения <> "" Тогда 
			НайденныеСделкиДляЗаполнения = ЗначениеИзСтрокиВнутр(ТС.НайденныеСделкиДляЗаполнения);
			Если ТипЗнч(НайденныеСделкиДляЗаполнения) = Тип("ТаблицаЗначений") И НайденныеСделкиДляЗаполнения.Количество() > 0 Тогда
				ЗаполненыВсе = Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// мофицированность
	Если ЕстьДокумент Тогда
		Если ТС.Сделка <> Документ.РасшифровкаПлатежа[0].Сделка Тогда
			Мофицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// содержание подразделение-ответственный - только на мофицированность
	Если ЕстьДокумент Тогда
		
		Если ТС.Содержание <> Документ.Комментарий Тогда
			Мофицированность = Истина;
		КонецЕсли; 
		Если ТС.Ответственный <> Документ.Ответственный Тогда
			Мофицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// установим статус строки
	Если НЕ ЗаполненыВсе Тогда
		ТС.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
	Иначе
		Если ЕстьДокумент Тогда
			Если Мофицированность Тогда
				ТС.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи;	
			ИначеЕсли ТС.Статус <> СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить Тогда
				ТС.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;	
			КонецЕсли;
		Иначе
			ТС.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи;		
		КонецЕсли;
	КонецЕсли;
	
	// применим сортировку по настройкам
	СортировкаТчИмпорт();
КонецПроцедуры // ЗаполненыВсеРеквизитыВыписки()

Процедура ЗаполнитьРасшифровкуПлатежа(РасшифровкаПлатежа, Сделка, Договор, Сумма, Строка, докОб, докОбМетаданные)
	
	Попытка
		РасшифровкаПлатежа.Сделка = Сделка;
	Исключение
	КонецПопытки;	
	РасшифровкаПлатежа.ДоговорКонтрагента	= Договор;
	
	Если клЕстьРеквизит("ДоговорВзаиморасчетов",докОбМетаданные) Тогда
		СтруктураКурсаВзаиморасчетов = клКурсДляВалюты(докОб.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, докОб.Дата);
	ИначеЕсли клЕстьРеквизит("ДоговорКонтрагента",докОбМетаданные) Тогда	
		СтруктураКурсаВзаиморасчетов = клКурсДляВалюты(РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов, докОб.Дата);
	КонецЕсли;	
	
	//в таб части РасшифровкаПлатежа
	РасшифровкаПлатежа.КурсВзаиморасчетов 		= СтруктураКурсаВзаиморасчетов.Курс;
	РасшифровкаПлатежа.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;
	РасшифровкаПлатежа.СтавкаНДС				= Строка.СтавкаНДС;
	РасшифровкаПлатежа.СуммаПлатежа 			= Сумма;
	РасшифровкаПлатежа.СуммаВзаиморасчетов 		= Сумма;
	
	ЗначениеСтавкиНДС     = клПолучитьСтавкуНДС(РасшифровкаПлатежа.СтавкаНДС);
	РасшифровкаПлатежа.СуммаНДС 				= РасшифровкаПлатежа.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда	
		// счета
		Если ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход").НайтиПоЗначению(Строка.ВидДокумента) <> Неопределено Тогда 	
			РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= НастройкиОбработки.ВхСчетРасчетов;
			РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 		= НастройкиОбработки.ВхСчетАвансов;
			//РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("361");
			//РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6811");
			Если Конфигурация = "УТП" Или Конфигурация = "БУ" Тогда
				РасшифровкаПлатежа.СчетУчетаНДС 				= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6432");
				РасшифровкаПлатежа.СчетУчетаНДСПодтвержденный 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6431");
				РасшифровкаПлатежа.НалоговоеНазначение 			= Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
				//////РасшифровкаПлатежа.СтатьяВДВР 					= Справочники.СтатьиНалоговыхДеклараций.НП_ПродажТовар;
			КонецЕсли;	
		Иначе	
			РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= НастройкиОбработки.ИсхСчетРасчетов;
			РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 		= НастройкиОбработки.ИсхСчетАвансов;
			//РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("631");
			//РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду("3711");
			Если Конфигурация = "УТП" Или Конфигурация = "БУ" Тогда
				РасшифровкаПлатежа.СчетУчетаНДС 				= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
				РасшифровкаПлатежа.СчетУчетаНДСПодтвержденный 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("6441");
				РасшифровкаПлатежа.НалоговоеНазначение 			= Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
				//////РасшифровкаПлатежа.СтатьяВДВР 					= Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

// Формирует документы-выписки по тчИмпорт
// для успешно сформированных документов будет установлен тчИмпорт.Документ 
// и Статус будет установлен в существующий платеж 
// 
// Параметры: нет
//
Процедура СформироватьВыписки()
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Строка Из тчИмпорт Цикл
		
		Если Строка.Флаг Тогда
			
			// надо импортировать эту строку 
			// статус "СуществующийПлатеж" не трогаем, остальные пытаемся записать и при 
			// установленных настройках провести
			Если Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатежНеобходимоОплатить Тогда
				// для документа проставим флаг оплаты и дату оплаты, остальное - не трогаем
				докОб = Строка.Документ.ПолучитьОбъект();
				
				докОбМетаданные = докОб.Метаданные();
				
				докОб.Оплачено 		= Истина;	
				
				// Для БУ - реквизит даты оплаты - Дата
				// для остальных - ДатаОплаты
				Если Конфигурация = "БУ" Тогда
					докОб.Дата 			= ДатаВыписки;	
				ИначеЕсли клЕстьРеквизит("ДатаОплаты",докОбМетаданные) Тогда
					докОб.ДатаОплаты 	= ДатаВыписки;	
				ИначеЕсли клЕстьРеквизит("ДатаВыписки",докОбМетаданные) Тогда
					докОб.ДатаВыписки 	= ДатаВыписки;	
				КонецЕсли;	
				
				// пытаемся записать
				Попытка
					докОб.Записать();
					// записали - поменяем сразу статус на существующий платеж
					Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;
				Исключение
					// 	
				КонецПопытки;
				
				// если установлена соответствующая настройка - пытаемся и провести
				Если НастройкиОбработки.ПытатьсяПроводитьСозданныеДокументы Тогда
					Попытка
						докОб.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						// 
					КонецПопытки;
				КонецЕсли;
				
				// добавим в массив созданных 
				МассивДокументов.Добавить(докОб);
				
				
				Продолжить;
			КонецЕсли;
			
			НовыйДокумент = Истина;
			Если Строка.Документ = Неопределено Или НЕ ЗначениеЗаполнено(Строка.Документ.Номер) Тогда //вторая проверка в случае, если документ удалён физически
				// создаем новый документ
				
				ТипДокумента = Строка.ВидДокумента;
				Если ПустаяСтрока(ТипДокумента) Тогда
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Для строки ""¤1¤"" не выбран вид документа!';uk='Для рядка ""¤1¤"" не вибраний вид документу!'"), Строка.НомерСтроки));
					Продолжить;
				КонецЕсли;	
				Док = Документы[ТипДокумента];
				
				докОб = Док.СоздатьДокумент();
			Иначе  
				// перезаписываем измененный старый документ
				докОб = Строка.Документ.ПолучитьОбъект();
				НовыйДокумент = Ложь;
			КонецЕсли;	
			
			
			// заполняем реквизиты документа
			докОб.Контрагент 			= Строка.Контрагент;
			докОб.СуммаДокумента 		= ?(Строка.Приход > 0, Строка.Приход, Строка.Расход);
			докОб.Ответственный 		= Строка.Ответственный;
			
			Если Конфигурация = "УТ" Тогда
			ИначеЕсли Конфигурация = "УПП" Тогда
			КонецЕсли;	
			
			
			докОбМетаданные = докОб.Метаданные();
			Если клЕстьРеквизит("БанковскийСчет",докОбМетаданные) Тогда
				докОб.БанковскийСчет		= Счет;
			ИначеЕсли клЕстьРеквизит("СчетОрганизации",докОбМетаданные) Тогда	
				докОб.СчетОрганизации		= Счет;
			КонецЕсли;	
			
			докОб.Организация			= Организация;
			
			Если клЕстьРеквизит("СчетКонтрагента",докОбМетаданные) Тогда
				докОб.СчетКонтрагента		= Строка.СчетКонтрагента;
			КонецЕсли;	
			
			Если клЕстьРеквизит("НомерПоручения",докОбМетаданные) Тогда
				докОб.НомерПоручения 			= Строка.НомерПП;
			КонецЕсли;	
			
			Если клЕстьРеквизит("НомерВходящегоДокумента",докОбМетаданные) Тогда
				докОб.НомерВходящегоДокумента 	= Строка.НомерПП;
			КонецЕсли;      
			
			// вид учета 
			
			Если Конфигурация = "УПП" Или Конфигурация = "УТ" Тогда
				Если Не (докОб.ОтраженоВОперУчете 
					или докОб.ОтражатьВБухгалтерскомУчете или докОб.ОтражатьВНалоговомУчете) Тогда
					
					докОб.ОтраженоВОперУчете     		= Истина;
					докОб.ОтражатьВБухгалтерскомУчете 	= Истина;
					докОб.ОтражатьВНалоговомУчете 		= Истина;
					
				КонецЕсли;
			ИначеЕсли Конфигурация = "УТП" Тогда
				Если Не (докОб.ОтражатьВУправленческомУчете 
					или докОб.ОтражатьВБухгалтерскомУчете или докОб.ОтражатьВНалоговомУчете) Тогда
					
					докОб.ОтражатьВУправленческомУчете	= Истина;
					докОб.ОтражатьВБухгалтерскомУчете 	= Истина;
					докОб.ОтражатьВНалоговомУчете 		= Истина;
					
				КонецЕсли;
			Иначе
				//////Если Не (докОб.ОтражатьВНалоговомУчете) Тогда
				//////	докОб.ОтражатьВНалоговомУчете 		= Истина;
				//////КонецЕсли;
			КонецЕсли;	
			
			Если НовыйДокумент Тогда
				// дата для нового
				докОб.Дата = ДатаВыписки;
				// номер для нового 
				клУстановитьНомерДокумента(докОб);
			КонецЕсли; 
			
			докОб.Оплачено 		= Истина;	
			
			Если клЕстьРеквизит("ДатаОплаты",докОбМетаданные) Тогда
				докОб.ДатаОплаты 	= ДатаВыписки;	
			ИначеЕсли клЕстьРеквизит("ДатаВыписки",докОбМетаданные) Тогда
				докОб.ДатаВыписки 	= ДатаВыписки;	
			КонецЕсли;	
			
			Если клЕстьРеквизит("ДатаВходящегоДокумента",докОбМетаданные) Тогда
				докОб.ДатаВходящегоДокумента 	= ДатаВыписки;	
			КонецЕсли;	
			
			// валюта - из счета 
			докОб.ВалютаДокумента = Счет.ВалютаДенежныхСредств;
			// курс, кратность 
	    	СтруктураКурсаДокумента = клКурсДляВалюты(докОб.ВалютаДокумента, докОб.Дата);
			докОб.КурсДокумента = СтруктураКурсаДокумента.Курс;
			докОб.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
			//в таб части РасшифровкаПлатежа
			докОб.РасшифровкаПлатежа.Очистить();
			
			Попытка 
				НайденныеСделкиДляЗаполнения = ?(Строка.НайденныеСделкиДляЗаполнения <> "", ЗначениеИзСтрокиВнутр(Строка.НайденныеСделкиДляЗаполнения), "");
			Исключение
				НайденныеСделкиДляЗаполнения = ""; 
			КонецПопытки;	
			
			Если Строка.НайденныеСделкиДляЗаполнения = "" ИЛИ (ТипЗнч(НайденныеСделкиДляЗаполнения) = Тип("ТаблицаЗначений") И НайденныеСделкиДляЗаполнения.Количество() = 0) Тогда
				РасшифровкаПлатежа = докОб.РасшифровкаПлатежа.Добавить();
				ЗаполнитьРасшифровкуПлатежа(РасшифровкаПлатежа, Строка.Сделка, Строка.Договор, докОб.СуммаДокумента, Строка, докОб, докОбМетаданные);
			ИначеЕсли ТипЗнч(НайденныеСделкиДляЗаполнения) = Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаИзТаблицыСделок Из НайденныеСделкиДляЗаполнения Цикл
					Если НЕ СтрокаИзТаблицыСделок.Флаг Тогда
						Продолжить;
					КонецЕсли;	
					РасшифровкаПлатежа = докОб.РасшифровкаПлатежа.Добавить();
					ЗаполнитьРасшифровкуПлатежа(РасшифровкаПлатежа, СтрокаИзТаблицыСделок.Сделка, СтрокаИзТаблицыСделок.Сделка.ДоговорКонтрагента, СтрокаИзТаблицыСделок.СуммаКБ, Строка, докОб, докОбМетаданные);
				КонецЦикла;	
			КонецЕсли;	
			
			Если клЕстьРеквизит("НазначениеПлатежа",докОбМетаданные) Тогда
				//докОб.НазначениеПлатежа		= клСформироватьНазначениеПлатежа(докОб,РасшифровкаПлатежа);
				докОб.НазначениеПлатежа		= Строка.Содержание;
			Иначе	
				докОб.Комментарий 			= Строка.Содержание;
			КонецЕсли;	
			
			Если клЕстьРеквизит("СчетУчетаДенежныхСредств",докОбМетаданные) Тогда
				докОб.СчетУчетаДенежныхСредств 		= НастройкиОбработки.СчетУчетаДС;
				//докОб.СчетУчетаДенежныхСредств 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду("311");	
			ИначеЕсли клЕстьРеквизит("СчетБанк",докОбМетаданные) Тогда
				докОб.СчетБанк 		= НастройкиОбработки.СчетУчетаДС;
			КонецЕсли;	
			
			// вид операции
			докОб.ВидОперации = Перечисления[докОб.ВидОперации.Метаданные().Имя][0];
			
			// пытаемся записать
			Попытка
				докОб.Записать();
				// записали - поменяем сразу статус на существующий платеж
				Строка.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж;
			Исключение
				// 	
			КонецПопытки;
			
			// если установлена соответствующая настройка - пытаемся и провести
			// но только если строка не со статусом - "НеобходимоЗаполнитьРеквизиты" 
			// так как они все равно не смогут провестися
			Если НастройкиОбработки.ПытатьсяПроводитьСозданныеДокументы Тогда
				Если Строка.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Документ ""¤1¤"" не будет проведен! Не заполнены все необходимые реквизиты!';uk='Документ ""¤1¤"" не буде проведений! Не заповнені всі необхідні реквізити!'"), докОб));
				Иначе
					Попытка
						докОб.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						// 
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			// добавим в массив созданных 
			МассивДокументов.Добавить(докОб);
			
			// запишем в строку ссылку на созданный документ
			Строка.Документ = докОб.Ссылка;
			
		КонецЕсли;
	КонецЦикла;	
	
	// применим сортировку по настройкам
	СортировкаТчИмпорт();	
	
	// если установлена настройка - открываем все созданные и перезаписанные документы
	Если НастройкиОбработки.ОткрыватьСозданныеДокументы Тогда
		Для Каждого ЭлементМассива Из МассивДокументов Цикл
			Если НастройкиОбработки.ОткрыватьТолькоДокументыСОшибками Тогда
				НайденнаяСтрока = тчИмпорт.Найти(ЭлементМассива.Ссылка, "Документ");
				Если Не НайденнаяСтрока = Неопределено Тогда
					Если НайденнаяСтрока.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
						ЭлементМассива.ПолучитьФорму("ФормаДокумента").Открыть();	
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЭлементМассива.ПолучитьФорму("ФормаДокумента").Открыть();	
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;

КонецПроцедуры // СформироватьВыписки()

// Сортирует тчИмпорт согласно настроек 
//
// Параметры: УстанавливатьТекущуюСтроку - булево
// При истина устанавливается необходимость изменения текущей строки в тпИмпорт
// Само изменение текущей строки происходит в ОбновлениеОтображения() - 
// здесь текущая строка устанавливаться не хочет
//
Процедура СортировкаТчИмпорт(УстанавливатьТекущуюСтроку = Истина)
	// применим сортировку по настройкам
	// запомним текущую строку тпИмпорт
	Если УстанавливатьТекущуюСтроку Тогда
		Если ЭлементыФормы.тпИмпорт.ТекущаяСтрока <> Неопределено Тогда
			ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока.НомерСтроки - 1;
		Иначе
			ТС = 0;
		КонецЕсли; 
	КонецЕсли; 
	Если ТипСортировки <> Неопределено ИЛИ ТипСортировки <> "" Тогда
		//сортируем таблицу значений "тчИмпорт.Выгрузить()" табличной части "тчИмпорт"
		тзИмпорт = Сортировать(тчИмпорт.Выгрузить(), ТипСортировки);
		//загружаем "тзИмпорт" в "тчИмпорт"
		тчИмпорт.Загрузить(тзИмпорт);
	КонецЕсли;	
	Если УстанавливатьТекущуюСтроку И ТС > 0 Тогда
		НадоОбновитьТекущуюСтроку = Истина;
		НомерНовойТекущейСтроки = ТС;
	КонецЕсли; 
КонецПроцедуры // СортировкаТчИмпорт()

////////////////////////////////////////////////////////////////////////////////
// Закладка "Экспорт платёжных поручений"

// Проверяет заполнение всех полей для экпорта платежных поручений
//
// Проверяем, что выбрано имя файла, файл существует, ФормаОбработкиФормата определена
// дата, организация, расчетный счет, формат обмена, тип файла// Параметры: нет
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены все поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейДляЭкспорта()
	
	Если ПустаяСтрока(ИмяФайлаЭкспорт) Тогда
		Предупреждение(НСтр("ru='Не указано имя файла для экспорта платежных поручений!';uk='Не вказано ім''я файлу для експорту платіжних доручень!'"));
		Возврат Ложь;
	КонецЕсли; 
	
	Если ФормаОбработкиФормата = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаППС = '00010101000000' Тогда
		Предупреждение(НСтр("ru='Не указана дата начала периода!';uk='Не вказана дата початку періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаПППо = '00010101000000' Тогда
		Предупреждение(НСтр("ru='Не указана дата конца периода!';uk='Не вказана дата кінця періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	//Если Счет.Пустая() Тогда
	//	Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ФорматОбмена = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан формат обмена данными с системой Клиент-Банк!';uk='Не вказаний формат обміну даними із системою Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипФайлаЭкспорт = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указан тип файла для экспорта в систему Клиент-Банк!';uk='Не вказаний тип файлу для експорту в систему Клієнт-Банк!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейДляЭкспорта()	

// Проверяем, что выбраны организация, счет, дата выписки не пустая
//
// Параметры: нет
//
// Возвращаем:
//		Истина - заполнены поля
//		Ложь - иначе
//
Функция ПроверитьЗаполнениеПолейЭкспорт()
	
	Если ДатаППС = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указана дата начала периода!';uk='Не вказана дата початку періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаПППо = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указана дата конца периода!';uk='Не вказана дата кінця періоду!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		Возврат Ложь;
	КонецЕсли;
	
	//Если Счет.Пустая() Тогда
	//	Предупреждение(НСтр("ru='Не указан расчетный счет!';uk='Не вказаний розрахунковий рахунок!'"));
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеПолейЭкспорт()	

// Экспорт платежных поручений 
//
// Параметры: нет
//
//
Процедура ЭкспортПП()
	
	// 1. Проверяем, что выбрано имя файла
	// ФормаОбработкиФормата определена
	// дата, организация, расчетный счет, формат обмена, тип файла
	Если НЕ ПроверитьЗаполнениеПолейДляЭкспорта() Тогда
		Возврат;
	КонецЕсли;	
	
	// 1.1 Вызываем функцию СохранитьЗначения для формата
	Параметры = Новый Структура;
	Параметры.Вставить("Режим", 			"Экспорт");
	Параметры.Вставить("Организация", 		Организация);
	Параметры.Вставить("ТекущееИмяФайла",	ИмяФайлаЭкспорт);
	Параметры.Вставить("КодВБанке", 		КодВБанке); // если есть 
	Параметры.Вставить("ТекущийТипФайла", 	ТипФайлаЭкспорт);
	Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаЭкспорт);

	ФормаОбработкиФормата.СохранитьЗначения(Параметры);
	
	// 2. Формируем параметры для вызова функции экспорта формы обработки формата
	
	// запрос к обработке формата на экспорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("НашМФО", СокрЛП(Счет.Банк.Код));
	Параметры.Вставить("НашСчет", СокрЛП(Счет.НомерСчета));
	
	Параметры.Вставить("НашОКПО", ПолучитьКодЕДРПОУ());
	
	Параметры.Вставить("НашаФирма", СокрЛП(Организация));
	Параметры.Вставить("НашаФирмаСокр", СокрЛП(Организация));
	Параметры.Вставить("НашБанк", СокрЛП(Счет.Банк.Наименование));
	
	Параметры.Вставить("ИмяФайла", ИмяФайлаЭкспорт);
	Параметры.Вставить("ТипФайла", ТипФайлаЭкспорт);
	
	Параметры.Вставить("КодировкаФайла", КодировкаФайлаЭкспорт);
	
	тзПлатежныеПоручения = Новый ТаблицаЗначений;
	тзПлатежныеПоручения.Колонки.Добавить("НомерПП");
	тзПлатежныеПоручения.Колонки.Добавить("ДатаПП");
	тзПлатежныеПоручения.Колонки.Добавить("Контрагент");
	тзПлатежныеПоручения.Колонки.Добавить("МФО");
	тзПлатежныеПоручения.Колонки.Добавить("Счет");
	тзПлатежныеПоручения.Колонки.Добавить("ОКПО");
	тзПлатежныеПоручения.Колонки.Добавить("Сумма");
	тзПлатежныеПоручения.Колонки.Добавить("Содержание");
	тзПлатежныеПоручения.Колонки.Добавить("Банк");
	
	тзПлатежныеПоручения.Колонки.Добавить("Валюта");
	тзПлатежныеПоручения.Колонки.Добавить("ВалСумма");
	тзПлатежныеПоручения.Колонки.Добавить("ПроцентНДС");
	тзПлатежныеПоручения.Колонки.Добавить("СуммаНДС");

	ПерекодировкаЭкспорта = ФормаОбработкиФормата.ПерекодировкаЭкспорта();	
	
	Для Каждого Строка Из тчЭкспорт Цикл
		
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = тзПлатежныеПоручения.Добавить();
		НовСтрока.НомерПП 		= Строка.НомерПП;
		НовСтрока.ДатаПП 		= Строка.ДатаПП;
		
		// "Полное наименование" контрагента
		НовСтрока.Контрагент 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Контрагент.НаименованиеПолное), Строка.Контрагент.НаименованиеПолное);
 
		НовСтрока.МФО 			= Строка.Документ.СчетКонтрагента.Банк.Код;
		НовСтрока.Счет 			= Строка.Документ.СчетКонтрагента.НомерСчета;
		
		НовСтрока.ОКПО 			= Строка.Контрагент.КодПоЕДРПОУ;
			
			
		НовСтрока.Сумма 		= Строка.Сумма;
		НовСтрока.Содержание 	= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Строка.Содержание), Строка.Содержание);
		Банк = Строка.Документ.СчетКонтрагента.Банк.Наименование;
		НовСтрока.Банк 			= ?(ПерекодировкаЭкспорта, ЗаменитьСимволыНазад(Банк), Банк);
		//	Код валюты (Валюта) – строка (3)
		НовСтрока.Валюта		= Строка.Документ.СчетКонтрагента.ВалютаДенежныхСредств.Код;
		//	Сумма в валюте (ВалСумма) - число
		НовСтрока.ВалСумма		= 0;
		//	Процент НДС (ПроцентНДС) – строка (например «0», «20»)
		НовСтрока.ПроцентНДС	= ?(Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, "20","0");
		СтавкаНДС = ?(Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, 20, 0);
		//	Сумма НДС (СуммаНДС) – число
		НовСтрока.СуммаНДС		= Строка.Сумма * 100 / (100 + СтавкаНДС);
		
	КонецЦикла;
	
	Параметры.Вставить("тзПлатежныеПоручения", тзПлатежныеПоручения);
	
	Рез = ФормаОбработкиФормата.ЭкспортПлатежныхПоручений(Параметры);
	// рез - либо истина, либо ложь
	
	Если Рез Тогда
		Предупреждение(НСтр("ru='Экспорт платежных документов успешно завершен';uk='Експорт платіжних доручень успішно завершено'")); 
	КонецЕсли; 
	
КонецПроцедуры // ЭкспортПП()

// Читает существующие платежные поручения
//
// Параметры:
// 		Нет
//
Процедура ПрочитатьСуществующиеПП()
	
	// Проверить, что выбраны организация, счет, дата выписки не пустая
	Если НЕ ПроверитьЗаполнениеПолейЭкспорт() Тогда
		Возврат;
	КонецЕсли;	
	
	//Запрос к документам: "ПлатежноеПоручение"
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаС", НачалоДня(ДатаППС));	
	//Запрос.УстановитьПараметр("ДатаС", ДатаППС);	
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаПППо));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Счет);
	
	ТекстВыбрать = "ВЫБРАТЬ
	|	Ссылка,
	|	Дата КАК ДатаПП,
	//|	НомерПоручения КАК НомерПП,
	|	Контрагент КАК Контрагент,
	|	Ответственный КАК Ответственный,
	|	СуммаДокумента,
	|	ДоговорКонтрагента КАК Договор";
	
	ТекстГде = "ГДЕ
	|	Дата МЕЖДУ &ДатаС И &ДатаПо И
	|	Организация = &Организация И
	|	СчетОрганизации = &БанковскийСчет И 
	|	ПометкаУдаления = Ложь
	//добавить И Проведен = Истина для УПП
	|";

	ТекстЗапроса = "";
	
	СписокВыпискаРасход = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасход");
	
	Для Каждого ДокументВыписки Из СписокВыпискаРасход Цикл
		ДокументВыпискиРасход = ДокументВыписки.Значение;	
		ТекстЗапроса = ТекстЗапроса + ТекстВыбрать + " 
		|
		|ИЗ
		|	Документ." + ДокументВыпискиРасход + "
		|" + ТекстГде + "
		|
		|ОБЪЕДИНИТЬ
		|";
	КонецЦикла;	
	
	//удалить последнее ОБЪЕДИНИТЬ 
	ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса) - СтрДлина("|ОБЪЕДИНИТЬ"));
		
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	тчЭкспорт.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка.РасшифровкаПлатежа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = тчЭкспорт.Добавить();
		
		НоваяСтрока.ДатаПП	 		= Выборка.ДатаПП;
		НоваяСтрока.Контрагент 		= Выборка.Контрагент;
			
		Если клЕстьРеквизит("НомерПоручения",Выборка.Ссылка.Метаданные()) Тогда
			НоваяСтрока.НомерПП 		= Выборка.Ссылка.НомерПоручения;
		КонецЕсли;	
		
		//сделка и т.п. внутри таб части "РасшифровкаПлатежа"
		НоваяСтрока.СтавкаНДС	 	= Выборка.Ссылка.РасшифровкаПлатежа[0].СтавкаНДС;
		НоваяСтрока.Сделка 			= Выборка.Ссылка.РасшифровкаПлатежа[0].Сделка;
			
		НоваяСтрока.Сумма	      	= Выборка.СуммаДокумента;
		
		НоваяСтрока.Договор			= Выборка.Договор;
		
		НоваяСтрока.Ответственный 	= Выборка.Ответственный;
		
		Если клЕстьРеквизит("НазначениеПлатежа",Выборка.Ссылка.Метаданные()) Тогда
			НоваяСтрока.Содержание      = СокрЛП(СтрЗаменить(Выборка.Ссылка.НазначениеПлатежа,Символы.ПС," "));
		КонецЕсли;	
		
		НоваяСтрока.Документ		= Выборка.Ссылка;
		
		НоваяСтрока.Флаг = Истина;
		
	КонецЦикла;	

КонецПроцедуры // ПрочитатьСуществующиеПП()

// Обновляет данные в информационной строке экспорта
//
// Параметры: нет
//
//
Процедура ОбновитьИнфоСтрокуЭкспорт()
	
	// сколько платежек выбрано и на какую сумму
	
	ВыбраноПлатежей = 0;
	ВсегоПлатежей = 0;
	СуммаРасходаВсего = 0;
	СуммаРасходаВыбрано = 0;
	
	Для Каждого Строка Из тчЭкспорт Цикл
		
		ВсегоПлатежей = ВсегоПлатежей + 1;
		СуммаРасходаВсего = СуммаРасходаВсего + Строка.Сумма;
		
		Если Строка.Флаг Тогда
			ВыбраноПлатежей = ВыбраноПлатежей + 1;
			СуммаРасходаВыбрано = СуммаРасходаВыбрано + Строка.Сумма;
		КонецЕсли; 
	КонецЦикла; 
	
	// обновляем данные в информационной строке
	ИнфоСтрокаЭкспорт = НСтр("ru='Всего платежей:   ';uk='Всього платежів:  '") + Формат(ВсегоПлатежей, "ЧДЦ=0") + НСтр("ru=' на сумму: ';uk=' на суму: '") + Формат(СуммаРасходаВсего, "ЧЦ=16; ЧДЦ=2");
	ИнфоСтрокаЭкспорт = ИнфоСтрокаЭкспорт + Символы.ПС;
	ИнфоСтрокаЭкспорт = ИнфоСтрокаЭкспорт +
					 НСтр("ru='Выбрано платежей: ';uk='Вибрано платежів: '") + Формат(ВыбраноПлатежей, "ЧДЦ=0") + НСтр("ru=' на сумму: ';uk=' на суму: '") + Формат(СуммаРасходаВыбрано, "ЧЦ=16; ЧДЦ=2");
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Определяет доступность реквизитов, кнопок и т.д.
//
// Параметры: 
//   Нет
//
Процедура ДоступностьРеквизитов()
	
	ЭлементыФормы.тпИмпорт.Колонки.Удалить(ЭлементыФормы.тпИмпорт.Колонки.ЮрФизЛицо);
	ЭлементыФормы.тпИмпорт.Колонки.Удалить(ЭлементыФормы.тпИмпорт.Колонки.Заказ);
	
	ЭлементыФормы.тпЭкспорт.Колонки.Удалить(ЭлементыФормы.тпЭкспорт.Колонки.ЮрФизЛицо);
	
	Если Конфигурация = "БУ" Или Конфигурация = "УТ" Или Конфигурация = "УТП" Тогда
		ЭлементыФормы.тпИмпорт.Колонки.Удалить(ЭлементыФормы.тпИмпорт.Колонки.Подразделение);
	КонецЕсли;	
	
	Если Конфигурация = "БУ" Тогда
		ЭлементыФормы.тпИмпорт.Колонки.Сделка.ТекстШапки = "Документ расчетов";
	КонецЕсли;	
	
	КнопкиОткрыть = ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки.Открыть.Кнопки;
	КнопкиОткрыть.Удалить(КнопкиОткрыть.ОткрытьЖурналБанковскиеВыписки);
	КнопкиОткрыть.Удалить(КнопкиОткрыть.ОткрытьЖурналСделки);
	
КонецПроцедуры	

// Определяет доступность кнопок панели КоманднаяПанельИмпорт в зависимости от заполненности 
// полей тчИмпорт
//
// Параметры: 
//   Нет
//
Процедура ДоступностьПанелиИмпорта()
	
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если ТС = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДокументВыписку"].Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьСделку"].Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьЗаказ"].Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДоговор"].Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТС.Документ) Или НЕ ЗначениеЗаполнено(ТС.Документ.Номер) Тогда
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДокументВыписку"].Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДокументВыписку"].Доступность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТС.Сделка) Тогда
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьСделку"].Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьСделку"].Доступность = Истина;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТС.Заказ) Тогда
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьЗаказ"].Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьЗаказ"].Доступность = Истина;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТС.Договор) Тогда
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДоговор"].Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельИмпорт.Кнопки["Открыть"].Кнопки["ОткрытьДоговор"].Доступность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры // ДоступностьПанелиИмпорта()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//определим текущую конфигурацию
	Конфигурация = Метаданные.Имя;
	Если Найти(Конфигурация, "УправлениеТорговлей") Тогда
		Конфигурация = "УТ";
		СинонимКонфигурации = Метаданные.Синоним;
		Поз = Найти(СинонимКонфигурации,"2.1");
		Если Поз > 0 Тогда
			Предупреждение("Для конфигурации ""Управление торговлей для Украины, редакция 2.1"" используйте обработку ""КлиентБанк_UT21.epf"" ");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	ИначеЕсли Найти(Конфигурация, "УправлениеПроизводственнымПредприятиемДляУкраины") Тогда
		Конфигурация = "УПП";
	ИначеЕсли Найти(Конфигурация, "БухгалтерияДляУкраины") Тогда
		Конфигурация = "БУ";
	ИначеЕсли Найти(Конфигурация, "УправлениеТорговымПредприятиемДляУкраины") Тогда
		Конфигурация = "УТП";
	Иначе
		Конфигурация = "";
	КонецЕсли;	
	
	// 1. Инициализируем соответствие объектов
	ИнициализацияОбъектовКонфигурации();
	
	// 2. Проверяем на первый запуск
	Если ВосстановитьЗначение("КБ8:ПервыйЗапуск") = Неопределено Тогда
		// первый запуск - инициализация параметров настройки
		ПервыйЗапускОбработки();
		// первый запуск - показываем модально форму настроек
		ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастроек");
		Рез = ФормаНастройки.ОткрытьМодально();
		Если Рез = 1 Тогда
			ВосстановитьЗначениеНастроек();
		Иначе
			// пользователь не захотел при первом запуске сделать настройки 
			// ничего не выдаем, возможно что обработки по умолчанию его и устроили
		КонецЕсли; 
		СохранитьЗначение("КБ8:ПервыйЗапуск", Истина);
	Иначе
    	//не первый запуск, восстановить все значения параметров настройки
		ВосстановитьЗначениеНастроек();
	КонецЕсли;	
	
	// 3. читаем ini файлы
	Пока НЕ ПрочитатьИниФайлы(ЭлементыФормы) Цикл
		Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Укажите правильный каталог в настройках!';uk='Не правильно зазначений каталог продукту. Вкажіть правильний каталог у настроюваннях!'"));
		ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастроек");
		Рез = ФормаНастройки.ОткрытьМодально();
		Если Рез = 1 Тогда
			ВосстановитьЗначениеНастроек();
		Иначе
			// пользователь не захотел сделать настройки, выйдем вообще из обработки
			Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Обработка будет закрыта!';uk='Не правильно зазначений каталог продукту. Обробка буде закрита!'"));
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	// 4. Проверяем, если нет используемых форматов обмена - это означает, что надо вызвать форму настроек 
	// форматов 
	
	Если ЭлементыФормы.ФорматОбмена.СписокВыбора.Количество() = 0 Тогда
		ОсновныеДействияФормыНастройкаФорматовОбмена(Неопределено);
	КонецЕсли;
	

	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// устанавливаем даты выписки, платежных поручений как рабочую дату, 
	// инициализация структуры статусов строк тчИмпорт
	ДатаВыписки = РабочаяДата;
	ДатаППС = РабочаяДата;
	ДатаПППо = РабочаяДата;
	
		
	СтатусыСтрокИмпорта = Новый Структура;
	СтатусыСтрокИмпорта.Вставить("СуществующийПлатеж", 1);
	СтатусыСтрокИмпорта.Вставить("ГотовКЗаписи",2);
	СтатусыСтрокИмпорта.Вставить("НеобходимоЗаполнитьРеквизиты", 3);
	СтатусыСтрокИмпорта.Вставить("СуществующийПлатежНеобходимоОплатить", 4);
	
	ДоступностьРеквизитов();
	
	// Заполняем с настроек реквизиты обработки (организацию, счет)
	// также при изменении счета меняется формат обмена, загружается форма обработки формата
	// устанавливаются имена и типы файлов импорта/экспорта. 
	ЗаполнитьИзНастроек();
	
	// читаем существующие платежи на дату выписки
	// ПрочитатьСуществующиеПлатежи();
	
	СформироватьТекстЗапросаПоискаСделки();
	
	// При установленных параметрах делаем автоимпорт и/или автозаполнение таблицы экспорта
	АвтоИмпортЭкспорт();
	
	// Отсортируем таблицу импорта
	СортировкаТчИмпорт();
	
	ДоступностьПанелиИмпорта();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	ОбновитьИнфоСтрокуИмпорт();
	ОбновитьИнфоСтрокуЭкспорт();
	
	Если НадоОбновитьТекущуюСтроку Тогда
		ЭлементыФормы.тпИмпорт.ТекущаяСтрока = тчИмпорт[НомерНовойТекущейСтроки];
		НадоОбновитьТекущуюСтроку = Ложь;
		НомерНовойТекущейСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыОПрограмме(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Настройка форматов обмена"
// Показываем модально форму настроек форматов обмена
//
//
Процедура ОсновныеДействияФормыНастройкаФорматовОбмена(Кнопка)
	
	// в любом случае перечитываем файл с используемыми форматами
	СписокФорматов = ПрочитатьИспользуемыеФорматыОбмена();
	
	ФормаНастройкиФорматов = ЭтотОбъект.ПолучитьФорму("ФормаНастроекФорматов");
	ФормаНастройкиФорматов.ОткрытьМодально();
	
	// в любом случае перечитываем файл с используемыми форматами
	СписокФорматов = ПрочитатьИспользуемыеФорматыОбмена();
	ЭлементыФормы.ФорматОбмена.СписокВыбора = СписокФорматов;
	ЭлементыФормы.ФорматОбмена1.СписокВыбора = СписокФорматов;
	
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Установить все флажки" тч Импорт
// Устанавливаем все флажки в Истина
//
//
Процедура КоманднаяПанельИмпортУстановитьВсеФлажки(Кнопка)
	УстановитьФлажок(Истина,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Установить все флажки" тч Импорт
// из командной панели
// Устанавливаем все флажки в Истина
//
//
Процедура КоманднаяПанельИмпортУстановитьФлаги(Кнопка)
	УстановитьФлажок(Истина,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Снять флажки" тч Импорт
// из командной панели
// Устанавливаем все флажки в Ложь
//
//
Процедура КоманднаяПанельИмпортСнятьФлаги(Кнопка)
	УстановитьФлажок(Ложь,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Снять флажки" тч Импорт
// Устанавливаем все флажки в Ложь
//
//
Процедура КоманднаяПанельИмпортСнятьВсеФлажки(Кнопка)
	УстановитьФлажок(Ложь,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Инвертировать флажки" тч Импорт
// Инвертируем все флажки
//
//
Процедура КоманднаяПанельИмпортИнвертироватьВсеФлажки(Кнопка)
	УстановитьФлажок(Неопределено,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Инвертировать флажки" тч Импорт
// из командной панели
// Инвертируем все флажки
//
//
Процедура КоманднаяПанельИмпортИнвертироватьФлаги(Кнопка)
	УстановитьФлажок(Неопределено,тчИмпорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Установить все флажки" тч Экспорт
// Устанавливаем все флажки в Истина
//
//
Процедура КоманднаяПанельЭкспортУстановитьВсеФлажкиЭкспорт(Кнопка)
	УстановитьФлажок(Истина,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Установить все флажки" тч Экспорт
// из командной панели
// Устанавливаем все флажки в Истина
//
//
Процедура КоманднаяПанельЭкспортУстановитьФлагиЭкспорт(Кнопка)
	УстановитьФлажок(Истина,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Снять флажки" тч Экспорт
// Устанавливаем все флажки в Ложь
//
//
Процедура КоманднаяПанельЭкспортСнятьВсеФлажкиЭкспорт(Кнопка)
	УстановитьФлажок(Ложь,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Снять флажки" тч Экспорт
// из командной панели
// Устанавливаем все флажки в Ложь
//
//
Процедура КоманднаяПанельЭкспортСнятьФлагиЭкспорт(Кнопка)
	УстановитьФлажок(Ложь,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Инвертировать флажки" тч Экспорт
// Инвертируем все флажки
//
//
Процедура КоманднаяПанельЭкспортИнвертироватьВсеФлажкиЭкспорт(Кнопка)
	УстановитьФлажок(Неопределено,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Инвертировать флажки" тч Экспорт
// из командной панели
// Инвертируем все флажки
//
//
Процедура КоманднаяПанельЭкспортИнвертироватьФлагиЭкспорт(Кнопка)
	УстановитьФлажок(Неопределено,тчЭкспорт);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Настройки обработки"
// Показываем модально форму настроек
//
//
Процедура ОсновныеДействияФормыНастройки(Кнопка)
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастроек");
	Рез = ФормаНастройки.ОткрытьМодально();
	
	Если Рез = 1 Тогда
		ВосстановитьЗначениеНастроек();
		
		Пока НЕ ПрочитатьИниФайлы(ЭлементыФормы) Цикл
			Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Укажите правильный каталог в настройках!';uk='Не правильно зазначений каталог продукту. Вкажіть правильний каталог у настроюваннях!'"));
			ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастроек");
			Рез = ФормаНастройки.ОткрытьМодально();
			Если Рез = 1 Тогда
				ВосстановитьЗначениеНастроек();
			Иначе
				// пользователь не захотел сделать правильные настройки, выйдем вообще из основной обработки
				Предупреждение(НСтр("ru='Не правильно указан каталог продукта. Обработка будет закрыта!';uk='Не правильно зазначений каталог продукту. Обробка буде закрита!'"));
				Закрыть();
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
		ЗаполнитьИзНастроек();
	КонецЕсли; 
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Импорт выписки"
// Вызываем импорт выписок
//
//
Процедура ДействияФормыИмпортВыписки(Кнопка)
	ИмпортВыписки();
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьСделку(Кнопка)
	// определить текущую строку
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	Если НЕ ТС.Сделка = Неопределено Тогда
		ТС.Сделка.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьЗаказ(Кнопка)
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	Если НЕ ТС.Заказ = Неопределено Тогда
		ТС.Заказ.ПолучитьФорму().Открыть();
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьДоговор(Кнопка)
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	Если НЕ ТС.Договор = Неопределено Тогда
		ТС.Договор.ПолучитьФорму().ОткрытьМодально();
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьЖурналСделки(Кнопка)
	ЖурналыДокументов.Сделки.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьЖурналБанковскиеВыписки(Кнопка)
	ЖурналыДокументов.БанковскиеВыписки.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура КоманднаяПанельИмпортОткрытьДокументВыписку(Кнопка)
	// определить текущую строку
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	Если ТС.Документ = Неопределено Или НЕ ЗначениеЗаполнено(ТС.Документ.Номер)Тогда
		// нет документа
	Иначе	
		ТС.Документ.ПолучитьФорму().Открыть();
	КонецЕсли; 
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Импорт выписки"
// Вызываем импорт выписок
//
//
Процедура КоманднаяПанельИмпортИмпорт(Кнопка)
	ИмпортВыписки();
КонецПроцедуры

Процедура КоманднаяПанельИмпортПрочитатьСуществующиеПлатежи(Кнопка)
	ПрочитатьСуществующиеПлатежи();
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Экспорт платежных документов"
// Вызываем экспорт платежных документов
//
//
Процедура КоманднаяПанельЭкспортЭкспортПП(Кнопка)
	ЭкспортПП();
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Перечитать платежные документы"
// Считываем существующие платежи
//
//
Процедура КоманднаяПанельЭкспортПрочитатьПлатежныеПоручения(Кнопка)
	ПрочитатьСуществующиеПП();
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаППС, КонецДня(ДатаПППо));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаППС = НастройкаПериода.ПолучитьДатуНачала();
	ДатаПППо = НастройкаПериода.ПолучитьДатуОкончания();
	
	ПрочитатьСуществующиеПП();
	
КонецПроцедуры

Процедура ИзменитьПлатежноеПоручение(Кнопка)
	
	ТС = ЭлементыФормы.тпЭкспорт.ТекущаяСтрока;
	Если ТС <> Неопределено Тогда
		Если ТС.Документ = Неопределено Или НЕ ЗначениеЗаполнено(ТС.Документ.Номер)Тогда
			// нет документа
		Иначе	
			ТС.Документ.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПлатежноеПоручение()

// Процедура-обработчик нажатия на кнопку "Сформировать выписки"
// Формируем выписки
//
//
Процедура КоманднаяПанельИмпортСформироватьВыписки(Кнопка)
	СформироватьВыписки();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ИмяФайлаИмпорт". 
// Процедура вызывает процедуру ВыбратьИмяФайла формы обработки формата
//
Процедура ИмяФайлаИмпортНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Параметры = Новый Структура();
	Параметры.Вставить("Режим", 			"Импорт");
	Параметры.Вставить("Дата", 				ДатаВыписки);
	Параметры.Вставить("КодВБанке", 		КодВБанке);  //если есть
	Параметры.Вставить("ТекущееИмяФайла", 	ИмяФайлаИмпорт);
	Параметры.Вставить("ТекущийТипФайла", 	ТипФайлаИмпорт);
	Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаЭкспорт);
	
	ИмяФайлаИмпорт = ФормаОбработкиФормата.ВыбратьИмяФайла(Параметры);
	
	// сохраним это имя
	// Вызываем функцию СохранитьЗначения для формата
	Если ФормаОбработкиФормата <> Неопределено Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Режим", "Импорт");
		Параметры.Вставить("Организация", Организация);
		Параметры.Вставить("ТекущееИмяФайла", ИмяФайлаИмпорт);
		Параметры.Вставить("КодВБанке", КодВБанке); 
		Параметры.Вставить("ТекущийТипФайла", 	ТипФайлаИмпорт);
		Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаЭкспорт);
		ФормаОбработкиФормата.СохранитьЗначения(Параметры);
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИмяФайлаИмпорт". 
// Процедура отображает надпись "НадписьБанк" и по МФО банка устанавливает 
// в поле ввода "ФорматОбмена" соответсвующий формат обмена.
//
Процедура ИмяФайлаИмпортОткрытие(Элемент, СтандартнаяОбработка)
	// Открываем файл через ЗапуститьПриложение
	СтандартнаяОбработка = Ложь;
	// проверим имя файла
	Если СуществуетФайл(Элемент.Значение) Тогда
		ОткрытьФайл(Элемент.Значение);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ИмяФайлаЭкспорт". 
// Процедура вызывает процедуру ВыбратьИмяФайла формы обработки формата
//
Процедура ИмяФайлаЭкспортНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Параметры = Новый Структура();
	Параметры.Вставить("Режим", "Экспорт");
	Параметры.Вставить("Дата", ДатаППС);   
	Параметры.Вставить("ТекущееИмяФайла", ИмяФайлаЭкспорт);
	Параметры.Вставить("ТекущийТипФайла", ТипФайлаЭкспорт);
	
	ИмяФайлаЭкспорт = ФормаОбработкиФормата.ВыбратьИмяФайла(Параметры);
	
	Если ФормаОбработкиФормата <> Неопределено Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Режим", "Экспорт");
		Параметры.Вставить("Организация", Организация);
		Параметры.Вставить("ТекущееИмяФайла", ИмяФайлаЭкспорт);
		Параметры.Вставить("КодВБанке", КодВБанке); 
		Параметры.Вставить("ТекущийТипФайла", 	ТипФайлаЭкспорт);
		Параметры.Вставить("КодировкаФайла", 	КодировкаФайлаЭкспорт);
		ФормаОбработкиФормата.СохранитьЗначения(Параметры);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИмяФайлаЭкспорт". 
// Процедура отображает надпись "НадписьБанк" и по МФО банка устанавливает 
// в поле ввода "ФорматОбмена" соответсвующий формат обмена.
//
Процедура ИмяФайлаЭкспортОткрытие(Элемент, СтандартнаяОбработка)
	// Открываем файл через ЗапуститьПриложение
	СтандартнаяОбработка = Ложь;
	// проверим имя файла
	Если СуществуетФайл(Элемент.Значение) Тогда
		ОткрытьФайл(Элемент.Значение);
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипФайлаИмпорт". 
// Процедура отображает надпись "НадписьБанк" и по МФО банка устанавливает 
// в поле ввода "ФорматОбмена" соответсвующий формат обмена.
//
Процедура ТипФайлаИмпортПриИзменении(Элемент)
	// переформировываем имя файла
	СформироватьИмяФайла();	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипФайлаЭкспорт". 
// Процедура отображает надпись "НадписьБанк" и по МФО банка устанавливает 
// в поле ввода "ФорматОбмена" соответсвующий формат обмена.
//
Процедура ТипФайлаЭкспортПриИзменении(Элемент)
	// переформировываем имя файла
	СформироватьИмяФайла();	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Счет". 
// Процедура отображает надпись "НадписьБанк" и по МФО банка устанавливает 
// в поле ввода "ФорматОбмена" соответсвующий формат обмена.
//
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ПриИзмененииБанковскогоСчета();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "БанковскийСчет". Процедура открывает список банковских счетов,
// с фильтром по юр. лицу организации.
//
Процедура БанковскийСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Организация должна быть выбрана.
	
	Если Организация = Неопределено ИЛИ Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не выбрана организация!';uk='Не вибрана організація!'"));

		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли; 

	ВладелецБанковскогоСчета = Организация;
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораБанковскогоСчета = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаСчет")].ПолучитьФормуСписка(, Элемент);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;
	ФормаВыбораБанковскогоСчета.ПараметрТекущаяСтрока = Счет;
	

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.Открыть();

КонецПроцедуры

Процедура СчетОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура Счет1Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура ОрганизацияПриИзменении(Элемент)
	Если Элемент.Значение.Пустая() Тогда
		Счет = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаСчет")].ПустаяСсылка();
	Иначе
		Счет = Элемент.Значение.ОсновнойБанковскийСчет;
	КонецЕсли; 
	//БанковскийСчетПриИзменении(ЭлементыФормы.Счет);
	ПриИзмененииБанковскогоСчета();
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура Организация1Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаВыписки". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура ДатаВыпискиПриИзменении(Элемент)
	
	// при изменении даты выписки необходимо изменить имя файла импорта
	// очистить таблицу тчИмпорт, перечитать существующие платежи, при необходимости
	// переимпортировать 
	
	тчИмпорт.Очистить();
	Если ФормаОбработкиФормата <> Неопределено Тогда
		СформироватьИмяФайла();		
	КонецЕсли; 
	
	ПрочитатьСуществующиеПлатежи();
	
	Если ФормаОбработкиФормата <> Неопределено Тогда
		Если НастройкиОбработки.АвтоИмпортВыписок Тогда
			ИмпортВыписки();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаВыписки1". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура ДатаВыписки1ПриИзменении(Элемент)
	// перечитываем платежки
	ПрочитатьСуществующиеПП();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаВыписки2". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура ДатаВыписки2ПриИзменении(Элемент)
	// перечитываем платежки
	ПрочитатьСуществующиеПП();
КонецПроцедуры

Процедура ФорматОбмена1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ИмяФайлаОбработкиФормата = сооФорматИмяФайлаОбработкиФормата[ВыбранноеЗначение];
	// проверить на существование файла
	Если НЕ СуществуетФайл(ИмяФайлаОбработкиФормата) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Элемент.Значение = ВыбранноеЗначение;
	ПриИзмененииФорматаОбмена();
КонецПроцедуры

Процедура ФорматОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяФайлаОбработкиФормата = сооФорматИмяФайлаОбработкиФормата[ВыбранноеЗначение];
	// проверить на существование файла
	Если НЕ СуществуетФайл(ИмяФайлаОбработкиФормата) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ПриИзмененииФорматаОбмена();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "КодВБанкеИмпорт". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура КодВБанкеИмпортПриИзменении(Элемент)
	// формируем имя файлов импорт/экспорт
	СформироватьИмяФайла();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "КодВБанкеЭкспорт". 
// Процедура меняет банковский счет на "ЮрФизЛицо.ОсновнойБанковскийСчет" 
// (тот, который указан для данной организации)
//
Процедура КодВБанкеЭкспортПриИзменении(Элемент)
	// формируем имя файлов импорт/экспорт
	СформироватьИмяФайла();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ИМПОРТ

// Процедура - обработчик события "ПриИзменении" поля ввода договора
// в строке табличной части "тпИмпорт".
//
Процедура тпИмпортДоговорПриИзменении(Элемент)
	// проверяем заказ, если заказ не с этим договором
	// спрашиваем у пользователя - пока ничего не спрашиваем
	// и очищаем его
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	// проверяем сделку, если договор не тот - очищаем сделку
	Если ТС.Сделка <> Неопределено Тогда
		Если Элемент.Значение <> ТС.Сделка.ДоговорКонтрагента Тогда
			ТС.Сделка = Неопределено;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
// в строке табличной части "тпИмпорт".
//
Процедура тпИмпортКонтрагентПриИзменении(Элемент)
	
	Контрагент = Элемент.Значение;
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если НЕ Контрагент.Пустая() Тогда
		
		// Сделку и Заказ нужно очистить, только если контрагент поменялся
		Если ТС.Сделка <> Неопределено Тогда
			Если Контрагент <> ТС.Сделка.Контрагент Тогда
				ТС.Сделка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Конфигурация = "УТ" Тогда
			Если ТС.Заказ <> Неопределено Тогда
				Если Контрагент <> ТС.Заказ.Контрагент Тогда
					ТС.Заказ = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если Контрагент <> ТС.Договор.Владелец Тогда
			ТС.Договор = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
		КонецЕсли;
	Иначе
		
		// при пустом контрагенте всегда очищаем ЮрФизЛицо, Сделка, Заказ, Договор
		//ТС.ЮрФизЛицо 	= Неопределено;
		ТС.Сделка 		= Неопределено;
		//ТС.Заказ 		= Неопределено;
		ТС.Договор 		= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
		
	КонецЕсли;
КонецПроцедуры // тпИмпортКонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода юр/физ лица
// в строке табличной части "тпИмпорт".
//
Процедура тпИмпортЮрФизЛицоПриИзменении(Элемент)
	
	ЮрФизЛицо = Элемент.Значение;
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если ЮрФизЛицо <> Неопределено И (НЕ ЮрФизЛицо.Пустая()) Тогда
		Если ТС.Контрагент <> ЮрФизЛицо.Контрагент Тогда
			ТС.Контрагент = ЮрФизЛицо.Контрагент;
			
			// Сделку и Заказ нужно очистить, только если контрагент поменялся
			Если ТС.Сделка <> Неопределено Тогда
				Если ТС.Контрагент <> ТС.Сделка.Контрагент Тогда
					ТС.Сделка = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ТС.Заказ <> Неопределено Тогда
				Если ТС.Контрагент <> ТС.Заказ.Контрагент Тогда
					ТС.Заказ = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ТС.Контрагент <> ТС.Договор.Владелец Тогда
				ТС.Договор = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
			КонецЕсли;
			
			
		КонецЕсли;
	Иначе
		// если юрфизлицо очистили не обязательно 
		// очищать все, пусть остается
	КонецЕсли;
	
КонецПроцедуры // тпИмпортЮрФизЛицоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода приход
// в строке табличной части "тпИмпорт".
//
Процедура тпИмпортПриходПриИзменении(Элемент)
	
	Приход = Элемент.Значение;
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если (Приход > 0) И (ТС.Расход > 0) Тогда
		// а зачем мы это сделали?
		// видимо расход надо обнулить
		ТС.Расход = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТС.ВидДокумента) Или ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход").НайтиПоЗначению(ТС.ВидДокумента) = Неопределено Тогда
		ТС.ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриходПоУмолчанию");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода расход
// в строке табличной части "тпИмпорт".
//
Процедура тпИмпортРасходПриИзменении(Элемент)
	
	Расход = Элемент.Значение;
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если (ТС.Приход > 0) И (Расход > 0) Тогда
		// а зачем мы это сделали?
		// видимо приход надо обнулить
		ТС.Приход = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТС.ВидДокумента) Или ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасход").НайтиПоЗначению(ТС.ВидДокумента) = Неопределено Тогда
		ТС.ВидДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасходПоУмолчанию");
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура тпИмпортВидДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	Если ТС.Приход > 0 Тогда
		СписокВидовДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход");;
	ИначеЕсли ТС.Расход > 0 Тогда	
		СписокВидовДокумента = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасход");;
	Иначе 
		Возврат;
	КонецЕсли;	
	Рез = ВыбратьИзСписка(СписокВидовДокумента, Элемент);
	Если Рез <> Неопределено Тогда
		Элемент.Значение = Рез.Значение;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ЮрФизЛицо". Процедура предлагает выбор пользователю из справочника
// "Юридические лица" или "Физические лица" и открывает форму списка для выбора 
// значения. 
//
Процедура тчИмпортЮрФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаЮрЛицо")].Имя, Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаЮрЛицо")].Синоним);
	СписокТипов.Добавить(Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаФизЛицо")].Имя, Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаФизЛицо")].Синоним);

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов,Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,Элемент,);

	//Если НЕ ЭлементыФормы.тчИмпорт.ТекущаяСтрока.Контрагент.Пустая() Тогда
	//	ФормаВыбора.Список.Отбор.Контрагент.Значение      = ЭлементыФормы.тчИмпорт.ТекущаяСтрока.Контрагент;
	//	ФормаВыбора.Список.Отбор.Контрагент.Использование = Истина;
	//КонецЕсли;	

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ОткрытьМножественныйВыборСделки(Элемент)

	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	Если ТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	//выбираем из текущих сделок 
	ФормаВыбораСделки = ПолучитьФорму("ФормаВыбораСделкиПодробная",Элемент);
	ФормаВыбораСделки.Содержание = ТС.Содержание;
	ФормаВыбораСделки.СуммаКРаспределению = ТС.Приход + ТС.Расход;
	ФормаВыбораСделки.Приход = ТС.Приход;
	ФормаВыбораСделки.Контрагент = ТС.Контрагент;
	
	Попытка 
		НайденныеСделкиДляЗаполнения = ?(ТС.НайденныеСделкиДляЗаполнения <> "", ЗначениеИзСтрокиВнутр(ТС.НайденныеСделкиДляЗаполнения), "");
	Исключение
		НайденныеСделкиДляЗаполнения = ""; 
	КонецПопытки;	
	
	Сделки.Очистить();
	Если НайденныеСделкиДляЗаполнения <> "" Тогда
		Сделки.Загрузить(НайденныеСделкиДляЗаполнения);
	КонецЕсли;	
	
	Рез = ФормаВыбораСделки.ОткрытьМодально();

	Если Рез = Истина Тогда
		
		// сохраним выбранные сделки
		ТС.НайденныеСделкиДляЗаполнения = ЗначениеВСтрокуВнутр(Сделки.Выгрузить());
		
		//Если ТЗСделки.Количество() = 1 Тогда
		//	Элемент.Значение = ТЗСделки[0].Сделка;
		//	//заполним договор
		//	Если клЕстьТабличнаяЧасть("РасшифровкаПлатежа",Элемент.Значение.Метаданные()) Тогда
		//		Договор 	= Элемент.Значение.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		//	Иначе
		//		Договор 	= Элемент.Значение.ДоговорКонтрагента;
		//	КонецЕсли;	
		//	ТС.Договор 	= Договор;
		//ИначеЕсли ТЗСделки.Количество() = 0 Тогда	
		//	ТС.НайденныеСделкиДляЗаполнения = "";
		//КонецЕсли;	
		
		КоличествоВыбранныхСделок 	= 0;
		СуммаВыбранныхСделок 		= 0;
		МассивВыбранныхСделок = Новый Массив;
		Для Каждого СтрокаСделки Из Сделки Цикл 
			
			Если НЕ СтрокаСделки.Флаг Или НЕ ЗначениеЗаполнено(СтрокаСделки.Сделка) Тогда
				Продолжить;
			КонецЕсли;	
			
			КоличествоВыбранныхСделок 	= КоличествоВыбранныхСделок + 1;
			СуммаВыбранныхСделок 		= СуммаВыбранныхСделок + СтрокаСделки.СуммаКБ;
			
			МассивВыбранныхСделок.Добавить(СтрокаСделки.Сделка);
			
		КонецЦикла;	
		
		ТС.КоличествоВыбранныхСделок 	= КоличествоВыбранныхСделок;
		ТС.СуммаВыбранныхСделок 		= СуммаВыбранныхСделок;
		
		ТС.МассивВыбранныхСделок = ЗначениеВСтрокуВнутр(МассивВыбранныхСделок);
		
		Если КоличествоВыбранныхСделок > 0 Тогда
			Сделка1 = МассивВыбранныхСделок[0];
			//заполним договор
			Если клЕстьТабличнаяЧасть("РасшифровкаПлатежа",Сделка1.Метаданные()) Тогда
				Договор 	= Сделка1.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			Иначе
				Договор 	= Сделка1.ДоговорКонтрагента;
			КонецЕсли;	
			ТС.Договор 	= Договор;
		КонецЕсли;	
		
		Сделки.Очистить();
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Сделка" в тчИмпорт. 
// Делаем отбор по контрагенту.
//
Процедура тпИмпортСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	ВидДокумента = ТС.ВидДокумента;
	
	
	//довавить режим выбора из списка "Выбрать найденные сделки"
	//только в том случае, если в ЭлементыФормы.тпИмпорт.ТекущаяСтрока.СписокНайденныхСделок больше одного элемента
	Если ТС.Сделка = Неопределено Тогда
		
		Список = Новый СписокЗначений();
		Список.Добавить("МножественныйВыборСделки",	"Множественный выбор сделки");
		Список.Добавить("ОбычныйРежим",				"Обычный режим выбора");
		
		ВыбранныйРежим = ВыбратьИзСписка(Список,Элемент);
		Если ВыбранныйРежим <> Неопределено Тогда
			Если ВыбранныйРежим.Значение = "МножественныйВыборСделки" Тогда
				ОткрытьМножественныйВыборСделки(Элемент);
				Возврат;
			КонецЕсли;	
		КонецЕсли; 

	КонецЕсли;	
	
	// обычный режим
	Если Конфигурация = "БУ" Тогда
		
		СтруктураПараметров   = Новый Структура("Организация,Контрагент,ДоговорКонтрагента,КонецПериода",Организация,ТС.Контрагент,ТС.Договор,ДатаВыписки-1);
		
		Если ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаПриход").НайтиПоЗначению(ВидДокумента) <> Неопределено Тогда 	
			СчетДляОпределенияОстатков = НастройкиОбработки.ВхСчетРасчетов;
		Иначе	
			СчетДляОпределенияОстатков = НастройкиОбработки.ИсхСчетРасчетов;
		КонецЕсли;	
		
		СторонаСчета = 0;
		
		СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",СчетДляОпределенияОстатков);
		СтруктураПараметров.Вставить("СторонаСчета",СторонаСчета);
		
		
		Если ПустаяСтрока(ВидДокумента) Тогда
			Предупреждение(НСтр("ru='Не выбран вид документа!';uk='Не вибран вид документу!'"));
			Возврат;
		КонецЕсли;	
		
		ПустойОбъектДокументДанногоВида = Документы[ВидДокумента].СоздатьДокумент();		
		
		клВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ПустойОбъектДокументДанногоВида.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);
		
	Иначе
		
		Если ТС.Сделка = Неопределено Тогда
			// выберем тип сделки
			
			СтандартнаяОбработка = Истина;
			
			Если ТС.Приход > 0 Тогда	// Приход
				типДокСделки = ПолучитьИмяОбъектаКонфигурации("ТипыДокументовСделкиПриход");
			Иначе	
				типДокСделки = ПолучитьИмяОбъектаКонфигурации("ТипыДокументовСделкиРасход");
			КонецЕсли;	

			Массив = Новый Массив;
			Для Каждого ТипСделки Из типДокСделки Цикл
				Массив.Добавить(Тип("ДокументСсылка."+ ТипСделки.Значение));
			КонецЦикла;	
			
			ОписаниеТипаСделки = Новый ОписаниеТипов(Массив); 
			
			Элемент.ОграничениеТипа = ОписаниеТипаСделки;
			
		Иначе	
			// выберем значение
		
			СтандартнаяОбработка = Ложь;
			
			ФормаВыбораДокумента = Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(,Элемент,);
			ФормаВыбораДокумента.Отбор.Организация.Значение              = Организация;
			ФормаВыбораДокумента.Отбор.Организация.Использование         = Истина;
			
			ФормаВыбораДокумента.Отбор.Контрагент.Значение      = ТС.Контрагент;
			ФормаВыбораДокумента.Отбор.Контрагент.Использование = Истина;
			
			ФормаВыбораДокумента.НачальноеЗначениеВыбора = Элемент.Значение;
			ФормаВыбораДокумента.РежимВыбора = Истина;
			ФормаВыбораДокумента.Открыть();

		КонецЕсли;
		
	КонецЕсли;						 
	
КонецПроцедуры // тпИмпортСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Заказ" в тчИмпорт. 
// Делаем отбор по контрагенту.
//
Процедура тпИмпортЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//заказ только для УТ
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		Возврат;
	КонецЕсли;	
	
	// открываем журнал сделки 
	// отбор ставим только на контрагента и признак сделки
	
	СтандартнаяОбработка = Ложь;
	
	// выберем сначала
	// Формирование списка вариантов.
	Список = Новый СписокЗначений();
	Список.Добавить(1, НСтр("ru='Выбрать заказ покупателя';uk='Вибрати замовлення покупця'"));
	Список.Добавить(2, НСтр("ru='Выбрать заказ поставщику';uk='Вибрати замовлення постачальнику'"));

	ВыбранныйВидЗаказа = ВыбратьИзСписка(Список,Элемент);
	Если ВыбранныйВидЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	
	Если ВыбранныйВидЗаказа.Значение = 1 Тогда
		ФормаВыбора = Документы["ЗаказПокупателя"].ПолучитьФормуВыбора(,Элемент,);
	Иначе
		ФормаВыбора = Документы["ЗаказПоставщику"].ПолучитьФормуВыбора(,Элемент,);
	КонецЕсли; 
	
	ДоговорВзаиморасчетов = ЭлементыФормы.тпИмпорт.ТекущаяСтрока.Договор;
	Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		ФормаВыбора.Отбор.ДоговорВзаиморасчетов.Значение      = ДоговорВзаиморасчетов;
	    ФормаВыбора.Отбор.ДоговорВзаиморасчетов.Использование = Истина;
	КонецЕсли; 
	
	Контрагент = ЭлементыФормы.тпИмпорт.ТекущаяСтрока.Контрагент;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаВыбора.Отбор.Контрагент.Значение      = Контрагент;
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	КонецЕсли; 
	
	ФормаВыбора.Отбор.Организация.Значение              = Организация;
	ФормаВыбора.Отбор.Организация.Использование         = Истина;
	
	Заказ = ЭлементыФормы.тпИмпорт.ТекущаяСтрока.Заказ;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Заказ;
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // тпИмпортЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Договор" в тчИмпорт. 
// Делаем отбор по контрагенту.
//
Процедура тпИмпортДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокатпИмпорт = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	ВидДокумента = СтрокатпИмпорт.ВидДокумента;
	ВидОперации = клОпределитьВидОперации(ВидДокумента);
	
	Если ПустаяСтрока(ВидДокумента) Тогда
		Предупреждение(НСтр("ru='Не выбран вид документа!';uk='Не вибран вид документу!'"));
		Возврат;
	КонецЕсли;	
	
	ВидыДоговораВзаиморасчетов = клОпределитьВидДоговораСКонтрагентом(ВидОперации);
	
	ПустойОбъектДокументДанногоВида = Документы[ВидДокумента].СоздатьДокумент();
	клНачалоВыбораЗначенияДоговораВзаиморасчетов(ПустойОбъектДокументДанногоВида, Организация, Элемент, СтрокатпИмпорт.Контрагент, ВидыДоговораВзаиморасчетов)
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сделка" табличного поля "тпИмпорт". 
// Процедура устанавливает соответствующий "Заказ" и "Договор" для
// текущей строки "тпИмпорт".
// При очистке поля ввода - очищает "Заказ" и "Договор"
//
Процедура тпИмпортСделкаПриИзменении(Элемент)
	Если Элемент.Значение = Неопределено ИЛИ Элемент.Значение.Пустая() Тогда
		//очистить Договор
		ЭлементыФормы.тпИмпорт.ТекущаяСтрока.Договор 	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	Иначе	
		Если клЕстьТабличнаяЧасть("РасшифровкаПлатежа",Элемент.Значение.Метаданные()) Тогда
			Договор 	= Элемент.Значение.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Иначе
			Договор 	= Элемент.Значение.ДоговорКонтрагента;;
		КонецЕсли;	
		ЭлементыФормы.тпИмпорт.ТекущаяСтрока.Договор 	= Договор;
	КонецЕсли;	
	
КонецПроцедуры

Процедура тпИмпортПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// в зависимости от статуса строки выводим строки тпИмпорт различными цветами
	Если ДанныеСтроки.Статус = СтатусыСтрокИмпорта.СуществующийПлатеж Тогда
		ОформлениеСтроки.Ячейки.ЦветСтатуса.ЦветФона = WebЦвета.Серый;
	ИначеЕсли ДанныеСтроки.Статус = СтатусыСтрокИмпорта.ГотовКЗаписи Тогда
		ОформлениеСтроки.Ячейки.ЦветСтатуса.ЦветФона = WebЦвета.НейтральноЗеленый;
	ИначеЕсли ДанныеСтроки.Статус = СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты Тогда
		ОформлениеСтроки.Ячейки.ЦветСтатуса.ЦветФона = WebЦвета.Красный;
	Иначе
		ОформлениеСтроки.Ячейки.ЦветСтатуса.ЦветФона = WebЦвета.Серый;
	КонецЕсли;
	
	// доступность прихода-расхода
	Если ДанныеСтроки.Документ <> Неопределено Тогда
		Если ДанныеСтроки.Документ.Метаданные().Имя = ПолучитьИмяОбъектаКонфигурации("ТипДокументаВыпискаРасход") Тогда
			// расход, зачем же нам редактировать приход?
			ОформлениеСтроки.Ячейки.Приход.ТолькоПросмотр = Истина;	
			ОформлениеСтроки.Ячейки.Расход.ТолькоПросмотр = Ложь;	
		Иначе
			// и наоборот
			ОформлениеСтроки.Ячейки.Приход.ТолькоПросмотр = Ложь;	
			ОформлениеСтроки.Ячейки.Расход.ТолькоПросмотр = Истина;	
		КонецЕсли;
	Иначе
		ОформлениеСтроки.Ячейки.Приход.ТолькоПросмотр = Ложь;	
		ОформлениеСтроки.Ячейки.Расход.ТолькоПросмотр = Ложь;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Сделка) И ДанныеСтроки.МассивВыбранныхСделок <> "" Тогда
		МассивВыбранныхСделок = ЗначениеИзСтрокиВнутр(ДанныеСтроки.МассивВыбранныхСделок); 
		Если ТипЗнч(МассивВыбранныхСделок) = Тип("Массив") И МассивВыбранныхСделок.Количество() > 0 Тогда
			ТекстПоляСделки = "";
			Для Каждого ВыбраннаяСделка Из МассивВыбранныхСделок Цикл
				Если Не ПустаяСтрока(ТекстПоляСделки) Тогда
					ТекстПоляСделки = ТекстПоляСделки + ", ";
				КонецЕсли;
				
				ТекстПоляСделки = ТекстПоляСделки + ВыбраннаяСделка;
			КонецЦикла;	
			ОформлениеСтроки.Ячейки.Сделка.УстановитьТекст(ТекстПоляСделки);		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Заказ" табличного поля "тпИмпорт". 
// Процедура устанавливает соответствующий "Заказ" и "Договор" для
// текущей строки "тпИмпорт".
// При очистке поля ввода - очищает "Заказ" и "Договор"
//
Процедура тпИмпортЗаказПриИзменении(Элемент)
	
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		Возврат;
	КонецЕсли;	
	
	Заказ = Элемент.Значение;
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;	
	
	Если Заказ <> Неопределено Тогда
		// Проверяем юр-физ лицо, контрагента
		Если Заказ.ЮрФизЛицоКонтрагента <> ТС.ЮрФизЛицо Тогда
			ТС.ЮрФизЛицо = Заказ.ЮрФизЛицоКонтрагента;
		КонецЕсли; 
		
		Если Заказ.Контрагент <> ТС.Контрагент Тогда
			ТС.Контрагент = Заказ.Контрагент;
		КонецЕсли; 
		
		// Устанавливаем договор в соответствии с заказом
		Если ТС.Договор <> Заказ.ДоговорВзаиморасчетов Тогда
			ТС.Договор = Заказ.ДоговорВзаиморасчетов;
		КонецЕсли; 
	КонецЕсли;
	
	// проверяем сделку, если заказ не тот - очищаем сделку
	Если ТС.Сделка <> Неопределено Тогда
		Если клЕстьРеквизит("Заказ",ТС.Сделка.Метаданные()) Тогда 
			Если Заказ <> ТС.Сделка.Заказ Тогда
				ТС.Сделка = Неопределено;
			КонецЕсли;	
		КонецЕсли;

		Если ТС.Договор <> ТС.Сделка.ДоговорВзаиморасчетов Тогда
			ТС.Сделка = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // тпИмпортЗаказПриИзменении()

// Обработчик события "ПриОкончанииРедактирования" табличного поля тпИмпорт
// вызывает соответсвующие процедуры ПриИзмении.... и меняет статус строк выписки
Процедура тпИмпортПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		// ничего
		Возврат;
	КонецЕсли; 
	
	ТС = ЭлементыФормы.тпИмпорт.ТекущаяСтрока;
	
	// вызываем процедуру, которая проверяет заполненность реквизитов для всех строк
	// мофицированность для существующих документов и установит правильный статус строки
	ЗаполненыВсеРеквизитыВыписки(ТС);
		
КонецПроцедуры

Процедура тпИмпортПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если НоваяСтрока = Истина Тогда
		Элемент.ТекущиеДанные.Документ 	= Неопределено;
		Элемент.ТекущиеДанные.Статус 	= СтатусыСтрокИмпорта.НеобходимоЗаполнитьРеквизиты;
		
		//назначить типы некоторым реквизитам
		Элемент.ТекущиеДанные.Договор 		= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
		Если Конфигурация = "УПП" Или Конфигурация = "УТ" Тогда
			Элемент.ТекущиеДанные.Подразделение	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаПодразделения")].ПустаяСсылка();
		КонецЕсли;	
		//Элемент.ТекущиеДанные.Ответственный	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаОтветственный")].ПустаяСсылка();
		
	КонецЕсли; 
КонецПроцедуры

Процедура тпИмпортПриАктивизацииСтроки(Элемент)
	ДоступностьПанелиИмпорта();
	
	ОбновитьИнфоСтрокуДеталиСтрокиИмпорта();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЭКСПОРТ

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент" табличного поля "тпЭкспорт". 
// Процедура находит и устанавливает соответствующего "ЮрФизЛицо"а для 
// текущей строки "тпЭкспорт".
//
Процедура тчЭкспортКонтрагентПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение.Пустая() Тогда
		ЮрФизЛицо = Элемент.Значение.ОсновноеЮрФизЛицо;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.ЮрФизЛицо = ЮрФизЛицо;
		// Сделку нужно очистить
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Сделка 	= Неопределено;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	Иначе
		//очистить ЮрФизЛицо, Сделка, Договор
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.ЮрФизЛицо = Неопределено;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Сделка 	= Неопределено;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЮрФизЛицо" табличного поля "тпЭкспорт". 
// Процедура находит и устанавливает соответствующего "Контрагент"а для 
// текущей строки "тпЭкспорт".
//
Процедура тчЭкспортЮрФизЛицоПриИзменении(Элемент)
	
	Если Элемент.Значение <> Неопределено И (НЕ Элемент.Значение.Пустая()) Тогда
		Контрагент = Элемент.Значение.Контрагент;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Контрагент = Контрагент;
		// Сделку нужно очистить
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Сделка 		= Неопределено;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 		= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	Иначе
		//очистить Контрагент, Сделка, Договор
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Контрагент 	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")].ПустаяСсылка();
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Сделка 		= Неопределено;
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 		= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ЮрФизЛицо". Процедура предлагает выбор пользователю из справочника
// "Юридические лица" или "Физические лица" и открывает форму списка для выбора 
// значения. 
//
Процедура тпЭкспортЮрФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаЮрЛицо")].Имя, Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаЮрЛицо")].Синоним);
	СписокТипов.Добавить(Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаФизЛицо")].Имя, Метаданные.Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаФизЛицо")].Синоним);

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов,Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,Элемент,);

	//Если НЕ ЭлементыФормы.тчЭкспорт.ТекущаяСтрока.Контрагент.Пустая() Тогда
	//	ФормаВыбора.Список.Отбор.Контрагент.Значение      = ЭлементыФормы.тчЭкспорт.ТекущаяСтрока.Контрагент;
	//	ФормаВыбора.Список.Отбор.Контрагент.Использование = Истина;
	//КонецЕсли;	

	ФормаВыбора.Открыть();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Сделка" в тчЭкспорт. 
// Делаем отбор по контрагенту.
//
Процедура тпЭкспортСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(,Элемент,);
	Контрагент = ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Контрагент;
	ФормаВыбора.Отбор.Контрагент.Значение 		= Контрагент;
	ФормаВыбора.Отбор.Контрагент.Использование 	= Истина;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Договор" в тчЭкспорт. 
// Делаем отбор по контрагенту.
//
Процедура тпЭкспортДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(,Элемент,);
	Контрагент = ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Контрагент;
	ФормаВыбора.Отбор.Владелец.Значение = Контрагент;
	ФормаВыбора.Отбор.Владелец.Использование = Истина;
	ФормаВыбора.Открыть();
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сделка" табличного поля "тпЭкспорт". 
// Процедура устанавливает соответствующий "Заказ" и "Договор" для
// текущей строки "тпЭкспорт".
// При очистке поля ввода - очищает "Договор"
//
Процедура тпЭкспортСделкаПриИзменении(Элемент)
	Если Элемент.Значение = Неопределено ИЛИ Элемент.Значение.Пустая() Тогда
		//очистить Договор
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 	= Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
	Иначе	
		Если клЕстьТабличнаяЧасть("РасшифровкаПлатежа",Элемент.Значение.Метаданные()) Тогда
			Договор 	= Элемент.Значение.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Иначе
			Договор = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].ПустаяСсылка();
		КонецЕсли;	
		ЭлементыФормы.тпЭкспорт.ТекущаяСтрока.Договор 	= Договор;
	КонецЕсли;	
КонецПроцедуры

Процедура тпЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование)
	// не разрешаем в таблице платежных поручений что-либо добавлять вручную
	Отказ = Истина;
КонецПроцедуры

Процедура тпИмпортСделкаОткрытие(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьМножественныйВыборСделки(Элемент);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НастройкиОбработки = Новый Структура;
ФормаОбработкиФормата = Неопределено;

НадоОбновитьТекущуюСтроку = Ложь;
НомерНовойТекущейСтроки = 0;