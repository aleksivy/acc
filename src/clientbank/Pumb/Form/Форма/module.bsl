Перем ИмяФормата;

// Отказ от открытия обработки, выдаем сообщение о "служебности" обработки
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Предупреждение("Обработка вызывается только из ПП ""Обмен информацией между ПП ""1С:Предприятие 8.0"" и системами ""Клиент-Банк""");
	Отказ = Истина;
КонецПроцедуры

// Возвращает Истина, если код в банке есть, Ложь - иначе
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если код в банке есть, Ложь - иначе
//
Функция ЕстьКодВБанке() Экспорт
	Возврат Истина;
КонецФункции	
	
// Возвращает наименование кода в банке
//
// Параметры:
//
//	нет
//
// Возвращаемое значение:
//
// 	Строка - наименование кода
//
Функция ПолучитьНаименованиеКода() Экспорт
	Возврат "Номер узла";
КонецФункции		

// Возвращает код банка организации
//
// Параметры:
//
//  Структура Параметры
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка   – код организации в банке
//
Функция кбПолучитьКодОрганизации(Параметры) Экспорт
	КодВБанке = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "КодВБанке");	
	Возврат КодВБанке;
КонецФункции

// Возвращает по имени файла каталог
//
// Параметры:
//
//  Файл - имя файла - строка
//
// Возвращаемое значение:
//
//   Строка – каталог
//
Функция ПолучитьКаталог(Файл)
	Если Файл = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	ИмяФайла = Файл;
	
	Каталог = "";
	поз = Найти(ИмяФайла, "\");
	Пока поз Цикл
		Каталог = Каталог + Лев(ИмяФайла, поз);
		ИмяФайла = Сред(ИмяФайла, поз + 1);
		поз = Найти(ИмяФайла, "\");
	КонецЦикла;	
	Возврат Каталог;
	
КонецФункции	

// Формирует имя файла по умолчанию
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
// 
// Возвращаемое значение:
//
//   имя файла по умолчанию
//
Функция СформироватьИмяФайла(Параметры) Экспорт 
	ИмяФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" + Параметры.Режим);
	Если Параметры.Режим = "Импорт" Тогда
		cКатал = Формат(Параметры.Дата,"ДФ=yyyyMMdd");
		//КодВБанке = НомерУзла: "nnn"
		сФайл = СокрЛП(Параметры.КодВБанке) + "vp" + Формат(ДеньГода(Параметры.Дата),"ЧЦ=3; ЧВН=") + ".dbf";
		Каталог = ПолучитьКаталог(ИмяФайла);
		Возврат Каталог + сФайл;
	Иначе	
		Если ИмяФайла = Неопределено Тогда
			//Возврат "import.txt"; //здесь для экспорта нужно указать каталог
			Возврат "";
		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

// Выбирает имя файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - текущий тип файла ("TXT"/"DBF"/"XML")
//
// Возвращаемое значение:
//
//   Строка   – выбранное имя файла
//
Функция ВыбратьИмяФайла(Параметры) Экспорт
	
	РежимДиалога = ?(Параметры.Режим = "Импорт", РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг = Новый ДиалогВыбораФайла(РежимДиалога);
	
	Если Параметры.Режим = "Импорт" Тогда
		Длг.ПолноеИмяФайла = Параметры.ТекущееИмяФайла;
		Длг.Заголовок = "Выберите файл";
		Длг.Фильтр = "Файлы dBase (*.dbf)|*.dbf";
		Длг.Расширение = "dbf";   //Параметры.ТекущийТипФайла;
	Иначе
		Длг.Заголовок = "Выберите каталог установки системы";
		//Длг.Фильтр = "Текстовые файлы (*.txt)|*.txt";
		//Длг.Расширение = "txt";   //Параметры.ТекущийТипФайла;
	КонецЕсли;	
	
	Если Длг.Выбрать() Тогда
		Если Параметры.Режим = "Импорт" Тогда
			Возврат Длг.ПолноеИмяФайла;
		Иначе
			Возврат Длг.Каталог;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Параметры.ТекущееИмяФайла;
КонецФункции

// Возвращает Истина, если выбираем каталог, Ложь - если файл
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если каталог, Ложь - иначе
//
Функция ФайлИмпортаКаталог() Экспорт
	Возврат Ложь;	
КонецФункции

// Возвращает Истина, если выбираем каталог, Ложь - если файл
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если каталог, Ложь - иначе
//
Функция ФайлЭкспортаКаталог() Экспорт
	Возврат Истина;	
КонецФункции

// Возвращает сохраненный тип файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
//
// Возвращаемое значение:
//
//   Строка – текущий тип файла ("TXT"/"DBF"/"XML")
//
Функция ПолучитьТекущийТипФайла(Параметры) Экспорт
	
	ТипФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "ТипФайла" + Параметры.Режим);
	
	Если Параметры.Режим = "Импорт" Тогда
		Если ТипФайла = Неопределено Тогда
			Возврат "DBF";
		Иначе
			Возврат ТипФайла;
		КонецЕсли;	
	Иначе 
		// Параметры.Режим = "Экспорт"
		Если ТипФайла = Неопределено Тогда
			Возврат "TXT";
		Иначе
			Возврат ТипФайла;
		КонецЕсли;	
	КонецЕсли;	

КонецФункции

// Сохраняет значения для формата:
//
//	Имя файла
// 	Тип файла 
// 	Код в банке, если такой существует
//
// Параметры:
// 		Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - строка - текущий тип файла в основной обработке
//  
Процедура СохранитьЗначения(Параметры) Экспорт
	
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" + Параметры.Режим, Параметры.ТекущееИмяФайла);
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ТипФайла" + Параметры.Режим, Параметры.ТекущийТипФайла);
	Если ЕстьКодВБанке() Тогда 
		СохранитьЗначение(ИмяФормата + Параметры.Организация +  "КодВБанке", Параметры.КодВБанке); // если есть 
	КонецЕсли;	
	
КонецПроцедуры

// Обработка формата должна вернуть режимы и типы файлов, которая она поддерживает.
//
// Параметры: нет
//
//  Возвращаемое значение:
//
//	Возвращает структуру со следующими ключами:
//
//	Импорт (Истина/Ложь)
//	ИмпортTXT (Истина/Ложь)
//	ИмпортDBF (Истина/Ложь)
//	ИмпортXML (Истина/Ложь)
//	Экспорт (Истина/Ложь)
//	ЭкспортTXT (Истина/Ложь) 
//	ЭкспортDBF (Истина/Ложь)
//	ЭкспортXML (Истина/Ложь)
//
Функция ПолучитьПоддерживаемыеРежимы() Экспорт
	
	ИмпортЭкспорт = Новый Структура;
	ИмпортЭкспорт.Вставить("Импорт", Истина);
	ИмпортЭкспорт.Вставить("ИмпортTXT", Ложь);
	ИмпортЭкспорт.Вставить("ИмпортDBF", Истина);
	ИмпортЭкспорт.Вставить("ИмпортXML", Ложь);
	
	ИмпортЭкспорт.Вставить("Экспорт", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортTXT", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортDBF", Ложь);
	ИмпортЭкспорт.Вставить("ЭкспортXML", Ложь);
	
	Возврат ИмпортЭкспорт;
	
КонецФункции

// Осуществляет импорт выписки из файла типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортTXT(Параметры)
	Возврат Неопределено;	
КонецФункции	

// Осуществляет импорт выписки из файла типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортXML(Параметры)
	Возврат Неопределено;	
КонецФункции	

// Осуществляет импорт выписки из файла типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортDBF(Параметры)
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase.ANSI;    //Windows
	
	ИмяФайла = Параметры.ИмяФайла;
	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяФайла,,Истина); //Только для чтения
	Исключение
		Предупреждение("Ошибка открытия файла " + ИмяФайла);
		Возврат Неопределено;
	КонецПопытки;		
	
	Если НЕ ФайлDBF.Открыта() Тогда
		Предупреждение("Ошибка открытия файла " + ИмяФайла);
		Возврат Неопределено;
	КонецЕсли;
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	ФайлDBF.Первая();
	Пока НЕ ФайлDBF.ВКонце() Цикл
		Если ФайлDBF.ЗаписьУдалена() Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		
		Если Цел(ФайлDBF.TYPEDOC) = 0 Тогда // это служебная запись - проверяем информацию о счете
			// проверка на дату платежа
			Если ФайлDBF.DATE <> Формат(Параметры.ДатаДок,"ДФ=yyyyMMdd")Тогда
				фМожемИмпортировать = 0;
				ФайлDBF.Следующая();
				Продолжить;
			КонецЕсли;	
			
			// проверка на вылюту
			Если (Цел(ФайлDBF.MFO) <> 980) Тогда
				фМожемИмпортировать = 0;
				ФайлDBF.Следующая();
				Продолжить;
			КонецЕсли;
			
			// проверка на совпадение расчетного счета
			Если СокрЛП(Формат(ФайлDBF.NUMACC, "ЧГ=0")) <> Параметры.РСчет Тогда
				фМожемИмпортировать = 0;
				ФайлDBF.Следующая();
				Продолжить;
			КонецЕсли;
			
			фМожемИмпортировать = 1;
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;

		Если фМожемИмпортировать = 0 Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		
		НовСтрока = тзВыписка.Добавить();
		
		НовСтрока.Приход 	= ФайлDBF.CREDIT;
		НовСтрока.Расход 	= ФайлDBF.DEBET;
		НовСтрока.НомерПП 		= СокрЛП(Формат(ФайлDBF.NDOC,"ЧГ=0"));
		НовСтрока.ОКПО			= СокрЛП(Формат(ФайлDBF.EDRPU,"ЧГ=0"));
		НовСтрока.Контрагент	= ""; // не выгружает его клиент-банк в файл...
		НовСтрока.МФО 			= СокрЛП(Формат(ФайлDBF.MFO,"ЧГ=0"));
		НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.NUMACC,"ЧГ=0"));
		НовСтрока.Содержание 	= СокрЛП(ФайлDBF.COMMENT);
		
		ФайлDBF.Следующая();
	КонецЦикла;	
	
	Если НЕ тзВыписка.Количество() И ФайлDBF.КоличествоЗаписей() Тогда
		Предупреждение("В текущем файле нет платежей с данной датой выписки и расчетным счетом!");
	КонецЕсли;
	
	ФайлDBF.ЗакрытьФайл();
	
	Возврат тзВыписка;
	
КонецФункции	

// Осуществляет импорт выписки из файла
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортВыписки(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ИмпортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ИмпортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ИмпортXML(Параметры);
	КонецЕсли;	
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортTXT(Параметры)
	
	Путь = Параметры.ИмяФайла;
	
	ИмяИндФайла = НайтиФайлы(Путь+"\client", "curnumtx.*");
	//Если ИмяИндФайла.Количество() = 0 Тогда
	//	Предупреждение("Не найден служебный файл системы ""Клиент-Банк""!");
	//	Возврат Ложь;
	//КонецЕсли;
	
	ПроверяемКаталог = Новый Файл(Путь + "\EP1\");
	Если НЕ ПроверяемКаталог.Существует() Тогда
		//создадим каталог Путь + "\EP1\"
		СоздатьКаталог(Путь + "\EP1\");
	КонецЕсли;	
	
	ИмяИндФайла = ИмяИндФайла[0].ПолноеИмя;
	ИндексФайла = Цел(Прав(ИмяИндФайла, 3));
	
	ВыгруженоДокументов = 0;
	
	Л = "<";
	П = ">";
	Для Каждого Строка из Параметры.тзПлатежныеПоручения Цикл
		Текст 	= Новый ТекстовыйДокумент;
		
		//КодВБанке = Параметры.КодВБанке;
		КодВБанке = 123; //временно
		
		сФайл = Путь + "\EP1\" + Формат(КодВБанке,"ЧЦ=3; ЧВН=") + "tb" + Формат(ДеньГода(РабочаяДата),"ЧЦ=3; ЧВН=") + "."+Формат(ИндексФайла + ВыгруженоДокументов, "ЧЦ=3; ЧВН=;ЧН=000");		
		
		ТекСтрока = "<B>"; // Тип документа
		ТекСтрока = ТекСтрока + Л + "ЭЦП " + Формат(Строка.Сумма, "ЧРД=.;ЧН=0;ЧГ=0") + П;
		ТекСтрока = ТекСтрока + Л + СокрЛП(Строка.НомерПП) + П;
		ТекСтрока = ТекСтрока + Л + Формат(Строка.ДатаПП,"ДФ=dd/MM/yyyy") + П;
		ТекСтрока = ТекСтрока + Л + СокрЛП(Формат(Параметры.НашСчет,"ЧГ=0")) + П;
		ТекСтрока = ТекСтрока + Л + СокрЛП(Формат(Строка.Сумма, "ЧРД=,;ЧДЦ=2; ЧН=0;ЧГ=0;ЧЦ=16")) + П;
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.Контрагент),100) + П;
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.Банк),60) + П;
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.МФО),9) + П;
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.Счет),14) + П;
		СуммаПрописью = ЧислоПрописью(Строка.Сумма,,"гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2");
		ТекСтрока = ТекСтрока + Л + СокрЛП(СуммаПрописью) + П;  
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.Содержание), 160) + П;
		ТекСтрока = ТекСтрока + Л + Лев(СокрЛП(Строка.ОКПО),11) + П;
		ТекСтрока = ТекСтрока + Л + П; // Город банка получателя
		
        
		Текст.ДобавитьСтроку(ТекСтрока);
		
		Попытка
			Текст.Записать(сФайл, КодировкаТекста.ANSI);
			ВыгруженоДокументов = ВыгруженоДокументов + 1;
		Исключение
			Попытка
				ПереместитьФайл (ИмяИндФайла, Путь+"\client\curnumtx."+Формат(ИндексФайла + ВыгруженоДокументов, "ЧЦ=3; ЧВН=;ЧН=000"));
			Исключение
				Предупреждение("Невозможно перезаписать служебный файл системы ""Клиент-Банк""!");
			КонецПопытки;
			
			Предупреждение("Ошибка записи файла " + сФайл);
			Возврат Ложь;
		КонецПопытки;		
	
	КонецЦикла;          
	
	Попытка
		ПереместитьФайл (ИмяИндФайла, Путь+"\client\curnumtx." + Формат(ИндексФайла + ВыгруженоДокументов, "ЧЦ=3; ЧВН=;ЧН=000"));
	Исключение
		Предупреждение("Невозможно перезаписать служебный файл системы ""Клиент-Банк""!");
	КонецПопытки;
	
	
	Возврат Истина;
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортXML(Параметры)
	Возврат Ложь;
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортDBF(Параметры)
	Возврат Ложь;
КонецФункции

// Осуществляет экспорт платежных поручений в файл
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортПлатежныхПоручений(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ЭкспортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ЭкспортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ЭкспортXML(Параметры);
	КонецЕсли;	
		
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) после импорта. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаИмпорта() Экспорт
	Возврат Ложь;
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) перед экспортом. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаЭкспорта() Экспорт
	Возврат Истина;
КонецФункции

ИмяФормата = "ПУМБ";
