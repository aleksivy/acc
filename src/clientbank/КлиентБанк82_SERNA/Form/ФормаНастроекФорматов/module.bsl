// (С) АБИ Украина 2004

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем Сохранили;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Добавляет указанный формат обмена в тчИспользуемыеФорматыОбмена
// ИмяФайла и СуществуетФайл берем с тчИспользуемыеФорматыОбмена
//
// Параметры:
//
//  ИмяФорматаОбмена – Строка  – имя формата обмена
//
//  МФО              – строка – МФО банка
//
Процедура ДобавитьФорматОбмена(ИмяФорматаОбмена, МФО)
	Если ИмяФорматаОбмена <> Неопределено Тогда
		// заполняем таблицу, если соответствия нет, сообщаем в окно сообщений
		// проверим, не было ли уже такого формата в таблице
		СтрокаИспользуемыеФорматы = тчИспользуемыеФорматыОбмена.Найти(ИмяФорматаОбмена, "ИмяФормата");
		Если СтрокаИспользуемыеФорматы <> Неопределено Тогда
			// строка с таким форматом уже есть в таблице 
			Возврат;
		КонецЕсли;
		СтрокаВсеФорматыОбмена = тчВсеФорматыОбмена.Найти(ИмяФорматаОбмена, "ИмяФормата");
		Если СтрокаВсеФорматыОбмена <> Неопределено Тогда
			СтрокаИспользуемыеФорматы = тчИспользуемыеФорматыОбмена.Добавить();
			СтрокаИспользуемыеФорматы.ИмяФормата = ИмяФорматаОбмена;
			СтрокаИспользуемыеФорматы.ИмяФайла = СтрокаВсеФорматыОбмена.ИмяФайла;
			СтрокаИспользуемыеФорматы.СуществуетФайл = СтрокаВсеФорматыОбмена.СуществуетФайл;
		КонецЕсли;	
	Иначе
		Сообщить(НСТР("ru='Не найдено соответствующего формата для банка с МФО ';uk='Не знайдено відповідного формату для банку з МФО '") + МФО);
	КонецЕсли;
КонецПроцедуры // ДобавитьФорматОбмена()

// Заполняет тчИспользуемыеФорматыОбмена форматами, определяемыми по МФО всех банковских счетов всех организаций
// 
// Параметры: нет
//
Процедура ЗаполнитьПоСчетам()

	// спрашиваем - очистить таблицу или добавить к существующим форматам
	Если тчИспользуемыеФорматыОбмена.Количество() > 0 Тогда
		Очистить = Вопрос(НСТР("ru='Очистить таблицу используемых форматов?';uk='Очистити таблицю використовуваних форматів?'"), РежимДиалогаВопрос.ДаНет);
		Если Очистить = КодВозвратаДиалога.Да Тогда
			тчИспользуемыеФорматыОбмена.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// запрос по всем банковским счетам
	// владелец у которых юрфизлицо организации
	
	Если Конфигурация = "УТ" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчета.Банк.Код КАК МФО
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|СОЕДИНЕНИЕ 
		|(
		|	ВЫБРАТЬ
		|		Организации.ЮрФизЛицо КАК ЮрФизЛицо
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|) КАК ЮрФизЛицаОрганизаций
		|ПО  БанковскиеСчета.Владелец = ЮрФизЛицаОрганизаций.ЮрФизЛицо";
   	ИначеЕсли Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчета.Банк.Код КАК МФО
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|СОЕДИНЕНИЕ 
		|(
		|	ВЫБРАТЬ
		|		Организации.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Организации КАК Организации) КАК Организации
        |	ПО БанковскиеСчета.Владелец = Организации.Ссылка";
				   
	КонецЕсли;			   
			   
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МФО = Выборка.МФО;
		ИмяФорматаОбмена = сооМФОФормат[СокрЛП(МФО)];
		ДобавитьФорматОбмена(ИмяФорматаОбмена, МФО);
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьПоСчетам()

// Добавляет в тчИспользуемыеФорматыОбмена формат указанного пользователем банковского счета
//
// Параметры: нет
//
//
Процедура ДобавитьПоСчету()
	ФормаВыбораОрганизации = Справочники.Организации.ПолучитьФормуВыбора();
	ВыбраннаяОрганизация = ФормаВыбораОрганизации.ОткрытьМодально();
	
	Если ВыбраннаяОрганизация = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора();
	Если Конфигурация = "УТ" Тогда
		ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВыбраннаяОрганизация.ЮрФизЛицо;
	ИначеЕсли Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВыбраннаяОрганизация;
	КонецЕсли;	
	ВыбранныйСчет = ФормаВыбораБанковскогоСчета.ОткрытьМодально();
	
	Если ВыбранныйСчет = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// определяем имя формата обмена
	МФО = ВыбранныйСчет.Банк.Код;
	ИмяФорматаОбмена = сооМФОФормат[СокрЛП(МФО)];
	ДобавитьФорматОбмена(ИмяФорматаОбмена, МФО);	
	
КонецПроцедуры // ДобавитьПоСчету()

// Открывает форму отправки письма с запросом к разработчику обработки на отсутствующие файлы обработок обмена
//
// Параметры: нет
//
//
Процедура ЗапросНаФайлы()
	// проходим по тчИспользуемыеФорматыОбмена, формируем список отсутвующих файлов, 
	// открываем форму запроса файлов
	сзФайлы = Новый СписокЗначений;
	Для Каждого СтрокаИспользуемыеФорматыОбмена Из тчИспользуемыеФорматыОбмена Цикл
		Если НЕ СтрокаИспользуемыеФорматыОбмена.СуществуетФайл Тогда
			сзФайлы.Добавить(СтрокаИспользуемыеФорматыОбмена.ИмяФайла);
		КонецЕсли; 
	КонецЦикла; 
	
	ФормаЗапросаФайлов = ЭтотОбъект.ПолучитьФорму("ФормаЗапросаФайлов");
	ФормаЗапросаФайлов.сзФайлы = сзФайлы;
	ФормаЗапросаФайлов.ОткрытьМодально();
	
КонецПроцедуры // ЗапросНаФайлы()

// Процедура сортирует список используемых форматов
// Параметры:
//   Нет
//
Процедура СортироватьСписок()
	тзИспользуемыеФорматыОбмена = тчИспользуемыеФорматыОбмена.Выгрузить();
	тзИспользуемыеФорматыОбмена.Сортировать("ИмяФормата");
	
	н = 0;
	Колво = тзИспользуемыеФорматыОбмена.Количество();
	Пока н < Колво Цикл
		Если тзИспользуемыеФорматыОбмена[н].ИмяФормата = "" Тогда
			тзИспользуемыеФорматыОбмена.Удалить(тзИспользуемыеФорматыОбмена[н]);
			Колво = Колво - 1;
			Продолжить;
		КонецЕсли;
		
		Если (н <> Колво - 1) И тзИспользуемыеФорматыОбмена[н].ИмяФормата = тзИспользуемыеФорматыОбмена[н + 1].ИмяФормата Тогда
			тзИспользуемыеФорматыОбмена.Удалить(тзИспользуемыеФорматыОбмена[н + 1]);	
			Колво = Колво - 1;
		Иначе 
			н = н + 1;
		КонецЕсли;
	КонецЦикла;	
	
	тчИспользуемыеФорматыОбмена.Загрузить(тзИспользуемыеФорматыОбмена);
КонецПроцедуры // СортироватьСписок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	// устанавиливаем список выбора для колонки "ИмяФормата" как список всех возможных форматов
	ЭлементыФормы.тпИспользуемыеФорматыОбмена.Колонки.ИмяФормата.ЭлементУправления.СписокВыбора = сзВсеФорматыОбмена;
	Сохранили = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Модифицированность И НЕ Сохранили Тогда
		Рез = Вопрос(НСТР("ru='Список используемых форматов был изменен. Записать изменения?';uk='Список використовуваних форматів був змінений. Записати зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Рез = КодВозвратаДиалога.Да Тогда
			КнопкаСохранитьНажатие(Неопределено);
		ИначеЕсли Рез = КодВозвратаДиалога.Нет Тогда
			//  
		ИначеЕсли Рез = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;	
		Иначе
			//
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура-обработчик нажатия на кнопку "Сохранить"
//
Процедура КнопкаСохранитьНажатие(Элемент)
	СортироватьСписок();
	
	// формируем новый файл clientbank.ini
	ЗаписатьИспользуемыеФорматыОбмена();
	// 
	Сохранили = Истина;
	Закрыть(1);
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Заполнить по счетам"
//
Процедура КпИспользуемыеФорматыОбменаЗаполнитьПоСчетам(Кнопка)
	ЗаполнитьПоСчетам();	
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Добавить по счету"
//
Процедура КпИспользуемыеФорматыОбменаДобавитьПоСчету(Кнопка)
	ДобавитьПоСчету();
КонецПроцедуры

// Процедура-обработчик нажатия на кнопку "Отправить запрос на файлы"
//
Процедура КпИспользуемыеФорматыОбменаОтправитьЗапросНаФайлы(Кнопка)
	ЗапросНаФайлы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП ИспользуемыеФорматыОбмена

Процедура тпИспользуемыеФорматыОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.СуществуетФайл Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	Иначе
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
КонецПроцедуры

Процедура тпИспользуемыеФорматыОбменаИмяФорматаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// находим в тчВсеФорматыОбмена соответствующее значение
	СтрокаВсеФорматыОбмена = тчВсеФорматыОбмена.Найти(ВыбранноеЗначение, "ИмяФормата");
	Если СтрокаВсеФорматыОбмена <> Неопределено Тогда
		ЭлементыФормы.тпИспользуемыеФорматыОбмена.ТекущаяСтрока.ИмяФайла = СтрокаВсеФорматыОбмена.ИмяФайла;
		ПолноеИмяФайлаОбработки = НастройкиОбработки.ИмяКаталогаКБ + СтрокаВсеФорматыОбмена.ИмяФайла;
		ЭлементыФормы.тпИспользуемыеФорматыОбмена.ТекущаяСтрока.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
	КонецЕсли; 
КонецПроцедуры

