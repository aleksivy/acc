// (С) АБИ Украина 2004

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПроверитьЗаполнениеПолейФорматы()
	Для Каждого СтрокаФормата Из ФорматыОбмена Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаФормата.ИмяФормата) Тогда
			Предупреждение(НСтр("ru = 'На закладке ""Форматы"" не заполнено имя формата.'; uk = 'На закладці ""Формати"" не заповнене ім''я формату.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаФормата.ИмяФайлаОбработкиФормата) Тогда
			Предупреждение(НСтр("ru = 'На закладке ""Форматы"" не заполнено имя файла обработки формата.'; uk = 'На закладці ""Формати"" не заповнене ім''я файлу обробки формату.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции	


// Процедура сохраняет значения настроек
// Параметры:
//   Нет
//
Процедура СохранитьЗначенияНастроек()
	
	СохранитьЗначение("КБ8:ОрганизацияПоУмолчанию", ЭлементыФормы.ОрганизацияПоУмолчанию.Значение.Код);
	СохранитьЗначение("КБ8:РасчетныйСчетПоУмолчанию", ЭлементыФормы.РасчетныйСчетПоУмолчанию.Значение.Код);
	
	СохранитьЗначение("КБ8:ИмпортТолькоВходящихПлатежей", ЭлементыФормы.ИмпортТолькоВходящихПлатежей.Значение);
	СохранитьЗначение("КБ8:АвтоИмпортВыписок", ЭлементыФормы.АвтоИмпортВыписок.Значение);
	СохранитьЗначение("КБ8:АвтоЗаполнениеТаблицыЭкспорта", ЭлементыФормы.АвтоЗаполнениеТаблицыЭкспорта.Значение);
	СохранитьЗначение("КБ8:ПытатьсяПроводитьСозданныеДокументы", ЭлементыФормы.ПытатьсяПроводитьСозданныеДокументы.Значение);
	СохранитьЗначение("КБ8:ОткрыватьСозданныеДокументы", ЭлементыФормы.ОткрыватьСозданныеДокументы.Значение);
	СохранитьЗначение("КБ8:ОткрыватьТолькоДокументыСОшибками", ЭлементыФормы.ОткрыватьТолькоДокументыСОшибками.Значение);
	
	СохранитьЗначение("КБ8:АвтоСозданиеКонтрагента", ЭлементыФормы.АвтоСозданиеКонтрагентаУПП.Значение);
		
	СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатимМы", ЭлементыФормы.РодительНовыхКонтрагентовПлатимМыУПП.Значение.Код);
	СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатятНам", ЭлементыФормы.РодительНовыхКонтрагентовПлатятНамУПП.Значение.Код);
		
	СохранитьЗначение("КБ8:КоличествоДнейДляОплатыБанка",	ЭлементыФормы.КоличествоДнейДляОплатыБанка.Значение);
	СохранитьЗначение("КБ8:ПоискСделкиИДоговораПоНомеру", ЭлементыФормы.ПоискСделкиИДоговораПоНомеру.Значение);
		
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда	
		СохранитьЗначение("КБ8:ВхСчетРасчетов", 	ЭлементыФормы.ВхСчетРасчетов.Значение);
		СохранитьЗначение("КБ8:ИсхСчетРасчетов", 	ЭлементыФормы.ИсхСчетРасчетов.Значение);
		СохранитьЗначение("КБ8:ВхСчетАвансов", 		ЭлементыФормы.ВхСчетАвансов.Значение);
		СохранитьЗначение("КБ8:ИсхСчетАвансов", 	ЭлементыФормы.ИсхСчетАвансов.Значение);
		СохранитьЗначение("КБ8:СчетУчетаДС", 		ЭлементыФормы.СчетУчетаДС.Значение);
		
	КонецЕсли;
	
	СохранитьЗначение("КБ8:ИмяКаталогаКБ", ЭлементыФормы.ИмяКаталогаКБ.Значение);
	
	ВидыСортировок = Новый СписокЗначений; 

	стрКонтрагент 	= НСтр("ru='По контрагентам';uk='По контрагентам'");
	
	стрСумма 		= НСтр("ru='По сумме платежей';uk='По сумі платежів'");
	стрПриходРасход = НСтр("ru='По сумме платежей прихода, сумме платежей расхода';uk='По сумі платежів приходу, сумі платежів видатку'");
	стрСтатус		= НСтр("ru='По статусу строки выписки';uk='По статусу рядка виписки'");
	
	Если ЭлементыФормы.тпПорядокСортировки.Значение.Количество() = 4 Тогда 
		Для н = 0 По 3 Цикл	
			Если Строка(ЭлементыФормы.тпПорядокСортировки.Значение[н]) = стрКонтрагент Тогда
				ВидыСортировок.Добавить("Контрагент", "1"); 
			ИначеЕсли Строка(ЭлементыФормы.тпПорядокСортировки.Значение[н]) = стрСумма Тогда	
				ВидыСортировок.Добавить("Сумма", "2");
			ИначеЕсли Строка(ЭлементыФормы.тпПорядокСортировки.Значение[н]) = стрПриходРасход Тогда	
				ВидыСортировок.Добавить("ПриходРасход,Сумма", "3");
			ИначеЕсли Строка(ЭлементыФормы.тпПорядокСортировки.Значение[н]) = стрСтатус Тогда	
				ВидыСортировок.Добавить("Статус", "4");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
	СохранитьЗначение("КБ8:ТипСортировки", ВидыСортировок);
	СохранитьЗначение("КБ8:РаботаСПочтой", РаботаСПочтой);
	
	СохранитьЗначение("КБ8:ФорматыОбмена", ФорматыОбмена);
	
	
КонецПроцедуры // СохранитьЗначенияНастроек()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьСтраниц()
	
	//Если Конфигурация = "УТ" Тогда
	//	ЭлементыФормы.Панель1.Страницы.СтраницаКонтрагентУТ.Видимость 	= Истина;
	//	ЭлементыФормы.Панель1.Страницы.СтраницаКонтрагентУПП.Видимость 	= Ложь;
	//ИначеЕсли Конфигурация = "УПП" Тогда	
		ЭлементыФормы.Панель1.Страницы.СтраницаКонтрагентУТ.Видимость 	= Ложь;
		ЭлементыФормы.Панель1.Страницы.СтраницаКонтрагентУПП.Видимость 	= Истина;
	//КонецЕсли;	
	
КонецПроцедуры	

Процедура УстановитьВидимостьРеквизитов()
	
	Если Конфигурация = "УТ" Тогда
		ЭлементыФормы.РамкаГруппыСчетРасчетов.Видимость = Ложь;
		ЭлементыФормы.НадписьВхСчетРасчетов.Видимость 	= Ложь;
		ЭлементыФормы.ВхСчетРасчетов.Видимость 			= Ложь;
		ЭлементыФормы.НадписьИсхСчетРасчетов.Видимость 	= Ложь;
		ЭлементыФормы.ИсхСчетРасчетов.Видимость 		= Ложь;
		
		ЭлементыФормы.РамкаГруппыСчетАвансов.Видимость 	= Ложь;
		ЭлементыФормы.НадписьВхСчетАвансов.Видимость 	= Ложь;
		ЭлементыФормы.ВхСчетАвансов.Видимость 			= Ложь;
		ЭлементыФормы.НадписьИсхСчетАвансов.Видимость 	= Ложь;
		ЭлементыФормы.ИсхСчетАвансов.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьСчетУчетаДС.Видимость 		= Ложь;
		ЭлементыФормы.СчетУчетаДС.Видимость 			= Ложь;
		
	ИначеЕсли Конфигурация = "УПП" Или Конфигурация = "БУ" Тогда	
		ЭлементыФормы.РамкаГруппыСчетРасчетов.Видимость = Истина;
		ЭлементыФормы.НадписьВхСчетРасчетов.Видимость 	= Истина;
		ЭлементыФормы.ВхСчетРасчетов.Видимость 			= Истина;
		ЭлементыФормы.НадписьИсхСчетРасчетов.Видимость 	= Истина;
		ЭлементыФормы.ИсхСчетРасчетов.Видимость 		= Истина;
		
		ЭлементыФормы.РамкаГруппыСчетАвансов.Видимость 	= Истина;
		ЭлементыФормы.НадписьВхСчетАвансов.Видимость 	= Истина;
		ЭлементыФормы.ВхСчетАвансов.Видимость 			= Истина;
		ЭлементыФормы.НадписьИсхСчетАвансов.Видимость 	= Истина;
		ЭлементыФормы.ИсхСчетАвансов.Видимость 			= Истина;
		
		ЭлементыФормы.НадписьСчетУчетаДС.Видимость 		= Истина;
		ЭлементыФормы.СчетУчетаДС.Видимость 			= Истина;
	КонецЕсли;	
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()	

Процедура УстановитьВидимостьФлажков()
	
	ЭлементыФормы.ОткрыватьТолькоДокументыСОшибками.Доступность = ЭлементыФормы.ОткрыватьСозданныеДокументы.Значение;
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// Заполняем поля 
	
	ЭлементыФормы.ИмяКаталогаКБ.Значение 				        = ВосстановитьЗначение("КБ8:ИмяКаталогаКБ");
	
	ЭлементыФормы.ОрганизацияПоУмолчанию.Значение 				= Справочники.Организации.НайтиПоКоду(ВосстановитьЗначение("КБ8:ОрганизацияПоУмолчанию"),Истина);
	ЭлементыФормы.РасчетныйСчетПоУмолчанию.Значение 			= Справочники.БанковскиеСчета.НайтиПоКоду(ВосстановитьЗначение("КБ8:РасчетныйСчетПоУмолчанию"));
	
	ЭлементыФормы.АвтоСозданиеКонтрагентаУПП.Значение 				= ВосстановитьЗначение("КБ8:АвтоСозданиеКонтрагента");
	
	ЭлементыФормы.РодительНовыхКонтрагентовПлатимМыУПП.Значение		= Справочники.Контрагенты.НайтиПоКоду(ВосстановитьЗначение("КБ8:РодительНовыхКонтрагентовПлатимМы"));
	ЭлементыФормы.РодительНовыхКонтрагентовПлатятНамУПП.Значение 	= Справочники.Контрагенты.НайтиПоКоду(ВосстановитьЗначение("КБ8:РодительНовыхКонтрагентовПлатятНам"));
		
	ЭлементыФормы.КоличествоДнейДляОплатыБанка.Значение 				= ВосстановитьЗначение("КБ8:КоличествоДнейДляОплатыБанка");
	ЭлементыФормы.ПоискСделкиИДоговораПоНомеру.Значение 				= ВосстановитьЗначение("КБ8:ПоискСделкиИДоговораПоНомеру");
	
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда 	
		
		ЭлементыФормы.ВхСчетРасчетов.Значение 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ВхСчетРасчетов"));
		ЭлементыФормы.ИсхСчетРасчетов.Значение 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ИсхСчетРасчетов"));
		ЭлементыФормы.ВхСчетАвансов.Значение 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ВхСчетАвансов"));
		ЭлементыФормы.ИсхСчетАвансов.Значение 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ИсхСчетАвансов"));
		ЭлементыФормы.СчетУчетаДС.Значение 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:СчетУчетаДС"));
		
	КонецЕсли;	
	
	ЭлементыФормы.ИмпортТолькоВходящихПлатежей.Значение 		= ВосстановитьЗначение("КБ8:ИмпортТолькоВходящихПлатежей");
	ЭлементыФормы.АвтоИмпортВыписок.Значение 					= ВосстановитьЗначение("КБ8:АвтоИмпортВыписок");
	ЭлементыФормы.АвтоЗаполнениеТаблицыЭкспорта.Значение 		= ВосстановитьЗначение("КБ8:АвтоЗаполнениеТаблицыЭкспорта");
	
	ЭлементыФормы.ПытатьсяПроводитьСозданныеДокументы.Значение	= ВосстановитьЗначение("КБ8:ПытатьсяПроводитьСозданныеДокументы");
	ЭлементыФормы.ОткрыватьСозданныеДокументы.Значение			= ВосстановитьЗначение("КБ8:ОткрыватьСозданныеДокументы");
	ЭлементыФормы.ОткрыватьТолькоДокументыСОшибками.Значение	= ВосстановитьЗначение("КБ8:ОткрыватьТолькоДокументыСОшибками");
	
	ПорядокСорт = ВосстановитьЗначение("КБ8:ТипСортировки");
	
	СтарыеНастройки = Ложь;
	
	Если ПорядокСорт <> Неопределено И ПорядокСорт.Количество() = 4 Тогда
		Для н = 0 По 3 Цикл
			Если СтрДлина(ПорядокСорт[н].Представление) > 1 Тогда
				СтарыеНастройки = Истина;
				Прервать;
			КонецЕсли;	
			Если ПорядокСорт[н].Представление = "1" Тогда
				ДобавляемСтроку = НСтр("ru='По контрагентам';uk='По контрагентам'");
			ИначеЕсли ПорядокСорт[н].Представление = "2" Тогда
				ДобавляемСтроку = НСтр("ru='По сумме платежей';uk='По сумі платежів'");
			ИначеЕсли ПорядокСорт[н].Представление = "3" Тогда	
				ДобавляемСтроку = НСтр("ru='По сумме платежей прихода, сумме платежей расхода';uk='По сумі платежів приходу, сумі платежів видатку'");
			ИначеЕсли ПорядокСорт[н].Представление = "4" Тогда
				ДобавляемСтроку = НСтр("ru='По статусу строки выписки';uk='По статусу рядка виписки'");
			КонецЕсли; 
			ЭлементыФормы.тпПорядокСортировки.Значение.Добавить(ДобавляемСтроку); 
		КонецЦикла; 
		Если СтарыеНастройки Тогда
			
			ДобавляемСтроку = НСтр("ru='По контрагентам';uk='По контрагентам'");
			ЭлементыФормы.тпПорядокСортировки.Значение.Добавить(ДобавляемСтроку); 
			ДобавляемСтроку = НСтр("ru='По сумме платежей';uk='По сумі платежів'");
			ЭлементыФормы.тпПорядокСортировки.Значение.Добавить(ДобавляемСтроку); 
			ДобавляемСтроку = НСтр("ru='По сумме платежей прихода, сумме платежей расхода';uk='По сумі платежів приходу, сумі платежів видатку'");
			ЭлементыФормы.тпПорядокСортировки.Значение.Добавить(ДобавляемСтроку); 
			ДобавляемСтроку = НСтр("ru='По статусу строки выписки';uk='По статусу рядка виписки'");
			ЭлементыФормы.тпПорядокСортировки.Значение.Добавить(ДобавляемСтроку); 
			
			ВидыСортировок = Новый СписокЗначений; 
			
			ВидыСортировок.Добавить("Контрагент", "1"); 
			ВидыСортировок.Добавить("Сумма", "2");
			ВидыСортировок.Добавить("ПриходРасход,Сумма", "3");
			ВидыСортировок.Добавить("Статус", "4");
			
			СохранитьЗначение("КБ8:ТипСортировки", ВидыСортировок);
			
		КонецЕсли;
	КонецЕсли;
	
	// работа с почтой
	РаботаСПочтой = ВосстановитьЗначение("КБ8:РаботаСПочтой");
	
	ФорматыОбменаВстЗнч = ВосстановитьЗначение("КБ8:ФорматыОбмена");
	Если ТипЗнч(ФорматыОбменаВстЗнч) = Тип("ТаблицаЗначений") Тогда
		ФорматыОбмена = ФорматыОбменаВстЗнч;	
	КонецЕсли;	
	
	ЭлементыФормы.ФорматыОбмена.Колонки.ИмяФормата.ЭлементУправления.СписокВыбора = сзВсеФорматыОбмена;	
	
	УстановитьВидимостьРеквизитов();
	УстановитьВидимостьСтраниц();
	УстановитьВидимостьФлажков();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура-обработчик нажатия на кнопку "Записать"
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если НЕ ПроверитьЗаполнениеПолейФорматы() Тогда
		Возврат;
	КонецЕсли;	
	
	// Запишем значения настроек
	СохранитьЗначенияНастроек();
	
	Закрыть(1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода "РасчетныйСчетПоУмолчанию". 
// Процедура сохраняет значение "РасчетныйСчетПоУмолчанию"
// 
Процедура РасчетныйСчетПоУмолчаниюПриИзменении(Элемент)
	//Если Элемент.Значение.Пустая() Тогда
	//	ЭлементыФормы.НадписьБанкПоУмолчанию.Значение = "";
	//Иначе	
	//	ЭлементыФормы.НадписьБанкПоУмолчанию.Значение = "№ счета: " + СокрЛП(Строка(Элемент.Значение.НомерСчета)) + ", Банк: " + Строка(Элемент.Значение.Банк) + ", МФО: " + Строка(Элемент.Значение.Банк.Код);
	//КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "РасчетныйСчетПоУмолчанию". 
//
// Процедура открывает список банковских счетов, с фильтром по ЮрФиз. лицу организации.
//
Процедура РасчетныйСчетПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ОрганизацияПоУмолчанию.Значение.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация!';uk='Не вказана організація!'"));
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = ЭлементыФормы.ОрганизацияПоУмолчанию;
		Возврат;
	КонецЕсли; 

	ВладелецБанковскогоСчета = ЭлементыФормы.ОрганизацияПоУмолчанию.Значение;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораБанковскогоСчета = Справочники["БанковскиеСчета"].ПолучитьФормуСписка(, Элемент);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "КаталогКБ". 
//
Процедура КаталогКБНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	// выбираем файл
	Рез = ДиалогВыбораФайла.Выбрать();
	Если Рез Тогда
		Элемент.Значение = ДиалогВыбораФайла.Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ОрганизацияПоУмолчанию". 
// Если организация пустая, очищаем банковский счёт
//
Процедура ОрганизацияПоУмолчаниюПриИзменении(Элемент)
	Если Элемент.Значение.Пустая() Тогда
		ЭлементыФормы.РасчетныйСчетПоУмолчанию.Значение = Справочники["БанковскиеСчета"].ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура ВхСчетРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );
	ФормаВыбора.ПараметрТекущаяСтрока = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Элемент.Значение);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ИсхСчетРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );
	ФормаВыбора.ПараметрТекущаяСтрока = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Элемент.Значение);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ВхСчетАвансовНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );
	ФормаВыбора.ПараметрТекущаяСтрока = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Элемент.Значение);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ИсхСчетАвансовНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );
	ФормаВыбора.ПараметрТекущаяСтрока = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Элемент.Значение);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура СчетУчетаДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ФорматыОбменаИмяФайлаОбработкиФорматаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = ИмяКаталогаКБ;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор  = Ложь;
	ДиалогВыбораФайла.Фильтр  = "Внешняя обработка (*.epf)|*.epf";
	ДиалогВыбораФайла.Расширение = "epf";
	
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяКаталогаКБ + Элемент.Значение;
	
	// выбираем файл
	Рез = ДиалогВыбораФайла.Выбрать();
	Если Рез Тогда
		
		// ИмяФайла - имя файла без каталога
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		Поз = Найти(ИмяФайла,"\");
		сКатал = "";
		Пока Поз > 0 Цикл
			сКатал = сКатал + Лев(ИмяФайла,Поз);
			ИмяФайла = Сред(ИмяФайла,Поз + 1);
			Поз = Найти(ИмяФайла,"\");
		КонецЦикла;    
		
		Элемент.Значение = СокрЛП(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФорматыОбменаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущаяСтрока.МФО = СокрЛП(ЭлементыФормы.РасчетныйСчетПоУмолчанию.Значение.Банк.Код);
	КонецЕсли;	
КонецПроцедуры

Процедура ФорматыОбменаИмяФорматаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаВсеФорматыОбмена = тчВсеФорматыОбмена.Найти(ВыбранноеЗначение, "ИмяФормата");
	Если СтрокаВсеФорматыОбмена <> Неопределено Тогда
		ЭлементыФормы.ФорматыОбмена.ТекущаяСтрока.ИмяФайлаОбработкиФормата = СтрокаВсеФорматыОбмена.ИмяФайла;
	КонецЕсли; 
КонецПроцедуры

Процедура ОткрыватьСозданныеДокументыПриИзменении(Элемент)
	
	УстановитьВидимостьФлажков();
	
	Если Элемент.Значение = Ложь Тогда
		ЭлементыФормы.ОткрыватьТолькоДокументыСОшибками.Значение = Ложь;	
	КонецЕсли;
	
КонецПроцедуры