Перем ИмяФормата;

// Отказ от открытия обработки, выдаем сообщение о "служебности" обработки
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Предупреждение("Обработка вызывается только из ПП ""Обмен информацией между ПП ""1С:Предприятие 8.0"" и системами ""Клиент-Банк""");
	Отказ = Истина;
КонецПроцедуры

// Возвращает Истина, если код в банке есть, Ложь - иначе
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если код в банке есть, Ложь - иначе
//
Функция ЕстьКодВБанке() Экспорт
	Возврат Ложь;
КонецФункции	
	
// Возвращает наименование кода в банке
//
// Параметры:
//
//	нет
//
// Возвращаемое значение:
//
// 	Строка - наименование кода
//
Функция ПолучитьНаименованиеКода() Экспорт
	Возврат "";
КонецФункции		

// Возвращает код банка организации
//
// Параметры:
//
//  Структура Параметры
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка   – код организации в банке
//
Функция кбПолучитьКодОрганизации(Параметры) Экспорт
	Возврат "";
КонецФункции

// Формирует имя файла по умолчанию
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
// 
// Возвращаемое значение:
//
//   имя файла по умолчанию
//
Функция СформироватьИмяФайла(Параметры) Экспорт 
	ИмяФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" + Параметры.Режим);
	Если Параметры.Режим = "Импорт" Тогда
		Если ИмяФайла = Неопределено Тогда
			//Возврат "Export.dbf";
			Возврат "Export.txt";

		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	Иначе	
		Если ИмяФайла = Неопределено Тогда
			//Возврат "Import.dbf";
			Возврат "Import.txt";
		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

// Выбирает имя файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - текущий тип файла ("TXT"/"DBF"/"XML")
//
// Возвращаемое значение:
//
//   Строка   – выбранное имя файла
//
Функция ВыбратьИмяФайла(Параметры) Экспорт
	
	РежимДиалога = ?(Параметры.Режим = "Импорт", РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение);
	Длг = Новый ДиалогВыбораФайла(РежимДиалога);
	
	Длг.ПолноеИмяФайла = Параметры.ТекущееИмяФайла;
	Длг.Заголовок = "Выберите файл";
	Длг.Фильтр = "Файлы TXT (*.*)|*.*";
	Длг.Расширение = "*";   //Параметры.ТекущийТипФайла;
	
	Если Длг.Выбрать() Тогда
		Возврат Длг.ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат Параметры.ТекущееИмяФайла;
КонецФункции

// Возвращает сохраненный тип файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка – текущий тип файла ("TXT"/"DBF"/"XML")
//
Функция ПолучитьТекущийТипФайла(Параметры) Экспорт
	
	ТипФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "ТипФайла" + Параметры.Режим);
	
	Если Параметры.Режим = "Импорт" Тогда
		Если ТипФайла = Неопределено Тогда
			Возврат "TXT";
		Иначе
			Возврат "TXT";
			//Возврат ТипФайла;
		КонецЕсли;	
	Иначе 
		Если ТипФайла = Неопределено Тогда
			Возврат "TXT";
		Иначе
			Возврат "TXT";
			//Возврат ТипФайла;
		КонецЕсли;	
	КонецЕсли;	

КонецФункции

// Сохраняет значения для формата:
//
//	Имя файла
// 	Тип файла 
// 	Код в банке, если такой существует
//
// Параметры:
// 		Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - строка - текущий тип файла в основной обработке
//  
Процедура СохранитьЗначения(Параметры) Экспорт
	
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" + Параметры.Режим, Параметры.ТекущееИмяФайла);
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ТипФайла" + Параметры.Режим, Параметры.ТекущийТипФайла);
	Если ЕстьКодВБанке() Тогда 
		СохранитьЗначение(ИмяФормата + Параметры.Организация +  "КодВБанке", Параметры.КодВБанке); // если есть 
	КонецЕсли;	
	
КонецПроцедуры

// Обработка формата должна вернуть режимы и типы файлов, которая она поддерживает.
//
// Параметры: нет
//
//  Возвращаемое значение:
//
//	Возвращает структуру со следующими ключами:
//
//	Импорт (Истина/Ложь)
//	ИмпортTXT (Истина/Ложь)
//	ИмпортDBF (Истина/Ложь)
//	ИмпортXML (Истина/Ложь)
//	Экспорт (Истина/Ложь)
//	ЭкспортTXT (Истина/Ложь) 
//	ЭкспортDBF (Истина/Ложь)
//	ЭкспортXML (Истина/Ложь)
//
Функция ПолучитьПоддерживаемыеРежимы() Экспорт
	
	ИмпортЭкспорт = Новый Структура;
	ИмпортЭкспорт.Вставить("Импорт", Истина);
	ИмпортЭкспорт.Вставить("ИмпортTXT", Истина);
	ИмпортЭкспорт.Вставить("ИмпортDBF", Ложь);
	ИмпортЭкспорт.Вставить("ИмпортXML", Ложь);
	
	ИмпортЭкспорт.Вставить("Экспорт", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортTXT", Истина);
	ИмпортЭкспорт.Вставить("ЭкспортDBF", Ложь);
	ИмпортЭкспорт.Вставить("ЭкспортXML", Ложь);
	
	Возврат ИмпортЭкспорт;
	
КонецФункции

// Осуществляет импорт выписки из файла типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортTXT(Параметры)
	ФайлTXT	= Новый ТекстовыйДокумент;
	ИмяФайла = Параметры.ИмяФайла;
	Попытка
		ФайлTXT.Прочитать(ИмяФайла, КодировкаТекста.ANSI); //Win
	Исключение
		Предупреждение("Ошибка открытия файла " + ИмяФайла);
		Возврат Неопределено;
	КонецПопытки;		
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	НовыйСчет 				= Ложь;
	НоваяСтрокаВыписки 		= Ложь;
	ТекущаяСтрокаВыписки 	= "";
	
	Сумма 			= 0;
	ТипТранзакции 	= "";
	НомерПлатежа 	= "";
	ПриходРасход 	= "";
	
	
	Для н = 1 По ФайлTXT.КоличествоСтрок() Цикл
		ТекСтрока = ФайлTXT.ПолучитьСтроку(н);
		
		Если ПустаяСтрока(ТекСтрока) Тогда
			Продолжить;
		КонецЕсли;	
		
		КодПоля = Лев(ТекСтрока,3);
		
		Если КодПоля = ":20" Тогда
			//:20:STMT20041116
			НовыйСчет = Истина;
			Продолжить;
		КонецЕсли;	
			
		Если КодПоля = ":25" Тогда
			//:25:11110000/26001001001000
			ТекРСчет = Сред(ТекСтрока,14);
			Если ТекРСчет <> Параметры.РСчет Тогда
				НовыйСчет = Ложь; 	
				Продолжить;
			КонецЕсли;
			Продолжить;
		КонецЕсли;	
		
		Если Не НовыйСчет Тогда
			//пропускаем этот счет
			Продолжить;
		КонецЕсли;	
		
		
		Если КодПоля = ":28" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если КодПоля = ":60" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если КодПоля = ":61" Или КодПоля = ":62" Тогда
			//анализируем предыдущую строку выписки
			Если НоваяСтрокаВыписки Тогда
				
				Если ТипТранзакции = "PA" Тогда
					
					НовСтрока = тзВыписка.Добавить();
					
					//контрагент
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~32") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~33");
					
					НовСтрока.Контрагент = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					
					//ОКПО и МФО
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~33") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~31");
					ОКПОМФО = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					ПозМФО = Найти(ОКПОМФО,"МФО");
					
					НовСтрока.ОКПО 	= СокрЛП(Сред(ОКПОМФО, 5, ПозМФО - 5));
					
					НовСтрока.МФО 	= СокрЛП(Сред(ОКПОМФО, ПозМФО + 4));	
					
					//Рассчетный счет клиента
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~31") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~23");
					
					НовСтрока.РСчет = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					
					//Предназначение платежа
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~25") + 3;
					
					Содержание = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1));
					Содержание = СтрЗаменить(Содержание,"~26","");
					Содержание = СтрЗаменить(Содержание,"~27","");
					Содержание = СтрЗаменить(Содержание,"~28","");
					Содержание = СтрЗаменить(Содержание,"~29","");
					Содержание = СтрЗаменить(Содержание,"~60","");
					Содержание = СтрЗаменить(Содержание,"~61","");
					Содержание = СтрЗаменить(Содержание,"~","");
					Содержание = СокрЛП(Содержание);
					
					НовСтрока.Содержание = Содержание;
					
					Если ПриходРасход = "C" Тогда  //приход
						НовСтрока.Приход = Сумма;
						НовСтрока.Расход = 0;	
					Иначе
						НовСтрока.Приход = 0;
						НовСтрока.Расход = Сумма;	
					КонецЕсли;	
					
					НовСтрока.НомерПП = НомерПлатежа;
					
				ИначеЕсли ТипТранзакции = "RE" Тогда	
					
					НовСтрока = тзВыписка.Добавить();
					
					//контрагент
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~32") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~33");
					
					НовСтрока.Контрагент = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					
					//Рассчетный счет клиента
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~33") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~23");
					
					НовСтрока.РСчет = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					
					//МФО и ОКПО
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~23") + 3;
					Поз2 = Найти(ТекущаяСтрокаВыписки,"~24");
					ОКПОМФО = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1, Поз2 - Поз1));
					ПозОКПО = Найти(ОКПОМФО,"ОКПО");
					
					НовСтрока.МФО 	= СокрЛП(Сред(ОКПОМФО, 4, ПозОКПО - 4));
					НовСтрока.ОКПО 	= СокрЛП(Сред(ОКПОМФО, ПозОКПО + 4));	
					
					
					//Предназначение платежа
					Поз1 = Найти(ТекущаяСтрокаВыписки,"~25") + 3;
					
					Содержание = СокрЛП(Сред(ТекущаяСтрокаВыписки,Поз1));
					Содержание = СтрЗаменить(Содержание,"~26","");
					Содержание = СтрЗаменить(Содержание,"~27","");
					Содержание = СтрЗаменить(Содержание,"~28","");
					Содержание = СтрЗаменить(Содержание,"~29","");
					Содержание = СтрЗаменить(Содержание,"~60","");
					Содержание = СтрЗаменить(Содержание,"~61","");
					Содержание = СтрЗаменить(Содержание,"~","");
					Содержание = СокрЛП(Содержание);
					
					НовСтрока.Содержание = Содержание;
					
					Если ПриходРасход = "C" Тогда  //приход
						НовСтрока.Приход = Сумма;
						НовСтрока.Расход = 0;	
					Иначе
						НовСтрока.Приход = 0;
						НовСтрока.Расход = Сумма;	
					КонецЕсли;	
					
					НовСтрока.НомерПП = НомерПлатежа;
				КонецЕсли;	
				
				НоваяСтрокаВыписки = Ложь;		
			КонецЕсли;	
				
			
			//переходим на новую, если КодПоля = ":61"
			
			Если КодПоля = ":61" Тогда
			
				НоваяСтрокаВыписки = Истина;
				ТекущаяСтрокаВыписки = "";
				
				ТекДата = Сред(ТекСтрока,5,6);
				Если ТекДата <> Формат(Параметры.ДатаДок,"ДФ=yyMMdd") Тогда
					НоваяСтрокаВыписки = Ложь;
					Продолжить;
				КонецЕсли;	
				
				ПриходРасход = Сред(ТекСтрока,11,1); //C{D} – Кредит\Дебет
				Поз1 = Найти(ТекСтрока, "NTRF");
				Поз2 = Найти(ТекСтрока, "//");
				Сумма = Сред(ТекСтрока,13,Поз1 - 13);
				ТипТранзакции = Сред(ТекСтрока,Поз2 + 2,2); //PA,RE,AC
				НомерПлатежа = Сред(ТекСтрока,Поз1 + 4, Поз2 - Поз1 - 4);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;	
		
		Если Не НоваяСтрокаВыписки Тогда
			Продолжить;
		КонецЕсли;	
		
		Если КодПоля = ":86" Или ТекущаяСтрокаВыписки <> "" Тогда
			ТекущаяСтрокаВыписки = ТекущаяСтрокаВыписки + ТекСтрока;
			Продолжить;
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	Если НЕ тзВыписка.Количество() И ФайлTXT.КоличествоСтрок() Тогда
		Предупреждение("В текущем файле нет платежей с данной датой выписки и расчетным счетом!");
	КонецЕсли;
	
	Возврат тзВыписка;	
КонецФункции	

// Осуществляет импорт выписки из файла типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортXML(Параметры)
	Возврат Неопределено;	
КонецФункции	

// Осуществляет импорт выписки из файла типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортDBF(Параметры)
	Возврат Неопределено;	
КонецФункции	

// Осуществляет импорт выписки из файла
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортВыписки(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ИмпортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ИмпортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ИмпортXML(Параметры);
	КонецЕсли;	
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "TXT"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортTXT(Параметры)
	Текст = Новый ТекстовыйДокумент;
	
	//ТекСтрока = "";

	Ном = 0;
	Пайп = Символ(9);
	
	Для Каждого Строка из Параметры.тзПлатежныеПоручения Цикл
		Ном = Ном + 1;
		
		ТекСтрока = СокрЛП(Строка.НомерПП) + Пайп; //Payment order Number
		ТекСтрока = ТекСтрока + Формат(Строка.ДатаПП,"ДФ=dd.MM.yyyy") + Пайп; //Date
		ТекСтрока = ТекСтрока + Формат(Строка.ДатаПП,"ДФ=dd.MM.yyyy") + Пайп; //Value Date

		ТекСтрока = ТекСтрока + СокрЛП(Параметры.НашОКПО) + Пайп; // Payer Code (Payer company ID)
		ТекСтрока = ТекСтрока + СокрЛП(Параметры.НашаФирма) + Пайп; // Customer (Payer) Name
		ТекСтрока = ТекСтрока +  "804" + Пайп; // Country code - 3 пробела
		ТекСтрока = ТекСтрока + СокрЛП(Параметры.НашМФО) + Пайп; // Payer bank Code
		ТекСтрока = ТекСтрока + СокрЛП(Параметры.НашБанк) + Пайп; // Payer’s Bank Name
		ТекСтрока = ТекСтрока + СокрЛП(Параметры.НашСчет) + Пайп; // Payer‘s Account number

		ТекСтрока = ТекСтрока + Формат(Строка.Сумма, "ЧГ=0") + Пайп; // Amount In Digits

		ТекСтрока = ТекСтрока + СокрЛП(Строка.ОКПО) + Пайп; // Code (Beneficiary company ID)
		ТекСтрока = ТекСтрока + СокрЛП(Строка.Контрагент) + Пайп; // Beneficiary name
		ТекСтрока = ТекСтрока +  "804" + Пайп; // Country code - 3 пробела
		ТекСтрока = ТекСтрока + СокрЛП(Строка.МФО) + Пайп; // Beneficiary bank Code (MFO code)
		ТекСтрока = ТекСтрока + СокрЛП(Строка.Банк) + Пайп; // Beneficiary Bank Name
		ТекСтрока = ТекСтрока + СокрЛП(Строка.Счет) + Пайп; // Beneficiary Account number

		ТекСтрока = ТекСтрока + " " + Пайп; // Amount in words
		ТекСтрока = ТекСтрока + СокрЛП(Строка.Содержание) + Пайп; // Purpose of Payment

		ТекСтрока = ТекСтрока + " " + Пайп + " " + Пайп + " " + Пайп + " " + Пайп; 
		
		Текст.ДобавитьСтроку(ТекСтрока);			
		
	КонецЦикла;        
	
	ИмяФайла = Параметры.ИмяФайла;	
	Попытка
		Текст.Записать(ИмяФайла, КодировкаТекста.ANSI);
	Исключение
		Предупреждение("Ошибка записи файла " + ИмяФайла);
		Возврат Ложь;
	КонецПопытки;		
	
	Возврат Истина;
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "XML"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортXML(Параметры)
	Возврат Ложь;
КонецФункции

// Осуществляет экспорт платежных поручений в файл типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//			!!!(Банк) - строка
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортDBF(Параметры)
	Возврат Ложь;
КонецФункции

// Осуществляет экспорт платежных поручений в файл
//
// Параметры:
//
//	Структура Параметры   
//                 
//		Ключ НашМФО - МФО организации - строка
//		Ключ НашСчет - 	Расчетный счет организации - строка
//      Ключ НашОКПО - 	ЕДРПОУ организации  - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//		Ключ тзПлатежныеПоручения - Таблица значений с полями:
//			Номер платежного поручения (НомерПП) - строка
//			Дата платежного поручения (ДатаПП) - строка
//			Контрагент (Контрагент) - строка
//			МФО расчетного счета контрагента (МФО) - строка
//			Расчетный счет контрагента (Счет) - строка
//			ЕДРПОУ контрагента (ОКПО) - строка
//			Сумма платежного поручения (Сумма) – число 
//			Содержание платежа (Содержание) – строка 
//
// Возвращаемое значение:
//
//   Булево - Истина - успешный экспорт
//
Функция ЭкспортПлатежныхПоручений(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ЭкспортDBF(Параметры);	
	ИначеЕсли Параметры.ТипФайла = "TXT" Тогда
		Возврат ЭкспортTXT(Параметры);
	ИначеЕсли Параметры.ТипФайла = "XML" Тогда
		Возврат ЭкспортXML(Параметры);
	КонецЕсли;	
		
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) после импорта. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаИмпорта() Экспорт
	Возврат Ложь;
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) перед экспортом. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаЭкспорта() Экспорт
	Возврат Ложь;
КонецФункции

ИмяФормата = "ИНГБанк";
