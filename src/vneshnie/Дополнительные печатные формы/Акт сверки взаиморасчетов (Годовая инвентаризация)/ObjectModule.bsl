Функция Печать() Экспорт
	
	// Для отладки
	лТест = БИТ_МСФО_Серна.СчетМожноИспользоватьВПроводках("1091");
	
	Организация = СсылкаНаОбъект.Организация;
	Контрагент = СсылкаНаОбъект.Контрагент;
	ДоговорКонтрагента = СсылкаНаОбъект.ДоговорКонтрагента;
	ДатаНачала = СсылкаНаОбъект.ДатаНачала;
	ДатаОкончания = СсылкаНаОбъект.ДатаОкончания;
	Комментарий = СсылкаНаОбъект.Комментарий;
	ВалютаДокумента = СсылкаНаОбъект.ВалютаДокумента;
	ПредставительОрганизации = СсылкаНаОбъект.ПредставительОрганизации;
	ПредставительКонтрагента = СсылкаНаОбъект.ПредставительКонтрагента;
	ОстатокНаНачало = СсылкаНаОбъект.ОстатокНаНачало;
	Расхождение = СсылкаНаОбъект.Расхождение;
	СверкаСогласована = СсылкаНаОбъект.СверкаСогласована;
	ВыводитьПолныеНазванияДокументов = СсылкаНаОбъект.ВыводитьПолныеНазванияДокументов;
	РазбитьПоДоговорам = СсылкаНаОбъект.РазбитьПоДоговорам;
	ПоДаннымОрганизации = СсылкаНаОбъект.ПоДаннымОрганизации;
	ПоДаннымКонтрагента = СсылкаНаОбъект.ПоДаннымКонтрагента;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("АктСверки");
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
	ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	Если ДатаНачала = '00010101' Тогда
		Если ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаОтчета=ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаОтчета = '00010101';
		КонецЕсли;
	Иначе
		ДатаНачалаОтчета = ДатаНачала;
	КонецЕсли;

	ОписаниеПериода = "";
	Если Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОписаниеПериода = НСтр("ru='на ';uk='на '",КодЯзыкаПечать) + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОписаниеПериода = НСтр("ru='за период: ';uk='за період: '",КодЯзыкаПечать) + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина; Л =" + Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
	КонецЕсли;	
	
	//Заголовок = НСтр("ru='Акт сверки';uk='Акт звіряння'",КодЯзыкаПечать); 
					
	ТекстЗаголовка = НСтр("ru='взаимных расчетов ';uk='взаємних розрахунків '",КодЯзыкаПечать) + ОписаниеПериода + Символы.ПС
					+ НСтр("ru='между ';uk='між '",КодЯзыкаПечать) + НазваниеОрганизации + Символы.ПС + НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + НаименованиеКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
						
		Данные = Новый Структура("ДоговорДата,ДоговорНомер,ДоговорКонтрагента,ДоговорНаименованиеДляПечати", ДоговорКонтрагента.Дата,ДоговорКонтрагента.Номер,ДоговорКонтрагента,ДоговорКонтрагента.НаименованиеДляПечати);
		СписокПараметров = "ДоговорНаименованиеДляПечати,";
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Данные,СписокПараметров,КодЯзыкаПечать);
		НаименованиеДоговораДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;

		ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + НСтр("ru='по договору ';uk='за договором '",КодЯзыкаПечать) + СокрЛП(НаименованиеДоговораДляПечати);
		
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	//ОбластьЗаголовок.Параметры.Заголовок = Заголовок;
	
	ДанныеПредставителяОрганизации = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
					+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
					+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
				
	СтрЗаголовокТаблица = НСтр("ru='Мы, нижеподписавшиеся, ';uk='Ми, що нижче підписалися, '",КодЯзыкаПечать) + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность) + " " + НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + НСтр("ru=', с одной стороны, ';uk=', з одного боку, '",КодЯзыкаПечать)
				+ НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность) + " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента) + НСтр("ru=', с другой стороны, ';uk=', з іншого боку, '",КодЯзыкаПечать)
				+ НСтр("ru='составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:';uk='склали даний акт звірення у тому, що стан взаємних розрахунків за даними обліку наступний:'",КодЯзыкаПечать);
				
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ОборотыДт = 0;
	ОборотыКт = 0;
	ОборотыДтКонтр = 0;
	ОборотыКтКонтр = 0;

		
	Если ПоДаннымОрганизации.Количество()>0 ИЛИ ПоДаннымКонтрагента.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
		Запрос.Текст =	
		"ВЫБРАТЬ
		|	ВлЗапрос.Договор КАК Договор,
		|	ВлЗапрос.Дата КАК Дата,
		|	ВлЗапрос.Документ,
		|	ВлЗапрос.Представление,
		|	ВлЗапрос.ДатаК,
		|	ВлЗапрос.ПредставлениеК,
		|	Дебет как СуммаДогДт,
		|	Кредит как СуммаДогКт,
		|	ДебетК как СуммаДогДтКонтр,
		|	КредитК как СуммаДогКтКонтр	
		|Из
		|	(Выбрать"
		+?(РазбитьПоДоговорам,"
		|		ПоДаннымОрганизации.Договор КАК Договор,","
		|		NULL КАК Договор,")
		+"	
		|		ПоДаннымОрганизации.Дата как Дата,
		|		NUll как ДатаК,
		|		ПоДаннымОрганизации.Документ КАК Документ,
		|		ПоДаннымОрганизации.Представление КАК Представление,
		|		NULL КАК ПредставлениеК,
		|		ПоДаннымОрганизации.Дебет КАК Дебет,
		|		ПоДаннымОрганизации.Кредит КАК Кредит,
		|		0 КАК ДебетК,
		|		0 КАК КредитК
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ПоДаннымОрганизации
		|	Где
		|		ПоДаннымОрганизации.Ссылка = &ТекущийДокумент
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|   
		|	Выбрать"
		+?(РазбитьПоДоговорам,"
		|		ПоДаннымКонтрагента.Договор,","
		|		NULL КАК Договор,")
		+"	
		|		NULL,
		|		ПоДаннымКонтрагента.Дата,
		|		NULL,
		|		NULL,
		|		ПоДаннымКонтрагента.Представление,
		|		0,
		|		0,
		|		ПоДаннымКонтрагента.Дебет,
		|		ПоДаннымКонтрагента.Кредит
		|
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ПоДаннымКонтрагента
		|	Где
		|		ПоДаннымКонтрагента.Ссылка = &ТекущийДокумент
		|     
		|     
		|)	КАК ВлЗапрос
		|
		|	ИТОГИ
		|		СУММА(СуммаДогДт),
		|		СУММА(СуммаДогКт),
		|		СУММА(СуммаДогДтКонтр),
		|		СУММА(СуммаДогКтКонтр)
		|	ПО
		|		Общие,Договор";
		
		Результат = Запрос.Выполнить();		
		
		ОбходПоОбщимИтогам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ОбходПоОбщимИтогам.Следующий();	
		
		ОборотыДт = ОбходПоОбщимИтогам.СуммаДогДт;
		ОборотыКт = ОбходПоОбщимИтогам.СуммаДогКт;
		ОборотыДтКонтр = ОбходПоОбщимИтогам.СуммаДогДтКонтр;
		ОборотыКтКонтр = ОбходПоОбщимИтогам.СуммаДогКтКонтр;

		
		ОбходПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			Если РазбитьПоДоговорам Тогда
				//Выводим заголовок с договором
				Данные = Новый Структура("ДоговорДата,ДоговорНомер,ДоговорКонтрагента,ДоговорНаименованиеДляПечати", ОбходПоДоговорам.Договор.Дата,ОбходПоДоговорам.Договор.Номер,ОбходПоДоговорам.Договор,ОбходПоДоговорам.Договор.НаименованиеДляПечати);
				СписокПараметров = "ДоговорНаименованиеДляПечати,";
				МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Данные,СписокПараметров,КодЯзыкаПечать);
				НаименованиеДоговораДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;
				ОбластьДоговор.Параметры.Договор = НаименованиеДоговораДляПечати;
				ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
				ТабДок.Вывести(ОбластьДоговор);
				ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			Иначе
				ОбходПоДокументам=Результат.Выбрать();
			КонецЕсли;		
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.Документ,ОбходПоДокументам.СуммаДогДт,ОбходПоДокументам.СуммаДогКт));				
				КонецЕсли;
				
				Если ОбходПоДокументам.ДатаК<>NULL Тогда
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр",
					ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.СуммаДогДтКонтр,ОбходПоДокументам.СуммаДогКтКонтр));				
				КонецЕсли; 
			КонецЦикла;
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество()<СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество()>СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр","","","",""));
				КонецЦикла;			
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);			
				ТабДок.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если РазбитьПоДоговорам Тогда
				//Выводим итоги по каждому договору
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);		
				ТабДок.Вывести(ОбластьДоговорИтоги);	
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;  
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		Если СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		КонецЕсли;
		ТабДок.Вывести(ОбластьОборотыИтог);
		
	КонецЕсли;
	      
	ОстатокНаКонец = ОстатокНаНачало + ОборотыДт -  ОборотыКт;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	Если СверкаСогласована тогда
		ОстатокНаКонецК = ОстатокНаНачало - ОборотыДтКонтр +  ОборотыКтКонтр;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки 	
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   		РезультатыСверки = НСтр("ru='<не указана дата сверки>';uk='<не вказано дату звірки>'",КодЯзыкаПечать);
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   		РезультатыСверки = НСтр("ru='<не указан контрагент>';uk='<не вказано контрагент>'",КодЯзыкаПечать);
   	Иначе
		
		Если ОстатокНаКонец > 0 Тогда
// Серна - Начало
			РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 свернутая задолженность ';uk='на %1 згорнута заборгованість '",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				РезультатыСверки = РезультатыСверки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по договору %1 от %2';uk='за договором %1 від %2'",КодЯзыкаПечать), СокрЛП(ДоговорКонтрагента.Номер), Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			РезультатыСверки = РезультатыСверки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' в пользу %1 %2 %3';uk=' на користь %1 %2 %3'",КодЯзыкаПечать), СокрЛП(НазваниеОрганизации), Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"), строка(ВалютаДокумента));
// Серна - Конец
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
// Серна - Начало
			РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 свернутая задолженность ';uk='на %1 згорнута заборгованість '",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				РезультатыСверки = РезультатыСверки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по договору %1 от %2';uk='за договором %1 від %2'",КодЯзыкаПечать), СокрЛП(ДоговорКонтрагента.Номер), Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			РезультатыСверки = РезультатыСверки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' в пользу %1 %2 %3';uk=' на користь %1 %2 %3'",КодЯзыкаПечать), СокрЛП(НаименованиеКонтрагента), Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"), строка(ВалютаДокумента));
// Серна - Конец
				
	   	Иначе
			РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 задолженность отсутствует.';uk='на %1 заборгованість відсутня.'",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
			
	   	КонецЕсли;
	КонецЕсли;
	
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки; 	
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = НСтр("ru='По данным ';uk='За даними '",КодЯзыкаПечать) + СокрЛП(НаименованиеКонтрагента);
		
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   		РезультатыСверки = НСтр("ru='<не указана дата сверки>';uk='<не вказано дату звірки>'",КодЯзыкаПечать);
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   		РезультатыСверки = НСтр("ru='<не указан контрагент>';uk='<не вказано контрагент>'",КодЯзыкаПечать);
	   	Иначе
				
			Если ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 задолженность в пользу %2 %3 %4';uk='на %1 заборгованість на користь  %2 %3 %4'",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"), СокрЛП(НазваниеОрганизации), Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"), строка(ВалютаДокумента));
		
			ИначеЕсли ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 задолженность в пользу %2 %3 %4';uk='на %1 заборгованість на користь  %2 %3 %4'",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"), СокрЛП(НаименованиеКонтрагента), Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"), строка(ВалютаДокумента));
		
		   	Иначе
				РезультатыСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 задолженность отсутствует.';uk='на %1 заборгованість відсутня.'",КодЯзыкаПечать), Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец-ОстатокНаКонецК<>0 Тогда
			 ИтогСверки = НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере ';uk='В результаті звірення виявлена розбіжність інформації про стан розрахунків у розмірі '",КодЯзыкаПечать)+Формат(?(ОстатокНаКонец-ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец-ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
                	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность);
	ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность);
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации),"_______________________",ДанныеПредставителяОрганизации.Представление)+")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ПредставительКонтрагента.Фамилия + " " + ПредставительКонтрагента.Имя + " " + ПредставительКонтрагента.Отчество))+")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;  
	
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.АктСверкиВзаиморасчетов");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	//возможны варианты - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов,
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Печатная форма Акт сверки (Годовая инвентаризация)"); //имя под kt обработка зарегистрирована будет в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Информация", "Печатная форма Акт сверки (Годовая инвентаризация)");
	//команды
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление"); //как будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"); //имя нашего макета
	ТаблицаКоманд.Колонки.Добавить("Использование"); //ВызовСерверногоМетода
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение"); //Истина
	ТаблицаКоманд.Колонки.Добавить("Модификатор"); //ПечатьМХL
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = "Печатная форма Акт сверки (Годовая инвентаризация)";
	НоваяКоманда.Идентификатор = "ПечатьАктСверкиВзаиморасчетовГодовая"; //Внешняя печатная форма
	НоваяКоманда.Использование = "ВызовКлиентскогоМетода"; //здесь можно прописать использование как серверного так и клиентского, отличие в том, что серверный метод будет обращаться к экспортной процедуре из модуля объекта, клиентский - к экспортной процедуре из модуля формы объекта
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции