Функция Печать() Экспорт
	
	// Для отладки
	лТест = БИТ_МСФО_Серна.СчетМожноИспользоватьВПроводках("1091");
	
	докКорректировка = СсылкаНаОбъект;
	
	Если докКорректировка.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда 
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст	= "Акт печатается только при операции проведения взаимозачета!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	СуммыВзаиозачетовРавны	= ПроверитьРавенствоСуммВзаимозачетов(докКорректировка);
	
	Если СуммыВзаиозачетовРавны = Неопределено Тогда 
		Сообщить("Невозможно определить сумму дебеторской или кредиторской задолженности! Печать акта невозможна!");
	КонецЕсли;
	
	Если Не СуммыВзаиозачетовРавны Тогда 
		Сообщить("Суммы кредиторской и дебеторской задолженности не равны!!! Печать акта невозможна!");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Акт_Взаимозачета";
	Макет         = ПолучитьМакет("АктВзаимозачета");
	
	облПреамбула	= Макет.ПолучитьОбласть("Преамбула");
	ОблстрокаТаблицы	= Макет.ПолучитьОбласть("строкаТаблицы");
	ОблТекстАкта	= Макет.ПолучитьОбласть("ТекстАкта");
	ОблПодписи		= Макет.ПолучитьОбласть("Подписи");
	
	ВыборкаПоШапкеДокумента	= ПолучитьВыборкуДляПреамбулы(докКорректировка);
	ВыборкаПоТЧДокумента	= ПолучитьВыборкуПоТЧ(докКорректировка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда 
		облПреамбула.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ОблПодписи.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	КонецЕсли;
	облПреамбула.Параметры.НазваниеОрганизацииПолное = ггуОбщегоНазначения.НазваниеОрганизации(докКорректировка.Дата, Истина, Ложь, Истина);
	облПреамбула.Параметры.НазваниеОрганизации = ггуОбщегоНазначения.НазваниеОрганизации(докКорректировка.Дата, Ложь, Ложь, Истина);
	ТабДокумент.Вывести(облПреамбула);
	
	Пока ВыборкаПоТЧДокумента.Следующий() Цикл 
		ОблстрокаТаблицы.Параметры.Заполнить(ВыборкаПоТЧДокумента);
		
		Если ТипЗнч(ВыборкаПоТЧДокумента.ДокументРасчетов) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			ППИ	= СформироватьППИ(ВыборкаПоТЧДокумента.ДокументРасчетов);
			ОблстрокаТаблицы.Параметры.ДокументРасчетов	= ППИ;
		ИначеЕсли ТипЗнч(ВыборкаПоТЧДокумента.ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			АктВыполненныхРабот	= ПолучитьАктВыполненныхРабот(ВыборкаПоТЧДокумента.ДокументРасчетов);
			ОблстрокаТаблицы.Параметры.ДокументРасчетов	= АктВыполненныхРабот;
		КонецЕсли;
		
		
		ТабДокумент.Вывести(ОблстрокаТаблицы);
	КонецЦикла;	
	
	ТабДокумент.Вывести(ОблТекстАкта);
	
	ОблПодписи.Параметры.НазваниеОрганизацииПолное = ггуОбщегоНазначения.НазваниеОрганизации(докКорректировка.Дата, Истина, Ложь, Истина);
	ТабДокумент.Вывести(ОблПодписи);
	
	//ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , ТабДокумент.ШиринаТаблицы);
	
	//ТабДокумент.АвтоМасштаб	= Истина; 

	Возврат ТабДокумент;	
	
КонецФункции

Функция СформироватьППИ(Платежка)
	
	НомППИ	= Платежка.НомерПоручения;
	ДатаППИ	= Платежка.ДатаВыписки;
	
	ППИ	= "Платіжне доручення № " + СокрЛП(НомППИ) + " від " + Формат(ДатаППИ, "ДФ=dd.MM.yyyy");
	
	Возврат ППИ;
КонецФункции

Функция ПолучитьАктВыполненныхРабот(ПриходнаяНакладная)
	
	//Если ПриходнаяНакладная.Услуги.Количество() > 0 Тогда 	
		
		НомАкта		= ПриходнаяНакладная.НомерВходящегоДокумента;	
		ДатаАкта	= ПриходнаяНакладная.ДатаВходящегоДокумента;		
		АктВыполненныхРабот	= "Акт виконаних робіт № " + СокрЛП(НомАкта) + " від " + Формат(ДатаАкта, "ДФ=dd.MM.yyyy");
	//Иначе
	//	НомАкта		= 
	//	ДатаАкта	= 	
		//АктВыполненныхРабот = "Прибуткова накладна № " + СокрЛП(НомАкта) + " від " + Формат(ДатаАкта, "ДФ=dd.MM.yyyy");
	//КонецЕсли;
	
	Возврат АктВыполненныхРабот;
КонецФункции

Функция ПолучитьВыборкуПоТЧ(докКорректировка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности КАК ВидЗадолженности,
		|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.Наименование КАК НомДоговор,
		|	КорректировкаДолгаСуммыДолга.Сделка КАК ДокументРасчетов,
		|	СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК СуммаДокумента
		|ИЗ
		|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
		|ГДЕ
		|	КорректировкаДолгаСуммыДолга.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности,
		|	КорректировкаДолгаСуммыДолга.Сделка,
		|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", докКорректировка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;	
КонецФункции	

Функция ПолучитьВыборкуДляПреамбулы(докКорректировка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Дата КАК ДатаДокумента,
		|	КорректировкаДолга.Номер,
		|	КорректировкаДолга.КонтрагентДебитор КАК Контрагент,
		|	КорректировкаДолга.КонтрагентДебитор.НаименованиеПолное КАК ИмяПоставщика
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", докКорректировка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
КонецФункции

Функция ПроверитьРавенствоСуммВзаимозачетов(докКорректировка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности,
		|	СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТДебиторская
		|ИЗ
		|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
		|ГДЕ
		|	КорректировкаДолгаСуммыДолга.Ссылка = &Ссылка
		|	И КорректировкаДолгаСуммыДолга.ВидЗадолженности = &Дебиторская
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности,
		|	СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТКредиторская
		|ИЗ
		|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
		|ГДЕ
		|	КорректировкаДолгаСуммыДолга.Ссылка = &Ссылка
		|	И КорректировкаДолгаСуммыДолга.ВидЗадолженности = &Кредиторская
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаДолгаСуммыДолга.ВидЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДебиторская.ВидЗадолженности КАК Дебиторская,
		|	ВТДебиторская.Сумма КАК ДебиторскаяСумма,
		|	ВТКредиторская.ВидЗадолженности КАК Кредиторская,
		|	ВТКредиторская.Сумма КАК КредиторскаяСумма
		|ИЗ
		|	ВТДебиторская КАК ВТДебиторская,
		|	ВТКредиторская КАК ВТКредиторская";
	
	Запрос.УстановитьПараметр("Ссылка", докКорректировка);
	Запрос.УстановитьПараметр("Дебиторская", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();	
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат (ВыборкаДетальныеЗаписи.ДебиторскаяСумма = ВыборкаДетальныеЗаписи.КредиторскаяСумма);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 		
	
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.КорректировкаДолга");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	//возможны варианты - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов,
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Печатная форма Акт взаимозачета"); //имя под kt обработка зарегистрирована будет в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Информация", "Печатная Акт взаимозачета");
	//команды
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление"); //как будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд.Колонки.Добавить("Идентификатор"); //имя нашего макета
	ТаблицаКоманд.Колонки.Добавить("Использование"); //ВызовСерверногоМетода
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение"); //Истина
	ТаблицаКоманд.Колонки.Добавить("Модификатор"); //ПечатьМХL
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = "Печатная форма Акт взаимозачета";
	НоваяКоманда.Идентификатор = "ПечатьАктВзаимозачета"; //Внешняя печатная форма
	НоваяКоманда.Использование = "ВызовКлиентскогоМетода"; //здесь можно прописать использование как серверного так и клиентского, отличие в том, что серверный метод будет обращаться к экспортной процедуре из модуля объекта, клиентский - к экспортной процедуре из модуля формы объекта
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции