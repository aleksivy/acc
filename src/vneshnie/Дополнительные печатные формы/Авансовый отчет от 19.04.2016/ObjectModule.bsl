Функция Печать() Экспорт	

	ТабДокумент = Новый ТабличныйДокумент;
	
	Если  ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Если СсылкаНаОбъект.Дата < Дата("20160419000000") Тогда
			Сообщить(НСтр("ru='Эта внешняя печатная форма предназначена для печати документов только после 19.04.2016!';uk='Ця зовнішня друкована форма призначена для друку документів тільки після 19.04.2016!'"), СтатусСообщения.Важное);
		Возврат Неопределено;
		КонецЕсли; 
		
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП"  Тогда
				
			ТабДокумент = ПечатьАвансовогоОтчетаБП();
		ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "УТП"  Тогда

			ТабДокумент = ПечатьАвансовогоОтчетаУТП();
		ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "УПП"  Тогда

			ТабДокумент = ПечатьАвансовогоОтчетаУПП();
		ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "УТ"  Тогда

			ТабДокумент = ПечатьАвансовогоОтчетаУТ();
		КонецЕсли;
	КонецЕсли;
		
    Возврат ТабДокумент;
	
КонецФункции

	
// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчетаБП() //ok

	Если СсылкаНаОбъект.Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.КодПоДРФО	  КАК ДРФОПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|   Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	НазначениеАванса      КАК НазначениеАванса,  
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента 		  КАК СуммаДокумента	
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Макет       = ПолучитьМакет("Макет");
	КодЯзыкаПечать = "uk";

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
	Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",Шапка.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("Валюта",		Шапка.ВалютаДокумента);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокДт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаИтогов,
	|			Счет В ИЕРАРХИИ (&СчетРасчетов),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник
	|				"+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","И Валюта = &Валюта")+") КАК ХозрасчетныйОстатки";

	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);

	СуммаДоДокумента = 0;

	Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;

	МассивАвансовыхДокументов = СсылкаНаОбъект.ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
 	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПлатежныйОрдерСписаниеДенежныхСредств.СуммаДокумента)
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка
	|";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = ПолученоИзКассы + Число(Таб.Итог("СуммаДокумента"));

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	
	// для расписки получим ФИО с инициалами.
	ДанныеСотрудника = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ФИОПодотчетногоЛицаКратко = ДанныеСотрудника.Представление;
	ФИОПодотчетногоЛица 						= " " + ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
	ОбластьМакета.Параметры.ФИОПодотчетногоЛица = СокрЛП(ФИОПодотчетногоЛица);
	ОбластьМакета.Параметры.ПредставлениеПодразделения = СокрЛП(ДанныеСотрудника.ПОдразделениеОрганизации);
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = СокрЛП(ДанныеСотрудника.Должность);
	
	ПараметрыНеОбязательные = Новый Структура("ВалютаДокументаРасписка",?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп",Строка(Шапка.ВалютаДокумента)));
    ОбластьМакета.Параметры.Заполнить(ПараметрыНеОбязательные);
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	КоличествоДокументов = ?(СсылкаНаОбъект.ВыданныеАвансы.Количество()>3, 3, СсылкаНаОбъект.ВыданныеАвансы.Количество());
	Для Инд = 1 По КоличествоДокументов Цикл
		
		ДокументАванса = СсылкаНаОбъект.ВыданныеАвансы[Инд-1].ДокументАванса;
		
		Если ДокументАванса.Метаданные().Имя = "РасходныйКассовыйОрдер" Тогда
			Документ = "Видатковий касовий ордер №" + Строка(ДокументАванса.НомерОрдера) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежноеПоручениеИсходящее" Тогда
			Документ = "Платіжне доручення вихідне №" + Строка(ДокументАванса.НомерПоручения) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			Документ = "Платіжний ордер на списання коштів №" + Строка(ДокументАванса.Номер) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));	
		КонецЕсли;
		
		ОбластьМакета.Параметры["Документ" + Инд] = Документ;
		ОбластьМакета.Параметры["Получено" + Инд] = ДокументАванса.СуммаДокумента;
		
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИтогВсегоПолучено = ПолученоИзКассы;
	
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
	ОбластьМакета.Параметры.СуммаОтчетПодтверждаю = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать);

	ОбластьМакета.Параметры.СуммаСНДСЧислом = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;"); 
    ОбластьМакета.Параметры.СуммаДокумента  = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;");
  
	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Если ОстатокНаКонец >= 0  Тогда
			//Остаток надо возвращать в валюте
			ОбластьМакета.Параметры.ВалютаОстатокПерерасход = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
		Иначе
			//Перерасход надо возвращать в гривнях
			ОбластьМакета.Параметры.ВалютаОстатокПерерасход = "грн,коп.";
		КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	ЕДРПОУОрганизации = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	// если организация - физ.лицо нужно "добавить" две ячейки
	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Для Инд = 9 По 10 Цикл
			ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
		КонецЦикла; 
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьМакета.Область("КодОрганизации9").Обвести(Линия,Линия,Линия,Линия);
		ОбластьМакета.Область("КодОрганизации10").Обвести(Линия,Линия,Линия,Линия);
	КонецЕсли;

	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ДРФОПодотчетногоЛица_" + Инд] = Сред(Шапка.ДРФОПодотчетногоЛица, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.Дата	       		= Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаКоротко 		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	СУММА(Хозрасчетный."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"Сумма","ВалютнаяСуммаКт")+") КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетКт В ИЕРАРХИИ(&СчетРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();
	ВыборкаПроводокКопияДт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияДт.Свернуть("СчетДт", "Сумма");
	ИспользуемыеКлассыСчетовРасходов = ПолучитьИспользуемыеКлассыСчетовРасходов(Шапка.ДатаДокумента, Шапка.Организация);

	Счетчик = 0;
	Для каждого СтрокаВыборки Из ВыборкаПроводок Цикл
		
		Если Счетчик = 10 тогда
			Прервать;
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетДт) Тогда
			Продолжить;		
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетКт) Тогда
			Продолжить;		
		КонецЕсли;
		
		ИспСумма     = Окр(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма), 2, 1);
		ЦелСумма     = Цел(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма));		
		КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
		
		Если КопСумма = 0 Тогда
			Если ЦелСумма = 0 Тогда
				КопСумма = "";
			Иначе
				КопСумма = "00";	
			КонецЕсли; 
		ИначеЕсли КопСумма < 10 Тогда
			КопСумма = "0" + Строка(КопСумма);
		Иначе
			КопСумма = Строка(КопСумма);
		КонецЕсли; 
		
		Если ЦелСумма = 0 Тогда
			Если КопСумма = 0 Тогда
				ЦелСумма = "";
			Иначе
				ЦелСумма = Строка(ЦелСумма);	
			КонецЕсли;  
		КонецЕсли;		
		
		ОбластьМакета.Параметры["СчетДт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетДт;
		ОбластьМакета.Параметры["СчетКт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетКт;
		ОбластьМакета.Параметры["СуммаБезКопеек" 	+ (Счетчик + 1)] = ЦелСумма;
		ОбластьМакета.Параметры["СуммаКопейки"   	+ (Счетчик + 1)] = КопСумма;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросТовары.УстановитьПараметр("ПустаяДата", 	   Дата("00010101"));
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	ЗапросТовары.УстановитьПараметр("Валюта",          Шапка.ВалютаДокумента);
	
	ЗапросТовары.Текст =" 
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК Номер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК Дата,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	"""" КАК Содержание,
	|	АвансовыйОтчет.СчетУчетаБУ КАК Счет,
	|	NULL КАК СчетЗатрат8Класса,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС,
	|	СУММА(АвансовыйОтчет.Сумма) КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	АвансовыйОтчет.НалоговоеНазначение КАК НалоговоеНазначение,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.НалоговоеНазначение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Оплата постачальникам"",
	|	""Оплата постачальникам"",
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	NULL КАК СчетЗатрат8Класса,
	|	NULL,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто1.Счет8Класса
	|		КОГДА АвансовыйОтчет.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто2.Счет8Класса
	|		КОГДА АвансовыйОтчет.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто3.Счет8Класса
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит),
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто1.Счет8Класса
	|		КОГДА АвансовыйОтчет.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто2.Счет8Класса
	|		КОГДА АвансовыйОтчет.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА АвансовыйОтчет.Субконто3.Счет8Класса
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо,
	|	АвансовыйОтчет.СчетУчетаНДС";

	ЗапросТовары.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	НоменклатураПолное КАК НоменклатураПолное,
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	ВидДокВходящий,
	|	Содержание,
	|	Счет,
	|	СчетЗатрат8Класса,
	|	СчетНДС,
	|	СУММА(ПоОтчету) КАК ПоОтчету,
	|	СУММА(СуммаНДС) КАК СуммаНДС,
	|	СУММА(СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	НалоговоеНазначение,
	|	СуточныеДатаС,
	|	СуточныеДатаПо,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СуточныеДатаС, &ПустаяДата) = &ПустаяДата
	|			ТОГДА СуточныеДатаС
	|		ИНАЧЕ Дата
	|	КОНЕЦ КАК ДатаДляСортировки
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	НоменклатураПолное,
	|	Контрагент,
	|	Номер,
	|	Дата,
	|	ВидДокВходящий,
	|	Содержание,
	|	Счет,
	|	СчетЗатрат8Класса,
	|	СчетНДС,
	|	НалоговоеНазначение,
	|	СуточныеДатаС,
	|	СуточныеДатаПо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДляСортировки,
	|	Номер
	|";
	
	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьСНДС = (НЕ(Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
						 И НЕ (Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
						 И (Товар.СуммаНДС > 0));
		ОбластьМакета = ?(ОбластьСНДС, Макет.ПолучитьОбласть("СтрокаСНДС"), Макет.ПолучитьОбласть("Строка"));

		ОбластьМакета.Параметры.Заполнить(Товар);
		
		НомерСтроки = НомерСтроки + 1;
		
		СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Товар.Контрагент);
		
		ОснованиеПлатежа  = ?(НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.ПолноеНаименование),"",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контр. ""%1""", СокрЛП(СведенияОКонтрагенте.ПолноеНаименование)));
		НазначениеПлатежа = ?(ЗначениеЗаполнено(Товар.Содержание), СокрЛП(Товар.Содержание), СокрЛП(Товар.НоменклатураПолное)); 
		ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(НазначениеПлатежа),"",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" за ""%1""", НазначениеПлатежа)); 
		
		Если (ЗначениеЗаполнено(Товар.ВидДокВходящий))
				 ИЛИ (ЗначениеЗаполнено(Товар.Номер))
				 ИЛИ (ЗначениеЗаполнено(Товар.Дата)) Тогда
		 
			ОснованиеПлатежа = ОснованиеПлатежа + " на підставі док. ";
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.ВидДокВходящий),""," """ + Товар.ВидДокВходящий + """");
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Номер),"",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" № %1", Товар.Номер));
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Дата),"",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" від %1", Формат(Товар.Дата, "ДЛФ=Д")));
			
		КонецЕсли;		    
		
		ОбластьМакета.Параметры.ОснованиеПлатежа = ОснованиеПлатежа;			
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;

		
		ОбластьМакета.Параметры.ОснованиеПлатежа = ОснованиеПлатежа;			
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		Если ОбластьСНДС Тогда 
			Если Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				Если Шапка.СуммаВключаетНДС Тогда
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - Товар.СуммаНДСПропорциональноКредит;	
				Иначе
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + Товар.СуммаНДС - Товар.СуммаНДСПропорциональноКредит;
				КонецЕсли;
				ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДСПропорциональноКредит;
			Иначе
				ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - ?(Шапка.СуммаВключаетНДС, Товар.СуммаНДС, 0);
				ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДС;
			КонецЕсли;
		Иначе	
			ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
		КонецЕсли;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Товар.ПоОтчету 	+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И (?(ЗначениеЗаполнено(Товар.Счет),Счет9Класса(Товар.Счет), Истина)  
					ИЛИ Товар.Счет = ПланыСчетов.Хозрасчетный.Производство
					ИЛИ Товар.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
					ИЛИ Товар.Счет = ПланыСчетов.Хозрасчетный.БракВПроизводстве
					ИЛИ Товар.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
				
				Тогда
				
		  	СчетБУ = Товар.СчетЗатрат8Класса;
			
		Иначе
			СчетБУ = Товар.Счет;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СчетБу = СчетБу;		
		
		Если ЗначениеЗаполнено(Товар.СуточныеДатаС) И ЗначениеЗаполнено(Товар.СуточныеДатаПо) Тогда
		
			ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(Товар.СуточныеДатаС, Товар.СуточныеДатаПо, "uk");
			ОбластьМакета.Параметры.Дата = СтрЗаменить(ОписаниеПериода, "Період: ", "");
		
		ИначеЕсли ЗначениеЗаполнено(Товар.Дата) Тогда
			
			ОбластьМакета.Параметры.Дата = Товар.Дата;
			
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.СуммаСНДС = ИтогоПоОтчету;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчетаУТП()  //ok

	Если СсылкаНаОбъект.Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.КодПоДРФО	  КАК ДРФОПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|   Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	НазначениеАванса      КАК НазначениеАванса,  
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	КоличествоДокументов,   
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента 		  КАК СуммаДокумента	
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Макет       = ПолучитьМакет("Макет");
	КодЯзыкаПечать = "uk";

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
	Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",Шапка.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("Валюта",		Шапка.ВалютаДокумента);


	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокДт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаИтогов,
	|			Счет В ИЕРАРХИИ (&СчетРасчетов),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник
	|				"+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"","И Валюта = &Валюта")+") КАК ХозрасчетныйОстатки";

	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);

	СуммаДоДокумента = 0;

	Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", СсылкаНаОбъект.ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Док.СуммаПлатежа) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Док.СуммаПлатежа) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Док.СуммаПлатежа) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
 	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	
	// для расписки получис ФИО с инициалами.
	ДанныеСотрудника = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.ФИОПодотчетногоЛицаКратко = ДанныеСотрудника.Представление;
	ОбластьМакета.Параметры.ФИОПодотчетногоЛица = ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
	
	ОбластьМакета.Параметры.ПредставлениеПодразделения = СокрЛП(ДанныеСотрудника.ПОдразделениеОрганизации);
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = СокрЛП(ДанныеСотрудника.Должность);
	
	ПараметрыНеОбязательные = Новый Структура("ВалютаДокументаРасписка",?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп",Строка(Шапка.ВалютаДокумента)));
    ОбластьМакета.Параметры.Заполнить(ПараметрыНеОбязательные);
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	КвоАвансов = ?(СсылкаНаОбъект.ВыданныеАвансы.Количество()>3, 3, СсылкаНаОбъект.ВыданныеАвансы.Количество());
	Для Инд = 1 По КвоАвансов Цикл
		
		ДокументАванса = СсылкаНаОбъект.ВыданныеАвансы[Инд-1].ДокументАванса;
		
		Если ДокументАванса.Метаданные().Имя = "РасходныйКассовыйОрдер" Тогда
			Документ = "Видатковий касовий ордер №" + Строка(ДокументАванса.НомерОрдера) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежноеПоручениеИсходящее" Тогда
			Документ = "Платіжне доручення вихідне №" + Строка(ДокументАванса.НомерПоручения) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			Документ = "Платіжний ордер на списання коштів №" + Строка(ДокументАванса.Номер) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));	
		КонецЕсли;
		
		ОбластьМакета.Параметры["Документ" + Инд] = Документ;
		ОбластьМакета.Параметры["Получено" + Инд] = ДокументАванса.СуммаДокумента;
		
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИтогВсегоПолучено = ПолученоИзКассы - 0;
	
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
	ОбластьМакета.Параметры.СуммаОтчетПодтверждаю = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать);

	ОбластьМакета.Параметры.СуммаСНДСЧислом = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;"); 
    ОбластьМакета.Параметры.СуммаДокумента  = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;");
  
	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Если ОстатокНаКонец >= 0  Тогда
		//Остаток надо возвращать в валюте
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Иначе
		//Перерасход надо возвращать в гривнях
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = "грн,коп.";
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	ЕДРПОУОрганизации = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	// если организация - физ.лицо нужно "добавить" две ячейки
	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Для Инд = 9 По 10 Цикл
			ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
		КонецЦикла; 
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьМакета.Область("КодОрганизации9").Обвести(Линия,Линия,Линия,Линия);
		ОбластьМакета.Область("КодОрганизации10").Обвести(Линия,Линия,Линия,Линия);
	КонецЕсли;

	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ДРФОПодотчетногоЛица_" + Инд] = Сред(Шапка.ДРФОПодотчетногоЛица, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.Дата	       		= Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаКоротко 		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	СУММА(Хозрасчетный."+?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"Сумма","ВалютнаяСуммаКт")+") КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетКт В ИЕРАРХИИ(&СчетРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();
	ВыборкаПроводокКопияДт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияДт.Свернуть("СчетДт", "Сумма");
	ИспользуемыеКлассыСчетовРасходов = ПолучитьИспользуемыеКлассыСчетовРасходовУТП(Шапка.ДатаДокумента, Шапка.Организация);
	
	Счетчик = 0;
	Для каждого СтрокаВыборки Из ВыборкаПроводок Цикл
		
		Если Счетчик = 10 тогда
			Прервать;
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетДт) Тогда
			Продолжить;		
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетКт) Тогда
			Продолжить;		
		КонецЕсли;
		
		ИспСумма     = Окр(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма), 2, 1);
		ЦелСумма     = Цел(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма));		
		КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
		
		Если КопСумма = 0 Тогда
			Если ЦелСумма = 0 Тогда
				КопСумма = "";
			Иначе
				КопСумма = "00";	
			КонецЕсли; 
		ИначеЕсли КопСумма < 10 Тогда
			КопСумма = "0" + Строка(КопСумма);
		Иначе
			КопСумма = Строка(КопСумма);
		КонецЕсли; 
		
		Если ЦелСумма = 0 Тогда
			Если КопСумма = 0 Тогда
				ЦелСумма = "";
			Иначе
				ЦелСумма = Строка(ЦелСумма);	
			КонецЕсли;  
		КонецЕсли;		
		
		ОбластьМакета.Параметры["СчетДт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетДт;
		ОбластьМакета.Параметры["СчетКт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетКт;
		ОбластьМакета.Параметры["СуммаБезКопеек" 	+ (Счетчик + 1)] = ЦелСумма;
		ОбластьМакета.Параметры["СуммаКопейки"   	+ (Счетчик + 1)] = КопСумма;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросТовары.УстановитьПараметр("ПустаяДата", 	   Дата("00010101"));
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	ЗапросТовары.УстановитьПараметр("Валюта",          Шапка.ВалютаДокумента);
	ЗапросТовары.Текст = "
	|	ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК Номер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК Дата,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	"""" КАК Содержание,
	|	АвансовыйОтчет.СчетУчетаБУ КАК Счет,
	|	NULL КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма) КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	АвансовыйОтчет.НалоговоеНазначение КАК НалоговоеНазначение,
	|	АвансовыйОтчет.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.НалоговоеНазначение.ВидДеятельностиНДС,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Оплата постачальникам"",
	|	""Оплата постачальникам"",
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	NULL,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	0 КАК СуммаНДСПропорциональноКредит,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.НеОблагаемая),
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат.Счет8Класса,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат.Счет8Класса,
	|	АвансовыйОтчет.НалоговоеНазначение,

	|	АвансовыйОтчет.НалоговоеНазначение.ВидДеятельностиНДС,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо";
	
	ЗапросТовары.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	НоменклатураПолное КАК НоменклатураПолное,
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	ВидДокВходящий,
	|	Содержание,
	|	Счет,
	|	СчетЗатрат8Класса,
	|	СчетНДС,
	|	СУММА(ПоОтчету) КАК ПоОтчету,
	|	СУММА(СуммаНДС) КАК СуммаНДС,
	|	СУММА(СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	НалоговоеНазначение,
	|	ВидДеятельностиНДС,
	|	СуточныеДатаС,
	|	СуточныеДатаПо,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СуточныеДатаС, &ПустаяДата) = &ПустаяДата
	|			ТОГДА СуточныеДатаС
	|		ИНАЧЕ Дата
	|	КОНЕЦ КАК ДатаДляСортировки
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	НоменклатураПолное,
	|	Контрагент,
	|	Номер,
	|	Дата,
	|	ВидДокВходящий,
	|	Содержание,
	|	Счет,
	|	СчетЗатрат8Класса,
	|	СчетНДС,
	|	НалоговоеНазначение,
	|	ВидДеятельностиНДС,
	|	СуточныеДатаС,
	|	СуточныеДатаПо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДляСортировки,
	|	Номер
	|";

	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	ТабДокумент.Вывести(ОбластьМакета);

	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСНДС");
		Если (Товар.СуммаНДС = 0) ИЛИ  (Товар.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");	
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Товар);
		
		НомерСтроки = НомерСтроки + 1;
		
		СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Товар.Контрагент, Шапка.ДатаДокумента);
		
		ОснованиеПлатежа  = ?(НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.ПолноеНаименование),"",СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контр. ""%1""", СокрЛП(СведенияОКонтрагенте.ПолноеНаименование)));
		НазначениеПлатежа = ?(ЗначениеЗаполнено(Товар.Содержание), СокрЛП(Товар.Содержание), СокрЛП(Товар.НоменклатураПолное)); 

		ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(НазначениеПлатежа),""," за """ + НазначениеПлатежа + """"); 
		
		Если (ЗначениеЗаполнено(Товар.ВидДокВходящий))
		 ИЛИ (ЗначениеЗаполнено(Товар.Номер))
		 ИЛИ (ЗначениеЗаполнено(Товар.Дата)) Тогда
			ОснованиеПлатежа = ОснованиеПлатежа + " на підставі док. ";
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.ВидДокВходящий),""," """ + Товар.ВидДокВходящий + """");
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Номер),""," № " + Товар.Номер);
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Дата),""," від " + Формат(Товар.Дата, "ДЛФ=Д"));
		КонецЕсли;		    
		
		ОбластьМакета.Параметры.ОснованиеПлатежа = ОснованиеПлатежа;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Товар.ПоОтчету 	+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
			
		Если     (Товар.СуммаНДС > 0) 
			И НЕ (Товар.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая) Тогда
			ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - ?(Шапка.СуммаВключаетНДС, Товар.СуммаНДС, 0);
			ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДС;
			Если Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				Если Шапка.СуммаВключаетНДС Тогда
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - Товар.СуммаНДСПропорциональноКредит;	
				Иначе
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + Товар.СуммаНДС - Товар.СуммаНДСПропорциональноКредит;
				КонецЕсли;
				ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДСПропорциональноКредит;
			Иначе
				ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - ?(Шапка.СуммаВключаетНДС, Товар.СуммаНДС, 0);
				ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДС;
			КонецЕсли;
		Иначе	
			ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И (?(ЗначениеЗаполнено(Товар.Счет),Счет9Класса(Товар.Счет), Истина)  
					ИЛИ Товар.Счет = ПланыСчетов.Хозрасчетный.Производство
					ИЛИ Товар.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
					ИЛИ Товар.Счет = ПланыСчетов.Хозрасчетный.БракВПроизводстве
					ИЛИ Товар.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
				
				Тогда
				
		  	СчетБУ = Товар.СчетЗатрат8Класса;
			
		Иначе
			СчетБУ = Товар.Счет;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СчетБУ = СчетБу;		
		
		Если ЗначениеЗаполнено(Товар.СуточныеДатаС) И ЗначениеЗаполнено(Товар.СуточныеДатаПо) Тогда
		
			ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(Товар.СуточныеДатаС, Товар.СуточныеДатаПо,"uk");
			ОбластьМакета.Параметры.Дата = СтрЗаменить(ОписаниеПериода, "Период: ", "");
		
		ИначеЕсли ЗначениеЗаполнено(Товар.Дата) Тогда
			
			ОбластьМакета.Параметры.Дата = Товар.Дата;
			
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.СуммаСНДС = ИтогоПоОтчету;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

Функция ПечатьАвансовогоОтчетаУПП()
	Если СсылкаНаОбъект.Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Макет       = ПолучитьМакет("МакетУПП");
	
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.ИНН			  КАК ИННПодотчетногоЛица,
	|   Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	НазначениеАванса      КАК НазначениеАванса,  		
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|	Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение.Код КАК КодПодразделения,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента                      КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Запрос по Авансам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
    Запрос.УстановитьПараметр("Валюта"     , Шапка.ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    , Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Шапка.ДатаДокумента, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"    , Шапка.Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК ПолученоПоБанковскимКартам,	
	|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоИзКассы,
	|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК ОстатокЗадолженности
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка 
	|
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоПоБанковскимКартам,	
	|	0 КАК ПолученоИзКассы,
	|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК ОстатокЗадолженности
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка 
	|
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
	|
	|"; 
	
	Если СсылкаНаОбъект.ОтражатьВБухгалтерскомУчете и НЕ СсылкаНаОбъект.ОтражатьВУправленческомУчете Тогда
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
		Запрос.УстановитьПараметр("Организация", Шапка.Организация);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоИзКассы,
		|	0 КАК ПолученоПоБанковскимКартам,	
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	0 КАК ПолученоИзКассы,
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоПоБанковскимКартам,
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	0 КАК ПолученоИзКассы,
		|	0 КАК ПолученоПоБанковскимКартам,	
		|	ЕстьNULL(ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|"; 
	КонецЕсли;

	ВыборкаАвансы = Запрос.Выполнить().Выбрать();

	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	

	// ТИТУЛЬНЫЙ ЛИСТ

	// Надо получить все ненулевые остатки регистра по этому подотчетнику и этой валюте (взаиморасчетов),
	// которые возникли до данного авансового отчета,
	// при этом курс и кратность взаиморасчетов надо брать из расчетного документа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Шапка.Организация);
	Запрос.УстановитьПараметр("Валюта"     , Шапка.ВалютаДокумента); 
	Запрос.УстановитьПараметр("ФизЛицо"    , Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("Проведен", ИСТИНА);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КурсВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КурсВзаиморасчетов
	|	КОНЕЦ КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КратностьВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АвансовыйОтчет.Ссылка КАК РасчетныйДокумент,
	|			АвансовыйОтчет.КурсДокумента КАК КурсВзаиморасчетов,
	|			АвансовыйОтчет.КратностьДокумента КАК КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|		ГДЕ
	|			АвансовыйОтчет.Организация = &Организация И
	|			АвансовыйОтчет.ВалютаДокумента = &Валюта И
	|			АвансовыйОтчет.ФизЛицо = &ФизЛицо И
	|			АвансовыйОтчет.Дата <= &ДатаОстатка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = &Валюта И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|
	|		ГДЕ
	//|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперацииПП И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &Валюта И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ФизЛицо = &ФизЛицо И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
	|
	|		ГДЕ
	//|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперацииПО И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &Валюта И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ФизЛицо = &ФизЛицо И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовРаботника = &Валюта И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка) КАК ВложенныйЗапрос
	|
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ВложенныйЗапрос.РасчетныйДокумент
	|
	|	ГДЕ
	|		ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Организация = &Организация
	|";
	Если СсылкаНаОбъект.ОтражатьВБухгалтерскомУчете и НЕ СсылкаНаОбъект.ОтражатьВУправленческомУчете Тогда
	
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт - ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокКт КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокКт КАК СуммаВзаиморасчетовКт,
		|	&Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОперацииПП"    , Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	Запрос.УстановитьПараметр("ВидОперацииПО"    , Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеДенежныхСредствПодотчетнику);

	ПредыдущийАванс = Запрос.Выполнить().Выбрать();

	СуммаДоДокумента = 0;
	Пока ПредыдущийАванс.Следующий() Цикл
		
		СуммаДоДокумента = СуммаДоДокумента + ПредыдущийАванс.СуммаВзаиморасчетов; 
		
	КонецЦикла;

	// теперь отнимем сумму расходных ордеров в первой вкладке
	ПолученоИзКассы    = 0;

	Пока ВыборкаАвансы.Следующий() Цикл
		
		Если ВыборкаАвансы.ПолученоИзКассы + ВыборкаАвансы.ПолученоПоБанковскимКартам > ВыборкаАвансы.ОстатокЗадолженности Тогда
			Продолжить;
		КонецЕсли;
					
		ПолученоИзКассы = ПолученоИзКассы + ВыборкаАвансы.ПолученоИзКассы + ВыборкаАвансы.ПолученоПоБанковскимКартам;
	
	КонецЦикла;

	Если СуммаДоДокумента >= 0 Тогда
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
	Иначе
		СуммаДоДокумента = СуммаДоДокумента + ПолученоИзКассы;
	КонецЕсли;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ДанныеСотрудника = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	
	ПредставлениеПодотчетногоЛица = ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
	ОбластьМакета.Параметры.ФИОПодотчетногоЛица = СокрЛП(ПредставлениеПодотчетногоЛица);
	ОбластьМакета.Параметры.ФИОПодотчетногоЛицаКратко = ДанныеСотрудника.Представление;
	ДанныеСотрудника = 0;
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогВсегоПолучено = ПолученоИзКассы;
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;

	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	
	КоличествоДокументов = ?(СсылкаНаОбъект.ВыданныеАвансы.Количество()>3, 3, СсылкаНаОбъект.ВыданныеАвансы.Количество());
	Для Инд = 1 По КоличествоДокументов Цикл
		
		ДокументАванса = СсылкаНаОбъект.ВыданныеАвансы[Инд-1].ДокументАванса;
		
		Если ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			НомерДокументаАванса = ДокументАванса.НомерПоручения;
		ИначеЕсли ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			НомерДокументаАванса = ДокументАванса.НомерОрдера;
		Иначе
			НомерДокументаАванса = ДокументАванса.Номер;
		КонецЕсли;
		
		КодЯзыкаПечать = "uk";
		Документ = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ДокументАванса, КодЯзыкаПечать) + " " + Строка(НомерДокументаАванса) + " від " 
					+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
		
		ОбластьМакета.Параметры["Документ" + Инд] = Документ;
		ОбластьМакета.Параметры["Получено" + Инд] = ДокументАванса.СуммаДокумента;
		
	КонецЦикла;
	
	Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
		ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
		ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
		
	КонецЕсли;
	
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;
	
	ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ВалютаЗаголовокКолонки;
	Если ОстатокНаКонец >= 0  Тогда
		//Остаток надо возвращать в валюте
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Иначе
		//Перерасход надо возвращать в гривнях
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = "грн,коп.";
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ЕДРПОУОрганизации = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	// если организация - физ.лицо нужно "добавить" две ячейки
	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Для Инд = 9 По 10 Цикл
			ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
		КонецЦикла; 
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьМакета.Область("КодОрганизации9").Обвести(Линия,Линия,Линия,Линия);
		ОбластьМакета.Область("КодОрганизации10").Обвести(Линия,Линия,Линия,Линия);
		
	КонецЕсли;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ДРФОПодотчетногоЛица_" + Инд] = Сред(Шапка.ИННПодотчетногоЛица, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.Дата	       		= Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаКоротко 		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеОрганизации        = ПредставлениеОрганизации;
	
	ДолжностьФЛ = "";
	ПодразделениеФЛ = "";
	СведенияПоФизЛицу(Шапка.ПодотчетноеЛицо, Шапка.Организация, ДолжностьФЛ, ПодразделениеФЛ);
	
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = ДолжностьФЛ;
	
	Если ПустаяСтрока(ОбластьМакета.Параметры.ПредставлениеПодразделения) Тогда
		ОбластьМакета.Параметры.ПредставлениеПодразделения = ПодразделениеФЛ;
	КонецЕсли; 
	
	// выводим все суммы в гривнях
	ОбластьМакета.Параметры.СуммаОтчетПодтверждаю = ЧислоПрописью(Шапка.СуммаДокумента, "Л=uk_UA; ДП=Ложь", Шапка.ВалютаДокумента.ПараметрыПрописиНаУкраинском);
	ОбластьМакета.Параметры.СуммаСНДСЧислом = СформироватьСуммуКратко(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаДокументаКратко = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	
	ПараметрыНеОбязательные = Новый Структура("СуммаДокументаКраткоРасписка",СтрЗаменить(ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента),"грн","грн,коп"));
	ОбластьМакета.Параметры.Заполнить(ПараметрыНеОбязательные);
	
	ТекстВВалюте = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета,"Сумма","ВалютнаяСуммаКт");
	
	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	ВЫБОР
	|		КОГДА СУММА(Хозрасчетный."+ТекстВВалюте+") ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(Хозрасчетный."+ТекстВВалюте+")
	|	КОНЕЦ КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетКт В ИЕРАРХИИ(&СчетРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();
	ВыборкаПроводокКопияДт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияДт.Свернуть("СчетДт", "Сумма");
	ВыборкаПроводокКопияКт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияКт.Свернуть("СчетКт", "Сумма");

	ИспользуемыеКлассыСчетовРасходов = ПолучитьИспользуемыеКлассыСчетовРасходовУПП(Шапка.ДатаДокумента, Шапка.Организация);
	
	Счетчик = 0;
	
	Для каждого СтрокаВыборки Из ВыборкаПроводок Цикл
		
		Если Счетчик = 10 тогда
			Прервать;
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетДт) Тогда
			Продолжить;		
		КонецЕсли;
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
			ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
			И Счет9Класса(СтрокаВыборки.СчетКт) Тогда
			Продолжить;		
		КонецЕсли;
		
		ИспСумма     = Окр(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма), 2, 1);
		ЦелСумма     = Цел(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма));		
		КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
		
		Если КопСумма = 0 Тогда
			Если ЦелСумма = 0 Тогда
				КопСумма = "";
			Иначе
				КопСумма = "00";	
			КонецЕсли; 
		ИначеЕсли КопСумма < 10 Тогда
			КопСумма = "0" + Строка(КопСумма);
		Иначе
			КопСумма = Строка(КопСумма);
		КонецЕсли; 
		
		Если ЦелСумма = 0 Тогда
			Если КопСумма = 0 Тогда
				ЦелСумма = "";
			Иначе
				ЦелСумма = Строка(ЦелСумма);	
			КонецЕсли;  
		КонецЕсли;		
		
		ОбластьМакета.Параметры["СчетДт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетДт;
		ОбластьМакета.Параметры["СчетКт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетКт;
		ОбластьМакета.Параметры["СуммаБезКопеек" 	+ (Счетчик + 1)] = ЦелСумма;
		ОбластьМакета.Параметры["СуммаКопейки"   	+ (Счетчик + 1)] = КопСумма;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();

	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	ЗапросТовары.УстановитьПараметр("Валюта",          Шапка.ВалютаДокумента);
	
	ЗапросТовары.УстановитьПараметр("Курс",             Шапка.КурсДокумента);
	ЗапросТовары.УстановитьПараметр("Кратность",        Шапка.КратностьДокумента);

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АвансовыйОтчет");
	
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Номенклатура) КАК НоменклатураПредставление,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НоменклатураНаименованиеПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК Номер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента  КАК Дата,
	|	АвансовыйОтчет.Поставщик КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Поставщик) КАК КонтрагентПредставление,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Поставщик.НаименованиеПолное КАК СТРОКА(1000)) КАК КонтрагентНаименованиеПолное,
	|	АвансовыйОтчет.ВидДокВходящий,	
	|	NULL								   КАК Содержание,
	|	АвансовыйОтчет.СчетУчетаБУ 			   КАК СчетЗатрат,
	|	NULL 			   					   КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма)    		   КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.СуммаНДС) 		   КАК СуммаНДС,
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	АвансовыйОтчет.НалоговоеНазначение     КАК НалоговоеНазначение,
	|	NULL                                   КАК Договор,
	|	АвансовыйОтчет.СчетУчетаНДС 		   КАК СчетНДС,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Оплата постачальникам"" КАК НоменклатураПредставление,	
	|	""Оплата постачальникам"" КАК НоменклатураНаименованиеПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Контрагент),
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК КонтрагентНаименованиеПолное,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	NULL 			   					   КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,  // СуммаНДС
	|	0,  // СуммаНДСПропорциональноКредит
	|	NULL,
	|	АвансовыйОтчет.ДоговорКонтрагента,
	|	0,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	Ложь,
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Номенклатура) КАК НоменклатураПредставление,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НоменклатураНаименованиеПолное,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Поставщик) КАК КонтрагентПредставление,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Поставщик.НаименованиеПолное КАК СТРОКА(1000)) КАК КонтрагентНаименованиеПолное,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат.Счет8Класса КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	СУММА(АвансовыйОтчет.СуммаНДСПропорциональноКредит) КАК СуммаНДСПропорциональноКредит,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	NULL,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат,
	|	АвансовыйОтчет.НалоговоеНазначение,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|";

	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ВалютаЗаголовокКолонки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		// выведем сумму НДС и счет учета НДС отдельно
		
		ОбластьСНДС = (НЕ(Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
						 И НЕ (Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
						 И (Товар.СуммаНДС <> 0));
						 
		ОбластьМакета = ?(ОбластьСНДС, Макет.ПолучитьОбласть("СтрокаСНДС"), Макет.ПолучитьОбласть("Строка"));				 
		
		ОбластьМакета.Параметры.Заполнить(Товар);
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ОбластьСНДС Тогда 
			Если Товар.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				Если Шапка.СуммаВключаетНДС Тогда
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - Товар.СуммаНДСПропорциональноКредит;	
				Иначе
					ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + Товар.СуммаНДС - Товар.СуммаНДСПропорциональноКредит;
				КонецЕсли;
				ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДСПропорциональноКредит;
			Иначе
				ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету - ?(Шапка.СуммаВключаетНДС, Товар.СуммаНДС, 0);
				ОбластьМакета.Параметры.СуммаНДС    = Товар.СуммаНДС;
			КонецЕсли;
		Иначе	
			ОбластьМакета.Параметры.СуммаБезНДС = Товар.ПоОтчету + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
		КонецЕсли;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Товар.ПоОтчету 	+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);		
		
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.Дата        		= Формат(Товар.Дата, "ДЛФ=Д");

				
		ОснованиеПлатежа = ?(НЕ ЗначениеЗаполнено(Товар.Контрагент),
								"",
								"Контр. """ + ?(ЗначениеЗаполнено(Товар.КонтрагентНаименованиеПолное),
												Товар.КонтрагентНаименованиеПолное, 
												Товар.КонтрагентПредставление
											  ) 
								+ """"
							);
		НазначениеПлатежа = ?(ЗначениеЗаполнено(Товар.Содержание), 
								СокрЛП(Товар.Содержание), 
								?(ЗначениеЗаполнено(Товар.НоменклатураНаименованиеПолное),
									Товар.НоменклатураНаименованиеПолное, 
									Товар.НоменклатураПредставление
								)
							); 					
		ОснованиеПлатежа = ОснованиеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " за " + НазначениеПлатежа, ""); 
		
		Если (ЗначениеЗаполнено(Товар.ВидДокВходящий))
		 ИЛИ (ЗначениеЗаполнено(Товар.Номер))
		 ИЛИ (ЗначениеЗаполнено(Товар.Дата)) Тогда
		 
			ОснованиеПлатежа = ОснованиеПлатежа + " на підставі док. ";
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.ВидДокВходящий),""," """ + Товар.ВидДокВходящий + """");
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Номер),""," № " + Товар.Номер);
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Дата),""," від " + Формат(Товар.Дата, "ДЛФ=Д"));
			
		КонецЕсли;		    
		
		ОбластьМакета.Параметры.Содержание			= ОснованиеПлатежа;

		ОбластьМакета.Параметры.СчетБУ = Товар.СчетЗатрат;

		Если ЗначениеЗаполнено(Товар.СуточныеДатаС) И ЗначениеЗаполнено(Товар.СуточныеДатаПо) Тогда
		
			ОбластьМакета.Параметры.Дата = ПредставлениеПериода(НачалоДня(Товар.СуточныеДатаС), КонецДня(Товар.СуточныеДатаПо), "Л = uk_UA; ФП = Истина");
		
		ИначеЕсли ЗначениеЗаполнено(Товар.Дата) Тогда
			
			ОбластьМакета.Параметры.Дата = Формат(Товар.Дата, "ДФ=dd.MM.yyyy");
			
		КонецЕсли; 
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И (?(ЗначениеЗаполнено(Товар.СчетЗатрат),Счет9Класса(Товар.СчетЗатрат), Истина)  
					ИЛИ Товар.СчетЗатрат = ПланыСчетов.Хозрасчетный.Производство
					ИЛИ Товар.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
					ИЛИ Товар.СчетЗатрат = ПланыСчетов.Хозрасчетный.БракВПроизводстве
					ИЛИ Товар.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
				
				Тогда
				
		  	СчетБУ = Товар.СчетЗатрат8Класса;
			
		Иначе
			СчетБУ = Товар.СчетЗатрат;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СчетБУ = СчетБУ;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаСНДС                 = ИтогоПоОтчету;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

Функция ПечатьАвансовогоОтчетаУТ()  //ok
	
	Если СсылкаНаОбъект.Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Курс",            СсылкаНаОбъект.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",       СсылкаНаОбъект.КратностьДокумента);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ФИОПодотчетногоЛица,
	|	ФизЛицо.КодПоДРФО     КАК ИННПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|   Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение.Код КАК КодПодразделения,
	|	НазначениеАванса,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Запрос по Авансам.
	МассивАвансовыхДокументов = СсылкаНаОбъект.ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка";
	
	ВыборкаАвансы = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(ВыборкаАвансы.Итог("СуммаДокумента"));
 	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СУММА(ПлатежныйОрдерСписаниеДенежныхСредств.СуммаДокумента)
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка
	|";
	
	ВыборкаАвансы = Запрос.Выполнить().Выгрузить();
	ПолученоПоБанковскимКартам = Число(ВыборкаАвансы.Итог("СуммаДокумента"));
	ПолученоИзКассы = ПолученоИзКассы + ПолученоПоБанковскимКартам;
	

	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Макет       = ПолучитьМакет("МакетУТ");
	КодЯзыкаПечать = "uk";
	
	// ТИТУЛЬНЫЙ ЛИСТ
	
    // Получаем все остатки авансов, выданных этому подотчетнику по органиации и в валюте этого авансового отчета, на момент отчета
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Шапка.Организация);
	Запрос.УстановитьПараметр("Валюта"     ,       Шапка.ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    ,       Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка",       Новый Граница(Шапка.ДатаДокумента, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ОтражатьВБухУчете", СсылкаНаОбъект.ОтражатьВБухгалтерскомУчете);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И ФизЛицо = &ФизЛицо
	|				И ВЫБОР
	|					КОГДА &ОтражатьВБухУчете
	|						ТОГДА РасчетныйДокумент.ОтражатьВБухгалтерскомУчете
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки";

	ПредыдущиеАвансы = Запрос.Выполнить().Выгрузить();

	СуммаДоДокумента = ПредыдущиеАвансы.Итог("СуммаВзаиморасчетов"); 
	
	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);

	ДанныеСотрудника = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.ФИОПодотчетногоЛицаКратко = ДанныеСотрудника.Фамилия + " " + Лев(ДанныеСотрудника.Имя, 1) + "." +  Лев(ДанныеСотрудника.Отчество, 1) + ".";
	ОбластьМакета.Параметры.ФИОПодотчетногоЛица = ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
	
	ПараметрыНеОбязательные = Новый Структура("ВалютаДокументаРасписка",?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп",Строка(Шапка.ВалютаДокумента)));
    ОбластьМакета.Параметры.Заполнить(ПараметрыНеОбязательные);
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
	КоличествоДокументов = ?(СсылкаНаОбъект.ВыданныеАвансы.Количество()>3, 3, СсылкаНаОбъект.ВыданныеАвансы.Количество());
	Для Инд = 1 По КоличествоДокументов Цикл
		
		ДокументАванса = СсылкаНаОбъект.ВыданныеАвансы[Инд-1].ДокументАванса;
		
		Если ДокументАванса.Метаданные().Имя = "РасходныйКассовыйОрдер" Тогда
			Документ = "Видатковий касовий ордер №" + Строка(ДокументАванса.НомерОрдера) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежноеПоручениеИсходящее" Тогда
			Документ = "Платіжне доручення вихідне №" + Строка(ДокументАванса.НомерПоручения) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
						
		ИначеЕсли ДокументАванса.Метаданные().Имя = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			Документ = "Платіжний ордер на списання коштів №" + Строка(ДокументАванса.Номер) + " від " 
						+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));	
		КонецЕсли;

		ОбластьМакета.Параметры["Документ" + Инд] = Документ;
		ОбластьМакета.Параметры["Получено" + Инд] = ДокументАванса.СуммаДокумента;
		
	КонецЦикла;

	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	ОбластьМакета.Параметры.ИтогВсегоПолучено = ПолученоИзКассы - 0;
	
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
	ОбластьМакета.Параметры.СуммаОтчетПодтверждаю = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаСНДСЧислом = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;"); 
	ОбластьМакета.Параметры.СуммаДокумента = Формат(Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2;");
	
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Если ОстатокНаКонец >= 0  Тогда
		//Остаток надо возвращать в валюте
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	Иначе
		//Перерасход надо возвращать в гривнях
		ОбластьМакета.Параметры.ВалютаОстатокПерерасход = "грн,коп.";
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЕДРПОУОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоДРФО,",Ложь);
	Иначе
		ЕДРПОУОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоЕДРПОУ,",Ложь);
	КонецЕсли;
	
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	// если организация - физ.лицо нужно "добавить" две ячейки
	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Для Инд = 9 По 10 Цикл
			ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
		КонецЦикла; 
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьМакета.Область("КодОрганизации9").Обвести(Линия,Линия,Линия,Линия);
		ОбластьМакета.Область("КодОрганизации10").Обвести(Линия,Линия,Линия,Линия);
	КонецЕсли;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ДРФОПодотчетногоЛица_" + Инд] = Сред(Шапка.ИННПодотчетногоЛица, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.Дата	       		= Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаКоротко 		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");

	ОбластьМакета.Параметры.ПредставлениеОрганизации        = ПредставлениеОрганизации;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	ЗапросТовары.УстановитьПараметр("Валюта",          Шапка.ВалютаДокумента);
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК Номер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента  КАК Дата,
	|	АвансовыйОтчет.Поставщик              КАК Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	""Придбані товари""                    КАК Содержание,
	|	СУММА(АвансовыйОтчет.Сумма)    		   КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.СуммаНДС) 		   КАК СуммаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Оплата постачальникам"" КАК Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент КАК Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий, 
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС)
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000))";
	
	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.ВалютаЗаголовокКолонки = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн,коп.",Строка(Шапка.ВалютаДокумента));
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		
		НомерСтроки = НомерСтроки + 1;
		
		ОснованиеПлатежа = ?(НЕ ЗначениеЗаполнено(Товар.Поставщик),"","Контр. " + Строка(Товар.Поставщик));
		НазначениеПлатежа = ?(ЗначениеЗаполнено(Товар.Содержание), СокрЛП(Товар.Содержание), Товар.Номенклатура); 
		
		ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(НазначениеПлатежа),""," за """ + НазначениеПлатежа + """"); 
		
		Если (ЗначениеЗаполнено(Товар.ВидДокВходящий))
		 ИЛИ (ЗначениеЗаполнено(Товар.Номер))
		 ИЛИ (ЗначениеЗаполнено(Товар.Дата)) Тогда
			ОснованиеПлатежа = ОснованиеПлатежа + " на підставі док. ";
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.ВидДокВходящий),""," " + Строка(Товар.ВидДокВходящий));
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Номер),""," № "+ Строка(Товар.Номер));
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Дата),""," від "+ Строка(Формат(Товар.Дата, "ДЛФ=Д")));
		КонецЕсли;		    
		
		ОбластьМакета.Параметры.ОснованиеПлатежа = ОснованиеПлатежа;			
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		Сумма = Товар.ПоОтчету 
			+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

		ОбластьМакета.Параметры.СуммаСНДС = Сумма;

		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.СуммаСНДС = ИтогоПоОтчету;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

Функция ПолучитьИспользуемыеКлассыСчетовРасходов(Дата, Организация) Экспорт
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	Если УчетнаяПолитикаНеЗадана тогда
		Возврат Перечисления.КлассыСчетовРасходов.ПустаяСсылка();
	Иначе
		Возврат УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов;
	Конецесли;
	
КонецФункции

Функция ПолучитьИспользуемыеКлассыСчетовРасходовУТП(Дата, Организация) Экспорт
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СрезПоследних(Дата, Новый Структура("Организация",Организация));
	
	Если ПараметрыУчетнойПолитики.Количество()=0 тогда
		
		Возврат Перечисления.КлассыСчетовРасходов.ПустаяСсылка();
		
	Иначе
		
		Возврат ПараметрыУчетнойПолитики[0].ИспользуемыеКлассыСчетовРасходов;
		
	Конецесли;
	
КонецФункции

Функция ПолучитьИспользуемыеКлассыСчетовРасходовУПП(Дата, Организация) Экспорт
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Дата, Новый Структура("Организация", Организация));
	
	Если ПараметрыУчетнойПолитики.Количество() = 0 тогда
		Возврат Перечисления.КлассыСчетовРасходов.ПустаяСсылка();
	Иначе
		Возврат ПараметрыУчетнойПолитики[0].ИспользуемыеКлассыСчетовРасходов;
	КонецЕсли;
КонецФункции

Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ЯзыкПечати = Неопределено) Экспорт

	Если ЯзыкПечати = Неопределено Тогда
		ЯзыкПечати = Локализация.КодЯзыкаИнтерфейса();
	КонецЕсли;
	
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = НСтр("ru='Период: без ограничения.';uk='Період: без обмеження.'", ЯзыкПечати);

	ИначеЕсли ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = НСтр("ru='Период: ';uk='Період: '", ЯзыкПечати) + Формат(ДатаНач, НСтр("ru='ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""';uk='ДФ = ""дд.ММ.гггг""; ДП = ""без обмеження""'", ЯзыкПечати)) 
							+ " - "      + Формат(ДатаКон, НСтр("ru='ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""';uk='ДФ = ""дд.ММ.гггг""; ДП = ""без обмеження""'", ЯзыкПечати));

	ИначеЕсли ДатаНач > ДатаКон Тогда	
		
			ОписаниеПериода     = НСтр("ru='Период задан неправильно.';uk='Період заданий не вірно'", ЯзыкПечати);
			
    Иначе
	
			ОписаниеПериода = НСтр("ru='Период: ';uk='Період: '", ЯзыкПечати) + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "Л = "+Локализация.ОпределитьКодЯзыкаДляФормат(ЯзыкПечати)+"; ФП = Истина");

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

Функция Счет9Класса(Счет)
	
	Если ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Тогда
		Счет9Класса = Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности); 
	Иначе
		СчетаЗатрат	= Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеЗатраты);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтУчастияВКапитале);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыДеятельности);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.НалогНаПрибыль);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеЗатраты);
		Счет9Класса = (СчетаЗатрат.Найти(Счет) <> Неопределено);
	КонецЕсли;
	
	Возврат(Счет9Класса);
				
КонецФункции

// Проверяет используются счета-классы в качестве групп и возвращает признак.
//
Функция ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Экспорт
	
	ЗапросКлассыСчетов = Новый Запрос;
	ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Хозрасчетный.Ссылка
	                           |ИЗ
	                           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                           |ГДЕ
	                           |	Хозрасчетный.Родитель = &Родитель";
	ЗапросКлассыСчетов.УстановитьПараметр("Родитель",ПланыСчетов.Хозрасчетный.НеоборотныеАктивы);
	Возврат ЗапросКлассыСчетов.Выполнить().Выбрать().Количество()>0;
	
КонецФункции

Процедура СведенияПоФизЛицу(Физлицо, Организация, ДолжностьФЛ, ПодразделениеФЛ) 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Должность.Представление КАК Должность,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Представление КАК Подразделение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок
	|		,Сотрудник.Физлицо = &Физлицо И Организация = &Организация) КАК РаботникиОрганизации";
	

	Запрос.УстановитьПараметр("ДатаДок", СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДолжностьФЛ = "";
		ПодразделениеФЛ = "";
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДолжностьФЛ = Выборка.Должность;
		ПодразделениеФЛ = Выборка.Подразделение;
		Возврат;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьСуммуКратко(СуммаДок, ВалютаДок)
	
	
	Рез = Цел(СуммаДок);
	Если Рез = 0 Тогда
		Рез = "0 " + СокрЛП(ВалютаДок.Наименование);
	Иначе
		Рез = Строка(Рез) + " " + СокрЛП(ВалютаДок.Наименование);
	КонецЕсли; 
	
	// получим представление копеек
	
	СтрокаПараметров = СтрЗаменить(ВалютаДок.ПараметрыПрописиНаУкраинском, ",", Символы.ПС);
	ПредставлениеКоп = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5));
	
	// для всех валют будем брать 3 первых символа и добавлять "."
	ПредставлениеКоп = Сред(ПредставлениеКоп, 1, 3) + ".";
	
	Копеек = (СуммаДок - Цел(СуммаДок)) * 100;
	// округлим до целого, СуммаДок может быть больше чем с 2 знаками
	Копеек = Окр(Копеек, 0);
	
	РезКоп = "";
	Если Копеек = 0 Тогда
		РезКоп = "00 " + ПредставлениеКоп;
	ИначеЕсли Копеек < 10 Тогда
		РезКоп = "0" + Строка(Копеек) + " " + ПредставлениеКоп;
	Иначе
		РезКоп = Строка(Копеек) + " " + ПредставлениеКоп;
	КонецЕсли; 
	
	Рез = Рез + " " + РезКоп;
	
	Возврат Рез;
	

КонецФункции // СформироватьСуммуКратко()

