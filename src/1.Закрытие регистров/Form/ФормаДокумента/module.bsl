Перем ИмяКонфигурации;

Перем ОбработкаТаблицаРегистровНакопления;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит доступлный список действий документа
Перем мСписокДействий;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем ТаблицаРегистровБухгалтерииТорговля;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровНакопления
//
Процедура НастроитьЗакладкиПанелиРегистровНакопления()

	Если ТаблицаРегистровНакопления.Количество() = 0 Тогда
		
		Сч = 0;
		Пока Сч < ЭлементыФормы.ПанельРегистровНакопления.Страницы.Количество() Цикл
			Если ЭлементыФормы.ПанельРегистровНакопления.Страницы[Сч].Имя<>"Подсказка" Тогда
				ЭлементыФормы.ПанельРегистровНакопления.Страницы.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПанельРегистровНакопления.Страницы.Подсказка.Видимость = Истина;
		ЭлементыФормы.ПанельРегистровНакопления.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		// Добавим новые страницы
		ЭлементыФормы.ПанельРегистровНакопления.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровНакопления Цикл
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистровНакопления.Страницы Цикл
				Если СтраницаПанели.Имя = СтрокаТаблицыРегистров.Имя Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровНакопления.Страницы.Вставить(ТаблицаРегистровНакопления.Индекс(СтрокаТаблицыРегистров), СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Представление);
			
			ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ПанельРегистровНакопления);
			КоманднаяПанельРегистра.Верх = 6;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистровНакопления.Ширина - 12 - 2;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ПанельРегистровНакопления);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				ПолеРегистра.Значение.Прочитать();
			КонецЕсли; 
			
			ПолеРегистра.Верх = 30;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистровНакопления.Ширина - 12 - 2;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистровНакопления.Высота - 24 - 12 - 20;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			Если Метаданные.РегистрыНакопления[СтрокаТаблицыРегистров.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, НСтр("ru='Вид движения';uk='Вид руху'",Локализация.КодЯзыкаИнформационнойБазы()));
				КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
				КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
				КолонкаВидДвижения.Данные = "ВидДвижения";
				КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
				КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
			КонецЕсли; 
			
			ПолеРегистра.Колонки.Регистратор.Видимость = Ложь;
			ПолеРегистра.Колонки.Период.Видимость      = Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость = Ложь;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = НСтр("ru='Переключить активность';uk='Перемкнути активність'");
			
			//+++ ИС Чайка Виталий 2009-03-26 {Заполнение} (
			
			КоманднаяПанельРегистра.Кнопки.Добавить("ЗаполнитьПоОстаткам", ТипКнопкиКоманднойПанели.Действие, "Заполнить по остаткам", Новый Действие("ДействияФормыЗаполнитьПоОстаткам"));
			КоманднаяПанельРегистра.Кнопки.Добавить("Настройки", ТипКнопкиКоманднойПанели.Действие, "Настройки отбора", Новый Действие("ДействияФормыНастройки"));
			КоманднаяПанельРегистра.Кнопки.Добавить("Распределение", ТипКнопкиКоманднойПанели.Действие, "Распределение", Новый Действие("ДействияФормыРаспределение"));
			КоманднаяПанельРегистра.Кнопки.Добавить("ЗаполнитьПоОстаткамЗаменаДокументаОприходования", ТипКнопкиКоманднойПанели.Действие, "Заполнить по остаткам с заменой реквизита ""Документ оприходования""", Новый Действие("ДействияФормыЗаполнитьПоОстаткамЗаменаДокументаОприходования"));
			
			//+++ ИС Чайка Виталий 2009-03-26 {Заполнение} )
			
		КонецЦикла; 
		
		// Удалим лишние страницы
		Индекс = 0;
		Пока 1 = 1 Цикл
			
			Если Индекс > ЭлементыФормы.ПанельРегистровНакопления.Страницы.Количество() - 2 Тогда
				Прервать;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровНакопления.Страницы[Индекс];
			
			Если ТаблицаРегистровНакопления.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровНакопления.Страницы.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровНакопления.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровНакопления.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровСведений
//
Процедура НастроитьЗакладкиПанелиРегистровСведений()
	
	Если ТаблицаРегистровСведений.Количество() = 0 Тогда
		
		Сч = 0;
		Пока Сч < ЭлементыФормы.ПанельРегистровСведений.Страницы.Количество() Цикл
			Если ЭлементыФормы.ПанельРегистровСведений.Страницы[Сч].Имя<>"Подсказка" Тогда
				ЭлементыФормы.ПанельРегистровСведений.Страницы.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПанельРегистровСведений.Страницы.Подсказка.Видимость = Истина;
		ЭлементыФормы.ПанельРегистровСведений.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		// Добавим новые страницы
		ЭлементыФормы.ПанельРегистровСведений.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровСведений Цикл
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистровСведений.Страницы Цикл
				Если СтраницаПанели.Имя = СтрокаТаблицыРегистров.Имя Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровСведений.Страницы.Вставить(ТаблицаРегистровСведений.Индекс(СтрокаТаблицыРегистров), СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Представление);
			
			ЭлементыФормы.ПанельРегистровСведений.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ПанельРегистровСведений);
			КоманднаяПанельРегистра.Верх = 6;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистровСведений.Ширина - 12 - 2;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ПанельРегистровСведений);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				ПолеРегистра.Значение.Прочитать();
			КонецЕсли; 
			
			ПолеРегистра.Верх = 30;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистровСведений.Ширина - 12 - 2;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистровСведений.Высота - 24 - 12 - 20;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			ПолеРегистра.Колонки.Регистратор.Видимость = Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость = Ложь;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = НСтр("ru='Переключить активность';uk='Перемкнути активність'");
			
		КонецЦикла; 
		
		// Удалим лишние страницы
		Индекс = 0;
		Пока 1 = 1 Цикл
			
			Если Индекс > ЭлементыФормы.ПанельРегистровСведений.Страницы.Количество() - 2 Тогда
				Прервать;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровСведений.Страницы[Индекс];
			
			Если ТаблицаРегистровСведений.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровСведений.Страницы.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровСведений.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровСведений.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровСведений.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровБухгалтерии
//
Процедура НастроитьЗакладкиПанелиРегистровБухгалтерии()
	
	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Если ТаблицаРегистровБухгалтерииТорговля.Количество() = 0 Тогда
		
		ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Хозрасчетный.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Налоговый.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Подсказка.Видимость = Истина;
		
		ЭлементыФормы.ПанельРегистровБухгалтерии.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		ЭлементыФормы.ПанельРегистровБухгалтерии.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровБухгалтерииТорговля Цикл
			ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы[СтрокаТаблицыРегистров.Имя].Видимость = Истина;
		КонецЦикла;
		
		Индекс = 0;
		Пока 1 = 1 Цикл
			
			Если Индекс > ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Количество() - 2 Тогда
				Прервать;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы[Индекс];
			
			Если ТаблицаРегистровБухгалтерииТорговля.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы[СтраницаПанели.Имя].Видимость = Ложь;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровБухгалтерии.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НастроитьЗакладкиПанелейРегистров()
	
	НастроитьЗакладкиПанелиРегистровНакопления();
	НастроитьЗакладкиПанелиРегистровСведений();
	НастроитьЗакладкиПанелиРегистровБухгалтерии();
	
КонецПроцедуры // НастроитьЗакладкиПанелейРегистров() 

Процедура ПереключитьАктивность(Кнопка)

	ТекущаяАктивность = Ложь;
	Если ЭлементыФормы[Кнопка.Имя].Значение.Количество() > 0 Тогда
		ТекущаяАктивность = ЭлементыФормы[Кнопка.Имя].Значение[0].Активность;
	КонецЕсли;
	ЭлементыФормы[Кнопка.Имя].Значение.УстановитьАктивность(НЕ ТекущаяАктивность);

КонецПроцедуры

// Процедура заполняет список возможных действий табличной части Выполняемые действия
//
Процедура ОбновитьСписокДействий()
	
	//СписокДействий = Новый СписокЗначений;
	//СписокДействий.Добавить(НСтр("ru='Сторно движений документа';uk='Сторно рухів документа'"));
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВнешниеОбработкиПринадлежность.Ссылка,
	//|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование
	//|ИЗ
	//|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	//|ГДЕ
	//|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	//|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	//|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Наименование";
	//
	//Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	//Запрос.УстановитьПараметр("Ссылка", Документы.КорректировкаЗаписейРегистров.ПустаяСсылка());
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	СписокДействий.Добавить(Выборка.Ссылка, Выборка.Наименование);
	//КонецЦикла;
	//
	//мСписокДействий = СписокДействий;
	
КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / ?(Запись.Кратность = 0, 1, Запись.Кратность);
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Заполнение параметров формы настройки спсика регистров перед открытием
//
Процедура ИнициализацияФормыНастройки(ФормаНастройки,ИмяТекущейСтраницы = "")
	
	ФормаНастройки.СписокРегистровНакопления.Очистить();
	ФормаНастройки.СписокРегистровСведений.Очистить();
	
	Если Лев(ИмяКонфигурации, 19) <> "УправлениеТорговлей" Тогда
		
		ФормаНастройки.СписокРегистровБухгалтерии.Очистить();
		
	КонецЕсли;	
	
	Для каждого Набор Из Движения Цикл
		
		МетаданныеНабора = Набор.Метаданные();
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровНакопления.Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			Если МетаданныеНабора.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Остатки;
			Иначе
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Обороты;
			КонецЕсли;
			Если ТаблицаРегистровНакопления.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровСведений  .Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрСведений;
			Если ТаблицаРегистровСведений.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровБухгалтерии.Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
			Если ТаблицаРегистровБухгалтерииТорговля.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаНастройки.ТЗРегистровНакопления  = ТаблицаРегистровНакопления.Выгрузить();
	ФормаНастройки.ТЗРегистровСведений    = ТаблицаРегистровСведений.Выгрузить();
	
	Если Лев(ИмяКонфигурации, 19) <> "УправлениеТорговлей" Тогда
		
		ФормаНастройки.ТЗРегистровБухгалтерии = ТаблицаРегистровБухгалтерииТорговля.Выгрузить();
    		
	КонецЕсли;	
		
	ФормаНастройки.ИмяТекущейСтраницы = ИмяТекущейСтраницы;
	
КонецПроцедуры

// Обработка результатов возвращаемых формой настройки списока регистров
//
Процедура ОбработкаНастройки(ФормаНастройки)
	
	//////////////////////
	// Регистры накопления
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ТаблицаРегистровНакопления.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
			
		СтрокаТаблицы = ТаблицаРегистровНакопления[Индекс];
		
		СтрокаТаблицыОбработки = ОбработкаТаблицаРегистровНакопления[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровНакопления.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			
			ОбработкаТаблицаРегистровНакопления.Удалить(СтрокаТаблицыОбработки);
			
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			
			ОбработкаТаблицаРегистровНакопления.Удалить(СтрокаТаблицыОбработки);
			
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровНакопления Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровНакопления.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
		НоваяСтрокаОбработка = ОбработкаТаблицаРегистровНакопления.Добавить();
		НоваяСтрокаОбработка.Имя = ЭлементСписка.Значение;
		НоваяСтрокаОбработка.Представление = ЭлементСписка.Представление;
		НоваяСтрокаОбработка.Настройки = Новый ХранилищеЗначения("");
		
	КонецЦикла; 
		
	ТаблицаРегистровНакопления.Сортировать("Имя ВОЗР");
	
	ОбработкаТаблицаРегистровНакопления.Сортировать("Имя ВОЗР");
	
	//////////////////////
	// Регистры сведений
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ТаблицаРегистровСведений.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
			
		СтрокаТаблицы = ТаблицаРегистровСведений[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровСведений.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровСведений Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровСведений.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровСведений.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровСведений.Сортировать("Имя ВОЗР");
	
	Если Лев(ИмяКонфигурации, 19) <> "УправлениеТорговлей" Тогда
		
		//////////////////////
		// Регистры бухгалтерии
		//////////////////////
		
		// Сначала удалим те, у которых сняли флажки
		Индекс = 0;
		Пока 1 = 1 Цикл
			
			Если Индекс > ТаблицаРегистровБухгалтерииТорговля.Количество() - 1 Тогда
				Прервать;
			КонецЕсли; 
			
			СтрокаТаблицы = ТаблицаРегистровБухгалтерииТорговля[Индекс];
			
			ЭлементСписка = ФормаНастройки.СписокРегистровБухгалтерии.НайтиПоЗначению(СтрокаТаблицы.Имя);
			Если ЭлементСписка = Неопределено Тогда
				Движения[СтрокаТаблицы.Имя].Очистить();
				ТаблицаРегистровБухгалтерииТорговля.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли; 
			Если НЕ ЭлементСписка.Пометка Тогда
				Движения[СтрокаТаблицы.Имя].Очистить();
				ТаблицаРегистровБухгалтерииТорговля.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Теперь добавим новые
		Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровБухгалтерии Цикл
			
			Если НЕ ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТаблицаРегистровБухгалтерииТорговля.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРегистровБухгалтерииТорговля.Добавить();
			НоваяСтрока.Имя = ЭлементСписка.Значение;
			НоваяСтрока.Представление = ЭлементСписка.Представление;
			
		КонецЦикла; 
		
		ТаблицаРегистровБухгалтерииТорговля.Сортировать("Имя ВОЗР");
		
	КонецЕсли;

	НастроитьЗакладкиПанелейРегистров();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента ДействияФормы.Настройка.
// .
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки);
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	Попытка
		
		Если Лев(ИмяКонфигурации, 11) = "Бухгалтерия" Тогда 
		
			Выполнить("РаботаСДиалогами.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);");
		
		Иначе
		
			Выполнить("МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);");
		
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ИспользоватьЗаполнениеДвижений
//
Процедура ИспользоватьЗаполнениеДвиженийПриИзменении(Элемент)
	
	Если ИспользоватьЗаполнениеДвижений Тогда
		ЭлементыФормы.ПанельЗаполнениеДвижений.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнениеДвижений.Страницы.ТаблицаЗаполнениеДвижений;
	Иначе
		Если ЗаполнениеДвижений.Количество()>0 Тогда
			Ответ = Вопрос(НСтр("ru='Табличная часть ""Заполнение движений"" будет очищена.';uk='Таблична частина ""Заповнення рухів"" буде очищена.'"),РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				ИспользоватьЗаполнениеДвижений = Истина;
				Возврат;
			КонецЕсли;
			
			ЗаполнениеДвижений.Очистить();
		КонецЕсли;
		ЭлементыФормы.ПанельЗаполнениеДвижений.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнениеДвижений.Страницы.ПодсказкаЗаполнениеДвижений;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровСведений
//
Процедура ГиперссылкаНастройкаСоставаРегистровСведенийНажатие(Элемент)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Сведений");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровНакопления
//
Процедура ГиперссылкаНастройкаСоставаРегистровНакопленияНажатие(Элемент)

	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Накопления");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровБухгалтерии
//
Процедура ГиперссылкаНастройкаСоставаРегистровБухгалтерииНажатие(Элемент)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Бухгалтерии");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВЫПОНЯЕМЫЕ ДЕЙСТВИЯ

// Процедура - обработчик события "НачалоВыбора" поля ввода "Действие"
// в строке табличной части "Выполняемые действия".
//
Процедура ЗаполнениеДвиженийДействиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеДействие = мСписокДействий.ВыбратьЭлемент(НСтр("ru='Выберите действие';uk='Виберіть дію'"));
	Если ВыбранноеДействие <> неопределено Тогда
		Элемент.Значение = ВыбранноеДействие.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПроводкиБУ и ПроводкиНУ

// Процедура - обработчик события "ПриИзменении" поля Организация
//
Процедура ТабличноеПолеДвиженияБУОрганизацияПриИзменении(Элемент)
	
	ТипБС = Тип("СправочникСсылка.БанковскиеСчета");
	ТипПО = Тип("СправочникСсылка.ПодразделенияОрганизаций");

	Проводка = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	Если ЗначениеЗаполнено(Проводка.СубконтоДт.БанковскиеСчета) Тогда
		Проводка.СубконтоДт.БанковскиеСчета = Новый(ТипБС);
	КонецЕсли;

	Если ЗначениеЗаполнено(Проводка.СубконтоДт.Подразделения) Тогда
		Проводка.СубконтоДт.Подразделения = Новый(ТипПО);
	КонецЕсли;

	Если ЗначениеЗаполнено(Проводка.СубконтоКт.БанковскиеСчета) Тогда
		Проводка.СубконтоКт.БанковскиеСчета = Новый(ТипБС);
	КонецЕсли;

	Если ЗначениеЗаполнено(Проводка.СубконтоКт.Подразделения) Тогда
		Проводка.СубконтоКт.Подразделения = Новый(ТипПО);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияБУ 
//
Процедура ТабличноеПолеДвиженияБУПриНачалеРедактирования(Элемент, НоваяСтрока)

	Строка = Элемент.ТекущаяСтрока;

	Строка.Период      = Дата;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияБУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияБУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаДт
//
Процедура ТабличноеПолеДвиженияБУВалютаДтПриИзменении(Элемент)

	ТД       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Дата);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаКт
//
Процедура ТабличноеПолеДвиженияБУВалютаКтПриИзменении(Элемент)

	ТД = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	Если НЕ ТД.СчетДт.Валютный Тогда
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Дата);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	
	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	

	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоДт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоДт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоДт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоДт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");

	Выполнить("БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока.Организация, СписокПараметров);");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	

	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоКт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоКт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоКт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоКт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
	
	Выполнить("БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока.Организация, СписокПараметров);");

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияНУ
//
Процедура ТабличноеПолеДвиженияНУПриНачалеРедактирования(Элемент, НоваяСтрока)

	Строка = Элемент.ТекущаяСтрока;

	Строка.Период      = Дата;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияНУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияНУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТабличноеПолеДвиженияНУСубконтоДтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоДт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоДт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеДвиженияНУСубконтоКтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоКт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоКт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
Процедура ТабличноеПолеДвиженияНУСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиНалоговыхДеклараций") Тогда
		РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли);
		Возврат;
	КонецЕсли;	
		
	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоДт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоДт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоДт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоДт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");

	Выполнить("БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока.Организация, СписокПараметров);");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ТабличноеПолеДвиженияНУСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоКт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоКт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоКт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоКт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
	
	Выполнить("БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока.Организация, СписокПараметров);");

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет            = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетКт;
	ФормаВыбора.ВладелецФормы           = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе      = Истина;
	ФормаВыбора.РежимВыбора             = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Кредит;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетДт;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСчетКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетДт;
	ФормаВыбора.ВладелецФормы      = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе = Истина;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Дебет;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетКт;

	ФормаВыбора.Открыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Перем Документ;
	
	КодВозврата = Вопрос("Создать новый документ?" + Символы.ПС + "(НЕТ - Открыть существующий документ!)", РежимДиалогаВопрос.ДаНетОтмена);
	
	Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда 
		
		ФормаВыбора = Документы.КорректировкаЗаписейРегистров.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.ОткрытьМодально();		
		
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	  	
	//// Установка подменю "Советы".
	//РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы);

КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда

		// Заполнить реквизиты значениями по умолчанию.
		
		Попытка
			
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""));");		
	
		Исключение
			
			Выполнить("ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""));");
	
		КонецПопытки;
		
		Если Лев(ИмяКонфигурации, 11) = "Бухгалтерия" Тогда
			
			ЗаполнениеДокументов.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			
		ИначеЕсли Лев(ИмяКонфигурации, 38) <> "УправлениеПроизводственнымПредприятием" И Лев(ИмяКонфигурации, 19) <> "УправлениеТорговлей" И Лев(ИмяКонфигурации, 29) <> "ЗарплатаИУправлениеПерсоналом" Тогда
			
			ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			
		КонецЕсли;	
		
	Иначе
		
		Если Лев(ИмяКонфигурации, 11) = "УправлениеТорговымПредприятием" Тогда
			
			НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаРегистровНакопления Цикл
			
			СтрокаТаблицыОбработка = ОбработкаТаблицаРегистровНакопления.Добавить();
			СтрокаТаблицыОбработка.Настройки = Новый ХранилищеЗначения("");
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбработка, СтрокаТаблицы);			
			
		КонецЦикла;	

	КонецЕсли;
	
	Попытка
		
		Если Лев(ИмяКонфигурации, 11) = "Бухгалтерия" Тогда 
		
			Выполнить("РаботаСДиалогами.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);");
		
		Иначе
		
			Выполнить("МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);");
		
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
	
	НастроитьЗакладкиПанелейРегистров();
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();	
	
	ОбновитьСписокДействий();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	УстановитьВидимость();

КонецПроцедуры

// Установливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата");
	
	Если не ИспользоватьЗаполнениеДвижений Тогда
		Если ТаблицаРегистровБухгалтерииТорговля.Количество()>0 Тогда
			ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыБухгалтерии;
			Если ЭлементыФормы.ТабличноеПолеДвиженияБУ.Значение.Количество()>0 тогда
				ЭлементыФормы.ПанельРегистровБухгалтерии.ТекущаяСтраница=ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Хозрасчетный;
				РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
			ИначеЕсли ЭлементыФормы.ТабличноеПолеДвиженияНУ.Значение.Количество()>0 тогда
				ЭлементыФормы.ПанельРегистровБухгалтерии.ТекущаяСтраница=ЭлементыФормы.ПанельРегистровБухгалтерии.Страницы.Налоговый;
				РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
			КонецЕсли;
			
		ИначеЕсли ТаблицаРегистровНакопления.Количество()>0 Тогда
			ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления;
		
			Сч = 0;
			Пока Сч < ЭлементыФормы.ПанельРегистровНакопления.Страницы.Количество() Цикл
				Если ЭлементыФормы.ПанельРегистровНакопления.Страницы[Сч].Имя<>"Подсказка" Тогда
					ЭлементУправления = ЭлементыФормы.Найти(ЭлементыФормы.ПанельРегистровНакопления.Страницы[Сч].Имя);
					Если ЭлементУправления.Значение.Количество() > 0 Тогда
						РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
					Прервать;
					КонецЕсли;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
			
		ИначеЕсли ТаблицаРегистровСведений.Количество()>0 Тогда
			ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений;
			
			Сч = 0;
			Пока Сч < ЭлементыФормы.ПанельРегистровСведений.Страницы.Количество() Цикл
				Если ЭлементыФормы.ПанельРегистровСведений.Страницы[Сч].Имя<>"Подсказка" Тогда
					ЭлементУправления = ЭлементыФормы.Найти(ЭлементыФормы.ПанельРегистровСведений.Страницы[Сч].Имя);
					Если ЭлементУправления.Значение.Количество() > 0 Тогда
						РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
					Прервать;
					КонецЕсли;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
			
		Иначе
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельЗаполнениеДвижений.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнениеДвижений.Страницы.ТаблицаЗаполнениеДвижений;
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого РегистрБухгалтерии из ТаблицаРегистровБухгалтерииТорговля Цикл
		НомерСтроки = 0;
		Для каждого Проводка из Движения[РегистрБухгалтерии.Имя] Цикл
			НомерСтроки = НомерСтроки +1;
			СтрокаНачалаСообщенияОбОшибке = Локализация.СтрШаблон(НСтр("ru='В строке номер ""¤1¤"" табличной части ""¤2¤"": ';uk='У рядку номер ""¤1¤"" табличної частини ""¤2¤"": '"), СокрЛП(НомерСтроки), РегистрБухгалтерии.Представление);

			Если НЕ ЗначениеЗаполнено(Проводка.Организация) Тогда
				СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Организация""!';uk='Не заповнене значення реквізиту ""Організація""!'");
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаРегистровНакопления Цикл
		Для каждого Запись Из Движения[СтрокаТаблицы.Имя] Цикл
			Запись.Период = Дата;
		КонецЦикла; 
	КонецЦикла; 
	
	Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Или Лев(ИмяКонфигурации, 29) = "ЗарплатаИУправлениеПерсоналом" Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Для Каждого Проводка Из Движения.Хозрасчетный Цикл

		Проводка.Период      = Дата;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()

	ЭлементыФормы.КоманднаяПанельБУ.Кнопки.ПереключитьАктивность.Доступность = НЕ ПометкаУдаления;
	ЭлементыФормы.КоманднаяПанельНУ.Кнопки.ПереключитьАктивность.Доступность = НЕ ПометкаУдаления;
	
	Если ЗаполнениеДвижений.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.Страницы.ЗаполнениеДвижений.КартинкаЗаголовка = БиблиотекаКартинок.Сформировать;
	Иначе
		ЭлементыФормы.ПанельРегистров.Страницы.ЗаполнениеДвижений.КартинкаЗаголовка = Новый Картинка;
	КонецЕсли;

	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыБухгалтерии.Заголовок 	= НСтр("ru='Регистры бухгалтерии (';uk='Регістри бухгалтерії ('") + ТаблицаРегистровБухгалтерииТорговля.Количество() + ")";
	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления.Заголовок 	= НСтр("ru='Регистры накопления (';uk='Регістри накопичення ('") + ТаблицаРегистровНакопления.Количество() + ")";
	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений.Заголовок 		= НСтр("ru='Регистры сведений (';uk='Регістри відомостей ('") + ТаблицаРегистровСведений.Количество() + ")";	
	
	//Если ТаблицаРегистровБухгалтерииТорговля.Количество()>0 Тогда
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыБухгалтерии.КартинкаЗаголовка = БиблиотекаКартинок.ЖурналПроводок;		
	//Иначе
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыБухгалтерии.КартинкаЗаголовка = Новый Картинка;
	//КонецЕсли;
	//
	//Если ТаблицаРегистровНакопления.Количество()>0 Тогда
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления.КартинкаЗаголовка = БиблиотекаКартинок.РегистрНакопления;
	//Иначе
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления.КартинкаЗаголовка = Новый Картинка;
	//КонецЕсли;
	//
	//Если ТаблицаРегистровСведений.Количество()>0 Тогда
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений.КартинкаЗаголовка = БиблиотекаКартинок.РегистрСведений;
	//Иначе
	//	ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений.КартинкаЗаголовка = Новый Картинка;
	//КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры
          
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
//Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
//	
//	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
//	
//КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Заполнить движения"
// командно панели ТЧ "Выполняемые действия"
// Открывает форму выбора печатных форм объекта.
//
Процедура КоманднаяПанельЗаполнениеДвиженийЗаполнитьДвижения(Кнопка)
	
	ВыполнитьДействияДокумента();
	НастроитьЗакладкиПанелейРегистров();

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	Попытка
		
		Если Лев(ИмяКонфигурации, 11) = "Бухгалтерия" Тогда 
		
			Выполнить("РаботаСДиалогами.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);");
		
		Иначе
		
			Выполнить("МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);");
		
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
			
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы.
//
Процедура УстановитьВидимость()
	
	//Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Или Лев(ИмяКонфигурации, 29) = "ЗарплатаИУправлениеПерсоналом" Или Лев(ИмяКонфигурации, 11) = "Бухгалтерия" Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;	
	//
	//БУ = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе.ПолучитьОбъект();
	//ВестиУчетПоДопРазрезамРегл  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеПозиции, "ВидСубконто") = Неопределено, Ложь, Истина);
	//
	//Если ВестиУчетПоДопРазрезамРегл Тогда
	//	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СубконтоДт4.Видимость = Истина;
	//	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СубконтоКт4.Видимость = Истина;
	//Иначе
	//	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СубконтоДт4.Видимость = Ложь;
	//	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СубконтоКт4.Видимость = Ложь;
	//КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()


// Процедура - обработчик события "ПриИзменении" поля ВалютаДт
Процедура ТабличноеПолеДвиженияНУВалютаДтПриИзменении(Элемент)
	ТД       = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Дата);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаКт
Процедура ТабличноеПолеДвиженияНУВалютаКтПриИзменении(Элемент)
	ТД = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;

	Если НЕ ТД.СчетДт.Валютный Тогда
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Дата);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОПОЛНИТЕЛЬНЫХ КНОПОК

Процедура ЗаполнитьПоОстаткам(Параметр = Неопределено) //+++ИС Марченко  02.09.2008 ()
	
	ИмяРегистра =  ЭтаФорма.ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница.Имя;
	
	Если Параметр = "ДокументОприходования" Тогда
		Если Лев(ИмяРегистра,22) <> "ПартииТоваровНаСкладах" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы[ИмяРегистра].ТекущаяСтрока		<> Неопределено Тогда
		Ответ = Вопрос("Табличная часть "+""""+ЭтаФорма.ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница.Заголовок+""""+" уже содержит строки."
		+ Символы.ПС + "Перед заполнением необходимо удалить их!" + Символы.ПС,
		РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		НаборТекущегоОбъекта = Движения[ИмяРегистра];
		НаборТекущегоОбъекта.Очистить();
		Записать();
	КонецЕсли;
	
	об = Ложь;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";
	
	
	ТекстПоляИтоговПериоды = "";
	
	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";
	
	
	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;
	
	Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и Не об Тогда
		ТипПоляРегистра="Остаток";
		Условие = РазобратьОтбор(Обработка.ПостроительОтчета,"");
		Если Условие = "1" Тогда
			
			возврат;
			
		КонецЕсли;
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и об Тогда
		ТипПоляРегистра="ОстаткиИОбороты";
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		ТипПоляРегистра="Обороты";
	КонецЕсли;
	
	Для Инд = 0 По МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
		
		Ресурс = МетаданныеРегистра.Ресурсы[Инд];
		ИмяПоля           = Ресурс.Имя;
		ПредставлениеПоля = Ресурс.Представление();
		ОписаниеПоля      = Ресурс.Имя+"#";
		ВклПоУмолчанию    = Истина;
		ФорматнаяСтрока   = "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0");
		СтрИзмерения      = "";
		СтдВалюта         = "";
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		Если ТипПоляРегистра="Остаток" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+"ТаблицаРегистра." + ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + "ТаблицаРегистра." + ИмяПоля + ")";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля;
			
		ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоля + "НачальныйОстаток),
			|	СУММА(" + ИмяПоля + "КонечныйОстаток),
			|	СУММА(" + ИмяПоля + "Приход),
			|	СУММА(" + ИмяПоля + "Расход)";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля + "НачальныйОстаток,
			|	" + ИмяПоля + "КонечныйОстаток,
			|	" + ИмяПоля + "Приход,
			|	" + ИмяПоля + "Расход";
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);
	
	Для Инд = 0 По МетаданныеРегистра.Измерения.Количество()-1 Цикл
		
		Измерение = МетаданныеРегистра.Измерения[Инд];
		ИмяПоля           = Измерение.Имя;
		ПредставлениеПоля = Измерение.Представление();
		ОписаниеПоля      = Измерение.Имя;
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		// Для итогов
		ТекстПоляИтогов = ТекстПоляИтогов + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		
		ТекстПоляГруппировки = ТекстПоляГруппировки+ ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля;
		
	КонецЦикла;
	
	
	
	Текст = 
	"ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	|", 2)
	;
	
	Если ТипПоляРегистра="Остаток" Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, "+Условие+" ";	
					
	ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, {&Периодичность}, , ";
		
	КонецЕсли;
	
	Текст = Текст + ") КАК ТаблицаРегистра";
	
	
	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда
		
		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  Текст;
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата)+1);
	
	Для Каждого ПарамЗапроса Из Обработка.ПостроительОтчета.Отбор Цикл
		Если ПарамЗапроса.Использование = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли; 
		парЗапроса =   СтрЗаменить(ПарамЗапроса.ПутьКДанным,".","");
		Запрос.УстановитьПараметр(парЗапроса , ПарамЗапроса.Значение); 
	КонецЦикла;
	
	ТБ = Запрос.Выполнить().Выгрузить();
	
	ВсегоКолонок = ТБ.Колонки.Количество();
	
	//+++ИС Марченко  02.09.2008 (
	Если Параметр = "ДокументОприходования" Тогда
		Для каждого стр из  ТБ  Цикл
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(стр.ДокументОприходования) Тогда
				Продолжить;
			КонецЕсли;
			//первая строка
			ЭлементыФормы[ИмяРегистра].ДобавитьСтроку();
			Для каждого стрк из  ТБ.Колонки  Цикл
				ЭлементыФормы[ИмяРегистра].ТекущиеДанные[стрк.Имя] = стр[стрк.Имя];
			КонецЦикла;
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные.Период = Дата;
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			
			//вторая строка
			ЭлементыФормы[ИмяРегистра].ДобавитьСтроку();
			Для каждого стрк из  ТБ.Колонки  Цикл
				Если стрк.Имя = "ДокументОприходования" Тогда
					Продолжить;
				КонецЕсли;
				ЭлементыФормы[ИмяРегистра].ТекущиеДанные[стрк.Имя] = стр[стрк.Имя];
			КонецЦикла;
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные.Период = Дата;
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные["Количество"] = -стр["Количество"];
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные["Стоимость"] = -стр["Стоимость"];
			Если ИмяРегистра = "ПартииТоваровНаСкладахБухгалтерскийУчет" Тогда
				ЭлементыФормы[ИмяРегистра].ТекущиеДанные["СуммаУценки"] = -стр["СуммаУценки"];
			КонецЕсли;
		КонецЦикла;
		
		
		Возврат;
	КонецЕсли;
	//+++ИС Марченко  02.09.2008 )
	
	Для каждого стр из  ТБ  Цикл
		ЭлементыФормы[ИмяРегистра].ДобавитьСтроку();
		Для каждого стрк из  ТБ.Колонки  Цикл
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные[стрк.Имя] = стр[стрк.Имя];
		КонецЦикла;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.Период = Дата;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПоОстаткам(Кнопка) //+++ИС Марченко  12.09.2006 ()
	
	ЗаполнитьПоОстаткам();
	
	Возврат;
	
	ИмяРегистра =  ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Если ЭлементыФормы[ИмяРегистра].ТекущаяСтрока		<> Неопределено Тогда
		Ответ = Вопрос("Табличная часть "+""""+ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Заголовок+""""+" уже содержит строки."
		+ Символы.ПС + "Перед заполнением необходимо удалить их!" + Символы.ПС,
		РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		НаборТекущегоОбъекта = Движения[ИмяРегистра];
		НаборТекущегоОбъекта.Очистить();
		Записать();
	КонецЕсли;
	
	об = Ложь;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";
	
	
	ТекстПоляИтоговПериоды = "";
	
	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";
	
	
	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;
	
	Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и Не об Тогда
		ТипПоляРегистра="Остаток";
		Условие = РазобратьОтбор(Обработка.ПостроительОтчета,"");
		Если Условие = "1" Тогда
			
			возврат;
			
		КонецЕсли;
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и об Тогда
		ТипПоляРегистра="ОстаткиИОбороты";
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		ТипПоляРегистра="Обороты";
	КонецЕсли;
	
	Для Инд = 0 По МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
		
		Ресурс = МетаданныеРегистра.Ресурсы[Инд];
		ИмяПоля           = Ресурс.Имя;
		ПредставлениеПоля = Ресурс.Представление();
		ОписаниеПоля      = Ресурс.Имя+"#";
		ВклПоУмолчанию    = Истина;
		ФорматнаяСтрока   = "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0");
		СтрИзмерения      = "";
		СтдВалюта         = "";
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		Если ТипПоляРегистра="Остаток" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+"ТаблицаРегистра." + ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + "ТаблицаРегистра." + ИмяПоля + ")";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля;
			
		ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоля + "НачальныйОстаток),
			|	СУММА(" + ИмяПоля + "КонечныйОстаток),
			|	СУММА(" + ИмяПоля + "Приход),
			|	СУММА(" + ИмяПоля + "Расход)";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля + "НачальныйОстаток,
			|	" + ИмяПоля + "КонечныйОстаток,
			|	" + ИмяПоля + "Приход,
			|	" + ИмяПоля + "Расход";
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);
	
	Для Инд = 0 По МетаданныеРегистра.Измерения.Количество()-1 Цикл
		
		Измерение = МетаданныеРегистра.Измерения[Инд];
		ИмяПоля           = Измерение.Имя;
		ПредставлениеПоля = Измерение.Представление();
		ОписаниеПоля      = Измерение.Имя;
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		// Для итогов
		ТекстПоляИтогов = ТекстПоляИтогов + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		
		ТекстПоляГруппировки = ТекстПоляГруппировки+ ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля;
		
	КонецЦикла;
	
	
	
	Текст = 
	"ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	|", 2)
	;
	
	Если ТипПоляРегистра="Остаток" Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, "+Условие+" ";	
		
	ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, {&Периодичность}, , ";
		
	КонецЕсли;
	
	Текст = Текст + ") КАК ТаблицаРегистра";
	
	
	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда
		
		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  Текст;
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата)+1);
	
	Для Каждого ПарамЗапроса Из Обработка.ПостроительОтчета.Отбор Цикл
		Если ПарамЗапроса.Использование = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли; 
		парЗапроса =   СтрЗаменить(ПарамЗапроса.ПутьКДанным,".","");
		Запрос.УстановитьПараметр(парЗапроса , ПарамЗапроса.Значение); 
	КонецЦикла;
	
	ТБ = Запрос.Выполнить().Выгрузить();
	
	ВсегоКолонок = ТБ.Колонки.Количество();
	Для каждого стр из  ТБ  Цикл
		ЭлементыФормы[ИмяРегистра].ДобавитьСтроку();
		Для каждого стрк из  ТБ.Колонки  Цикл
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные[стрк.Имя] = стр[стрк.Имя];
		КонецЦикла;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.Период = Дата;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
КонецПроцедуры

Процедура ДействияФормыНастройки(Кнопка) //+++ИС Марченко  12.09.2006 ()
	
	ИмяРегистра =  ЭтаФорма.ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница.Имя;
	
	об = Ложь;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";
	
	
	ТекстПоляИтоговПериоды = "";
	
	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";
	
	
	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;
	
	Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и Не об Тогда
		ТипПоляРегистра="Остаток";
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки и об Тогда
		ТипПоляРегистра="ОстаткиИОбороты";
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		ТипПоляРегистра="Обороты";
	КонецЕсли;
	
	Для Инд = 0 По МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
		
		Ресурс = МетаданныеРегистра.Ресурсы[Инд];
		ИмяПоля           = Ресурс.Имя;
		ПредставлениеПоля = Ресурс.Представление();
		ОписаниеПоля      = Ресурс.Имя+"#";
		ВклПоУмолчанию    = Истина;
		ФорматнаяСтрока   = "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0");
		СтрИзмерения      = "";
		СтдВалюта         = "";
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		Если ТипПоляРегистра="Остаток" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+"ТаблицаРегистра." + ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + "ТаблицаРегистра." + ИмяПоля + ")";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля;
			
		ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";
			
			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоля + "НачальныйОстаток),
			|	СУММА(" + ИмяПоля + "КонечныйОстаток),
			|	СУММА(" + ИмяПоля + "Приход),
			|	СУММА(" + ИмяПоля + "Расход)";
			
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля + "НачальныйОстаток,
			|	" + ИмяПоля + "КонечныйОстаток,
			|	" + ИмяПоля + "Приход,
			|	" + ИмяПоля + "Расход";
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);
	
	Для Инд = 0 По МетаданныеРегистра.Измерения.Количество()-1 Цикл
		
		Измерение = МетаданныеРегистра.Измерения[Инд];
		ИмяПоля           = Измерение.Имя;
		ПредставлениеПоля = Измерение.Представление();
		ОписаниеПоля      = Измерение.Имя;
		
		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;
		
		// Для итогов
		ТекстПоляИтогов = ТекстПоляИтогов + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля + " КАК " + ИмяПоля;
		
		
		ТекстПоляГруппировки = ТекстПоляГруппировки+ ",
		|	" + "ТаблицаРегистра." + ОписаниеПоля;
		
	КонецЦикла;
	
	
	
	Текст = 
	"ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	|", 2)
	;
	
	Если ТипПоляРегистра="Остаток" Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(, ";		
		
	ИначеЕсли ТипПоляРегистра="ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(, ,, , ";
		
	КонецЕсли;
	
	Текст = Текст + ") КАК ТаблицаРегистра";
	
	
	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда
		
		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2);
		
	КонецЕсли;
	
	Обработка.ПостроительОтчета.Текст = Текст;
	Обработка.ПостроительОтчета.ЗаполнитьНастройки();
	
	НайденнаяСтрока = ОбработкаТаблицаРегистровНакопления.Найти(ИмяРегистра,"Имя");
	
	НастрокиПостроителя = НайденнаяСтрока.Настройки.Получить();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПостроительОтчета", Обработка.ПостроительОтчета);
	Параметры.Вставить("Настройки", НастрокиПостроителя);
	Параметры.Вставить("ИмяРегистра", ИмяРегистра);
	Параметры.Вставить("Пар", 0);
	Форма = Обработка.ПолучитьФорму("Настройки", ЭтаФорма, Параметры);
	
	Обработка.Параметры = Параметры;
	
	Если Форма.ОткрытьМодально() = Истина Тогда
		//сообщить("1");
	КонецЕсли;
	Если Параметры.Пар = 1 Тогда
		
		ЭтаФорма.ЭлементыФормы["КоманднаяПанель" + ИмяРегистра].Кнопки.ЗаполнитьПоОстаткам.Доступность = Истина;
		//+++ИС Марченко  02.09.2008 (
		Если Лев(ИмяРегистра,22) = "ПартииТоваровНаСкладах" Тогда
			ЭтаФорма.ЭлементыФормы["КоманднаяПанель" + ИмяРегистра].Кнопки.ЗаполнитьПоОстаткамЗаменаДокументаОприходования.Доступность = Истина;
		Иначе
			ЭтаФорма.ЭлементыФормы["КоманднаяПанель" + ИмяРегистра].Кнопки.ЗаполнитьПоОстаткамЗаменаДокументаОприходования.Доступность = Ложь;	
		КонецЕсли;
		//+++ИС Марченко  02.09.2008 )
	Иначе
		ЭтаФорма.ЭлементыФормы["КоманднаяПанель" + ИмяРегистра].Кнопки.ЗаполнитьПоОстаткам.Доступность = Ложь;
		//+++ИС Марченко  02.09.2008 (
		ЭтаФорма.ЭлементыФормы["КоманднаяПанель" + ИмяРегистра].Кнопки.ЗаполнитьПоОстаткамЗаменаДокументаОприходования.Доступность = Ложь;	
		//+++ИС Марченко  02.09.2008 )
	КонецЕсли; 
	
	НайденнаяСтрока = ОбработкаТаблицаРегистровНакопления.Найти(ИмяРегистра,"Имя");
	НайденнаяСтрока.Настройки = Новый ХранилищеЗначения(Параметры.Настройки);
КонецПроцедуры

//Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) //+++ИС Марченко  12.09.2006 ()
//	ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.ЗаполнитьПоОстаткам.Доступность = Ложь;
//	ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.ЗаполнитьПоОстаткамЗаменаДокументаОприходования.Доступность = Ложь; //+++ИС Марченко  02.09.2008
//КонецПроцедуры

Процедура ДействияФормыРаспределение(Кнопка) //+++ИС Марченко  07.05.2008 ()
	
	ИмяРегистра =  ЭтаФорма.ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница.Имя;
	
	Если ИмяРегистра <> "ПартииТоваровНаСкладах" Тогда
		Возврат;
	КонецЕсли;		
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	ТБ = ПолучитьТаблицуРаспределения();
	
	Если ЭлементыФормы[ИмяРегистра].ТекущаяСтрока		<> Неопределено Тогда
		Ответ = Вопрос("Табличная часть "+""""+ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Заголовок+""""+" уже содержит строки."
		+ Символы.ПС + "Перед заполнением необходимо удалить их!" + Символы.ПС,
		РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		НаборТекущегоОбъекта = Движения[ИмяРегистра];
		НаборТекущегоОбъекта.Очистить();
		Записать();
	КонецЕсли;
	
	ВсегоКолонок = ТБ.Колонки.Количество();
	Для каждого стр из  ТБ  Цикл
		ЭлементыФормы[ИмяРегистра].ДобавитьСтроку();
		Для каждого стрк из  ТБ.Колонки  Цикл
			ЭлементыФормы[ИмяРегистра].ТекущиеДанные[стрк.Имя] = стр[стрк.Имя];
		КонецЦикла;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.Период = Дата;
		ЭлементыФормы[ИмяРегистра].ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПоОстаткамЗаменаДокументаОприходования(Кнопка) //+++ИС Марченко  02.09.2008 ()
	ЗаполнитьПоОстаткам("ДокументОприходования");
КонецПроцедуры

Функция ПолучитьТаблицуРаспределения() Экспорт //+++ИС Марченко  07.05.2008 ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор = &НаЧтоРаспределяем
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Качество";
	
	Запрос.УстановитьПараметр("НаЧтоРаспределяем",Ссылка);
	
	БазаРаспределения = Запрос.Выполнить().Выгрузить();
	Набор = БазаРаспределения.Скопировать();
	Набор.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОприходованиеТоваровТовары.Номенклатура,
	|	СУММА(ОприходованиеТоваровТовары.Количество) КАК Сумма
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|ГДЕ
	|	ОприходованиеТоваровТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ОприходованиеТоваровТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Номер","Распр");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивКоэф = Новый Массив;
	
	СтруктПоиска = Новый Структура;
	
	Для Каждого Строка Из Результат Цикл
		
		МассивСумм = Неопределено;
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		НаборСтрок = БазаРаспределения.НайтиСтроки(СтруктПоиска);
		
		Если НаборСтрок.Количество() = 0 Тогда
			Сообщить("По номенклатуре "+Строка.Номенклатура+" код " +Строка.Номенклатура.Код+" нет коэффициента распределения",СтатусСообщения.Важное);			
			Продолжить;
		КонецЕсли;
		
		МассивКоэф.Очистить();
		Для Каждого СтрКоэф Из НаборСтрок Цикл
			МассивКоэф.Добавить( СтрКоэф["Количество"] );
		КонецЦикла;
		
		Если МассивКоэф.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
			
			Выполнить("МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Строка.Сумма    , МассивКоэф, 2);");
			
		Иначе 
			
			Выполнить("МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(Строка.Сумма    , МассивКоэф, 2);");
			
		КонецЕсли;		
		
		Если МассивСумм = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для К = 0 По НаборСтрок.Количество()-1 Цикл
			
			Если МассивСумм[К] = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрока = Набор.Добавить();
			
			НоваяСтрока.Номенклатура                  	= НаборСтрок[К].Номенклатура;
			НоваяСтрока.Склад 							= НаборСтрок[К].Склад;
			НоваяСтрока.ХарактеристикаНоменклатуры 		= НаборСтрок[К].ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры 				= НаборСтрок[К].СерияНоменклатуры;
			НоваяСтрока.ДокументОприходования 			= НаборСтрок[К].ДокументОприходования;
			НоваяСтрока.СтатусПартии 					= НаборСтрок[К].СтатусПартии;
			НоваяСтрока.Заказ 							= НаборСтрок[К].Заказ;
			НоваяСтрока.Качество 						= НаборСтрок[К].Качество;
			НоваяСтрока.Количество 						= НаборСтрок[К].Количество;
			НоваяСтрока.Стоимость     					= МассивСумм[К];
			
		КонецЦикла;
		
	КонецЦикла;
	
	возврат Набор;
КонецФункции

Функция РазобратьОтбор (Построитель,СтрокаОтличия,Пар = "") Экспорт //+++ ИС Чайка Виталий 2009-03-26 {Заполнение} ()
	
	Отбор = Построитель.Отбор;
	Текст = "";
	Пар1 = 0;
	Для Каждого ПарамЗапроса Из Отбор Цикл 
		
		Если (Найти(Пар,ПарамЗапроса.ПутьКДанным) =  0) и (Пар <> "") Тогда
			
			Продолжить;	
			
		КонецЕсли;
		
		Строка = "";
		
		Если Текст <> "" Тогда
			
			Текст = Текст +  " и ";
			
		КонецЕсли; 
		
		Если ПарамЗапроса.Использование = Ложь Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		парЗапроса =   СтрЗаменить(ПарамЗапроса.ПутьКДанным,".","");
		
		Если ПарамЗапроса.ВидСравнения =  ВидСравнения.Равно Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" = "+" &"+парЗапроса +СтрокаОтличия;
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.НеРавно Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" <> "+" &"+парЗапроса +СтрокаОтличия;
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.Меньше Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" < "+" &"+парЗапроса +СтрокаОтличия;
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.Больше Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" > "+" &"+парЗапроса +СтрокаОтличия;
			
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.БольшеИлиРавно Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" >= "+" &"+парЗапроса +СтрокаОтличия;
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.МеньшеИлиРавно Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" =< "+" &"+парЗапроса +СтрокаОтличия;
			
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.ВСписке Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" В ( "+" &"+парЗапроса +СтрокаОтличия+" ) ";	
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.НеВСписке Тогда
			Строка = " ( НЕ "+ПарамЗапроса.ПутьКДанным+" В ( "+" &"+парЗапроса +СтрокаОтличия+" )) ";				
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.ВСпискеПоИерархии Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" В ИЕРАРХИИ ( "+" &"+парЗапроса +СтрокаОтличия+" ) ";							
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.НеВСпискеПоИерархии Тогда
			Строка = " ( НЕ "+ПарамЗапроса.ПутьКДанным+" В ИЕРАРХИИ ( "+" &"+парЗапроса +СтрокаОтличия+" )) ";
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.ВИерархии Тогда
			Строка = ПарамЗапроса.ПутьКДанным+" В ИЕРАРХИИ ( "+" &"+парЗапроса +СтрокаОтличия+" ) ";
		ИначеЕсли ПарамЗапроса.ВидСравнения =  ВидСравнения.НеВИерархии Тогда
			Строка = " ( НЕ "+ПарамЗапроса.ПутьКДанным+" В ИЕРАРХИИ ( "+" &"+парЗапроса +СтрокаОтличия+" )) ";
		Иначе
			Сообщить("Данный вид сравнения не допустим - "+ПарамЗапроса.ВидСравнения);
			Пар1 = 1;
		КонецЕсли; 
		
		Текст = Текст + Строка;
	КонецЦикла;
	
	Если Пар1 = 1 Тогда
	
		Текст = "1";
		Возврат Текст;
	
	Иначе
	
		Возврат Текст;	
	
	КонецЕсли; 
	
КонецФункции // РазобратьОтбор()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ДокументОбъект = ЗначениеВыбора.ПолучитьОбъект();
	
КонецПроцедуры

ОбработкаТаблицаРегистровНакопления = Новый ТаблицаЗначений;
ОбработкаТаблицаРегистровНакопления.Колонки.Добавить("Имя");
ОбработкаТаблицаРегистровНакопления.Колонки.Добавить("Представление");
ОбработкаТаблицаРегистровНакопления.Колонки.Добавить("Настройки");

ИмяКонфигурации = Метаданные.Имя;

Если Лев(ИмяКонфигурации, 19) = "УправлениеТорговлей" Тогда
		
	ТаблицаРегистровБухгалтерииТорговля = Новый ТаблицаЗначений;
	ТаблицаРегистровБухгалтерииТорговля.Колонки.Добавить("Имя");
	ТаблицаРегистровБухгалтерииТорговля.Колонки.Добавить("Представление");
	
Иначе
	
	Выполнить("ТаблицаРегистровБухгалтерииТорговля = ТаблицаРегистровБухгалтерии");
КонецЕсли;	